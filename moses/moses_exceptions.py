"""Module that groups all the types for exceptions generated by the ide backend.

When you add new errors, run this module to re-generate YAML
that can then be pasted inside the API definition file.
"""
import os
import logging
import json
from typing import Any, Optional, List, Dict
import flask
import docker


class MosesError(Exception):
    """Generic base class used to identify app-specific exceptions."""

    code = -1
    description = ""

    def __init__(
        self, message: Optional[str] = None, exception: Optional[Exception] = None
    ):
        """Initialize object.

        :param message: Error message returned from the REST API, defaults to None
        :type message: str, optional
        :param exception: Original exception that will be "encapsulated", defaults to None
        :type exception: Exception, optional
        """
        self.exception = exception
        if message is None:
            self.message = (self).description
        else:
            self.message = message

        super().__init__(self.message)


class ObjectNotFound(MosesError):
    """404 error from API when an invalid object ID is passed."""

    code = 404
    description = "Object not found"

    def __init__(self, obj_type: str, obj_id: str):
        """Initialize exception with an error message.

        :param obj_type: object type (Application, device etc.)
        :type obj_type: str
        :param obj_id: unique ID of the object
        :type obj_id: str
        """
        super().__init__(message=f"{obj_type} {obj_id} not found.")


class InternalServerError(MosesError):
    """500 error, typical SNAFU handling."""

    code = 500
    description = "Unexpected exception."

    def __init__(self, e: Optional[Any]):
        """Encapsulate the original exception.

        :param e: Original exception
        :type e: Exception, optional
        """
        super().__init__("Exception: " + str(e) if e is not None else "unknown")


class ImageNotFoundError(MosesError):
    """Container image not found on local host."""

    code = 520
    description = "Container image not found on local host."

    def __init__(self, image: Any):
        """Generate an error message with image info.

        :param image: Image object or tag
        :type image: Any
        """
        super().__init__("Image " + str(image) + " is not available.")


class IncompatibleDeviceError(MosesError):
    """Device is not compatible with selected platform."""

    code = 521
    description = "Device is not compatible with selected platform."

    def __init__(self, device: Any):
        """Generate error string with device information.

        :param device: Device object or string
        :type device: Any
        """
        super().__init__(
            "Device " + str(device) +
            " is not compatible with selected platform."
        )

# Name is generic, but using package name as prefix this is not an issue
# pylint: disable = redefined-builtin


class ConnectionError(MosesError):
    """SSH/TCP-IP error."""

    code = 522
    description = "Error communicating with device."

    def __init__(self, device: Any, e: Exception):
        """Encapsulate original exception.

        :param device: device object or string
        :type device: Any
        :param e: exception
        :type e: Exception
        """
        super().__init__(
            "Error communicating with device " +
            str(device) + " exception: " + str(e)
        )


class ContainerNotRunningError(MosesError):
    """Container not running."""

    code = 523
    description = "Container is not running."

    def __init__(self, device: Any, applicationid: str):
        """Generate error message.

        :param device: device object or string
        :type device: Any
        :param applicationid: application id
        :type applicationid: str
        """
        super().__init__(
            "Container for app "
            + str(applicationid)
            + " is not running on device "
            + str(device)
        )


class SudoError(MosesError):
    """Error when invoking sudo."""

    code = 524
    description = "User is not enabled to execute commands as root."

    def __init__(self, username: str):
        """Generate error message.

        :param username: name of current user
        :type username: str
        """
        super().__init__(
            "User " + str(username) +
            " is not enabled to execute commands as root."
        )


class DockerError(MosesError):
    """Base class used to encapsulate local and remote docker errors."""

    def __init__(
        self,
        e: Any,
        log: Optional[List[str]] = None,
        info: Optional[Dict[str, str]] = None,
    ):
        """Generate error message from docker information.

        :param e: exception generated by docker
        :type e: Any
        :param log: log lines, defaults to None
        :type log: List[str], optional
        :param info: additiona informations, defaults to None
        :type info: Dict[str, str], optional
        """
        message = "Docker exception: " + str(e)

        if info is not None:
            for key, value in info.items():
                message += f"{os.linesep}{key}:{value}"

        if log is not None:
            for logline in log:
                message += f"{os.linesep}{logline}"

        if isinstance(e, docker.errors.BuildError):
            for line in e.build_log:
                if "stream" in line:
                    message += os.linesep + line["stream"].strip()

        if isinstance(e, Exception):
            super().__init__(message, exception=e)
        else:
            super().__init__(message)


class RemoteDockerError(DockerError):
    """Remote docker error."""

    code = 525
    description = "Remote docker exception."

    def __init__(
        self,
        device: Any,
        e: Any,
        log: Optional[List[str]] = None,
        info: Optional[Dict[str, str]] = None,
    ):
        """Generate error message from docker information.

        :param e: exception generated by docker
        :type e: Any
        :param log: log lines, defaults to None
        :type log: List[str], optional
        :param info: additiona informations, defaults to None
        :type info: Dict[str, str], optional
        """
        remote_info = {"device": device}

        if info is not None:
            remote_info.update(info)
        super().__init__(e, log=log, info=remote_info)


class RemoteImageNotFoundError(MosesError):
    """Image not found on device."""

    code = 526
    description = "Image not found on remote device."

    def __init__(self, image: Any):
        """Generate error message.

        :param image: image object or tag
        :type image: Any
        """
        super().__init__("Image " + str(image) + " is not available.")


class PlatformDoesNotRequireSDKError(MosesError):
    """SDK API called on a platform that does not have an SDK."""

    code = 527
    description = "Platform does not have an SDK."

    def __init__(self, platform_id: str):
        """Generate error message.

        :param platform_id: platform id
        :type platform_id: str
        """
        super().__init__(
            "Platform " + str(platform_id) +
            " does not require an SDK container."
        )


class PlatformDoesNotExistError(MosesError):
    """Invalid platform ID."""

    code = 528
    description = "Platform does not exist."

    def __init__(self, platform_id: str):
        """Generate error message.

        :param platform_id: platform id
        :type platform_id: str
        """
        super().__init__("Platform " + str(platform_id) + " does not exist.")


class RemoteCommandError(MosesError):
    """Error executing a command over SSH."""

    code = 529
    description = "Remote command execution failed."

    def __init__(self, command: str, errorcode: Any):
        """Generate error message.

        :param command: command that generated the error
        :type command: str
        :param errorcode: error string or code
        :type errorcode: Any
        """
        super().__init__(
            "Remote command " + str(command) +
            " returned error " + str(errorcode)
        )


class LocalDockerError(DockerError):
    """Local docker error."""

    code = 530
    description = "Local docker exception."

    def __init__(
        self,
        e: Any,
        log: Optional[List[str]] = None,
        info: Optional[Dict[str, str]] = None,
    ) -> None:
        """Generate error message from docker information.

        :param e: exception generated by docker
        :type e: Any
        :param log: log lines, defaults to None
        :type log: List[str], optional
        :param info: additiona informations, defaults to None
        :type info: Dict[str, str], optional
        """
        super().__init__(e, log=log, info=info)


class InvalidObjectIdError(MosesError):
    """Invalid ID."""

    code = 531
    description = "Object Does not have a valid id."

    def __init__(self) -> None:
        """Initialize object."""
        super().__init__()


class InvalidObjectStateError(MosesError):
    """Function called on an object with some invalid data."""

    code = 532
    description = "Object cannot be saved because it's in an invalid state."

    def __init__(self, objid: str) -> None:
        """Generate error message.

        :param objid: unique id of the object
        :type objid: str
        """
        super().__init__("Object " + str(objid) + " is in an invalid state.")


class SSHError(MosesError):
    """SSH error."""

    code = 533
    description = "SSH error."

    def __init__(self, e: Exception) -> None:
        """Generate error message.

        :param e: original exception from paramiko
        :type e: Exception
        """
        super().__init__("SSH error: " + str(e), exception=e)


# Name is generic, but using package name as prefix this is not an issue
# pylint: disable = redefined-builtin
class OSError(MosesError):
    """OS specific error."""

    code = 534
    description = "OS error."

    def __init__(self, e: Exception) -> None:
        """Generate error message from original exception.

        :param e: original exception
        :type e: Exception
        """
        super().__init__("OS error: " + str(e), exception=e)


class InvalidDeviceIdError(MosesError):
    """Device id is not valid."""

    code = 535
    description = "Invalid device id."

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__()


class SerialError(MosesError):
    """Error comunicating over serial port."""

    code = 536
    description = "Serial port error."

    def __init__(self, e: Exception) -> None:
        """Encapsulate serial port exception.

        :param e: original exception generated from serial
        :type e: Exception
        """
        super().__init__("Serial port error: " + str(e), exception=e)


# Name is generic, but using package name as prefix this is not an issue
# pylint: disable = redefined-builtin
class TimeoutError(MosesError):
    """Timeout during an operation/command."""

    code = 537
    description = "Command timeout."

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__()


class LoginFailedError(MosesError):
    """Login failure."""

    code = 538
    description = "Login failed."

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__()


class SSHTunnelError(MosesError):
    """Error when creating an SSH tunnel."""

    code = 539
    description = "SSH tunnel error."

    def __init__(self, e: Exception) -> None:
        """Encapsulate SSH exception.

        :param e: original exception
        :type e: Exception
        """
        super().__init__("SSH tunnel error: " + str(e), exception=e)


class InvalidPathError(MosesError):
    """Invalid path."""

    code = 540
    description = "Invalid path."

    def __init__(self, path: Any) -> None:
        """Generate error message.

        :param path: path as string or pathlib.Path object
        :type path: Any
        """
        super().__init__("Invalid path: " + str(path))


class SDKContainerNotRunningError(MosesError):
    """SDK container is not running."""

    code = 541
    description = "SDK container is not running."

    def __init__(self, application_id: str) -> None:
        """Generate error message.

        :param application_id: application id
        :type application_id: str
        """
        super().__init__(
            "SDK container for app " + str(application_id) + " is not running."
        )


class PullImageError(MosesError):
    """Error pulling images from registry."""

    code = 542
    description = "Error pulling images from registry."

    def __init__(self, failed: list) -> None:
        """Generate error message.

        :param failed: list of tags that could not be downloaded
        :type failed: list
        """
        message = "Can't pull images: " + ",".join(failed)
        super().__init__(message)


class SDKRequiresConfiguration(MosesError):
    """Platform requires that a configuration is specified for SDK generation."""

    code = 543
    description = (
        "Platform requires that a configuration is specified for SDK generation."
    )

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__(
            "Platform requires debug/release configuration for SDK generation."
        )


class LocalCommandError(MosesError):
    """Local command execution failed."""

    code = 544
    description = "Local command execution failed."

    def __init__(self, result: Any) -> None:
        """Generate error message.

        :param result: information about failed process execution
            (can be subprocess.CompletedProcess or subprocess.Popen)
        :type result: Any
        """
        message = (
            "Local command "
            + str(result.args)
            + " returned error "
            + str(result.returncode)
        )

        if result.stderr is not None:
            message = result.stderr.decode("utf-8")

        super().__init__(message)


class DNSError(MosesError):
    """Error resolving device hostname."""

    code = 545
    description = "Error resolving device hostname."

    def __init__(self, hostname: str) -> None:
        """Generate error message.

        :param hostname: hostname
        :type hostname: str
        """
        super().__init__("Can't find a valid IP for " + hostname)


class InvalidDeviceError(MosesError):
    """Device is not a Toradex device but can't be used as community device."""

    code = 546
    description = "Device information is not valid."

    def __init__(self, device: Any) -> None:
        """Generate error message.

        :param device: device object or string
        :type device: Any
        """
        super().__init__("Device information is not valid " + repr(device))


class InvalidModelError(MosesError):
    """Model id not recognized."""

    code = 547
    description = "Model id not recognized."

    def __init__(self, model: str) -> None:
        """Generate error string.

        :param model: model id read from sysfs
        :type model: str
        """
        super().__init__("Model id not recognized " + model)


class SDKContainerNotFoundError(MosesError):
    """SDK container not found."""

    code = 548
    description = "SDK container not found."

    def __init__(self, e: Exception) -> None:
        """Generate error string.

        :param e: exception generated while accessing the SDK container
        :type e: Exception
        """
        super().__init__("SDK Container not found: " + str(e), exception=e)


class ContainerDoesNotSupportSSH(MosesError):
    """Container does not support SSH."""

    code = 549
    description = "Container does not support SSH."

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__("Application container does not expose SSH port 2222")


class NoTagError(MosesError):
    """No tag has been specified for the image."""

    code = 550
    description = "No tag has been specified for the image."

    def __init__(self) -> None:
        """Generate error message."""
        super().__init__(
            "No tag has been specified for the image, please set tag property before pushing."
        )


class AbortError(MosesError):
    """User aborted the operation."""

    code = 551
    description = "Operation aborted."

    def __init__(self) -> None:
        """Generate error string."""
        super().__init__("Operation has been aborted.")


class InvalidOrMissingParameterError(MosesError):
    """User aborted the operation."""

    code = 552
    description = "Invalid or missing parameter."

    def __init__(self,parameter:str) -> None:
        """Generate error string."""
        super().__init__(f"Parameter {parameter} is missing or invalid.")

class TorizonCoreBuilderError(MosesError):
    """TorizonCore Builder returned an error."""

    code = 553
    description = "TorizonCore Builder error, check logs."

    def __init__(self,parameter:str) -> None:
        """Generate error string."""
        super().__init__(f"TorizonCore Builder returned exit code {parameter}")

def encode_error(exception: MosesError) -> flask.Response:
    """Encode an error into a Flaskk response object.

    :param exception: exception/error to be encoded
    :type e: MosesError

    """
    fields = {
        "code": exception.code,
        "description": exception.description,
        "message": str(exception)}

    logging.error(
        "Error: %d %s %s",
        exception.code,
        exception.description,
        str(exception))

    if exception.exception is not None:
        logging.error("Exception: %s", str(exception))
        logging.error(exception.exception)

    return flask.Response(
        response=json.dumps(fields), status=exception.code, mimetype="application/json"
    )


def encode_exception(exception: Exception) -> flask.Response:
    """Encode a generic exception into a Flask response object.

    :param exception: exception or object that can be converted to string

    """
    fields = {
        "code": 500,
        "description": "Internal server error",
        "message": str(exception)}

    logging.error(exception, exc_info=True)

    return flask.Response(
        response=json.dumps(fields), status=500, mimetype="application/json"
    )
