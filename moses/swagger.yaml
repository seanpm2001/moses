swagger: "2.0"
info:
  description: Toradex API to build and deploy applications running as containers on Torizon
  version: 1.0.10
  title: Torizon IDE-backend API
consumes:
  - application/json
produces:
  - application/json

host: localhost:5000
basePath: /api
schemes: [http]

# Paths supported by the server application
paths:
  /version:
    get:
      operationId: version_get
      tags:
        - Version
      summary: APP/API version
      description: returns app and API version
      responses:
        200:
          description: Successful
          schema:
              properties:
                app_version:
                  type: string
                api_version:
                  type: string

  /version/docker:
    get:
      operationId: version_docker
      tags:
        - Version
      summary: Docker version info
      description: returns docker version information
      responses:
        200:
          description: Successful
          schema:
              $ref: "#/definitions/Docker_Version"
        500:
          $ref: "#/responses/InternalServerError_500"


  /devices:
    get:
      operationId: devices_get
      tags:
        - Devices
      summary: Get all devices
      description: Returns all configured devices
      responses:
        200:
          description: Successful
          schema:
            type: array
            items:
              $ref: "#/definitions/TargetDevice"
        500:
          $ref: "#/responses/InternalServerError_500"

  /devices/network_detect:
    get:
      operationId: devices_networkdetect
      tags:
        - Devices
      summary: Finds a network device
      description: Returns a new device detected from network
      parameters:
        - name: hostname
          in: query
          type: string
          required: true
        - name: username
          in: query
          type: string
          required: true
        - name: password
          in: query
          type: string
          required: true

      responses:
        200:
          description: Returns device
          schema:
            $ref: "#/definitions/TargetDevice"
        500:
          $ref: "#/responses/InternalServerError_500"
        524:
          $ref: "#/responses/SudoError_524"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"
        533:
          $ref: "#/responses/SSHError_533"
        534:
          $ref: "#/responses/OSError_534"
        535:
          $ref: "#/responses/InvalidDeviceIdError_535"
        546:
          $ref: "#/responses/InvalidDeviceError_546"
        547:
          $ref: "#/responses/InvalidModelError_547"          

  /devices/serial_detect:
    get:
      operationId: devices_serialdetect
      tags:
        - Devices
      summary: Finds a device connected to serial port
      description: Returns a new device detected from serial port
      parameters:
        - name: port
          in: query
          type: string
          required: true
        - name: username
          in: query
          type: string
          required: true
        - name: password
          in: query
          type: string
          required: true

      responses:
        200:
          description: Returns device
          schema:
            $ref: "#/definitions/TargetDevice"
        500:
          $ref: "#/responses/InternalServerError_500"
        524:
          $ref: "#/responses/SudoError_524"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"
        534:
          $ref: "#/responses/OSError_534"
        535:
          $ref: "#/responses/InvalidDeviceIdError_535"
        536:
          $ref: "#/responses/SerialError_536"
        537:
          $ref: "#/responses/TimeoutError_537"
        538:
          $ref: "#/responses/LoginFailedError_538"
        546:
          $ref: "#/responses/InvalidDeviceError_546"
        547:
          $ref: "#/responses/InvalidModelError_547"

  /devices/{device_id}:

    get:
      operationId: device_get
      tags:
        - Devices
      summary: Get device
      description: Returns a specified device, knowing its id
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns device
          schema:
            $ref: "#/definitions/TargetDevice"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"

    put:
      operationId: device_modify
      tags:
        - Devices
      summary: Change device properties
      description: Changes specified properties on a device
      parameters:
        - $ref: "#/parameters/device_id"
        - name: device
          in: body
          schema:
             $ref: "#/definitions/TargetDevice"
      responses:
        200:
          description: Returns device
          schema:
            $ref: "#/definitions/TargetDevice"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"

    delete:
      tags:
        - Devices
      operationId: device_delete
      summary: Remove a device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        204:
          description: Device was correctly deleted
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /devices/{device_id}/update:
    get:
      tags:
        - Devices
      operationId: device_update
      summary: update information for a specific device
      description: Returns a specified device, with updated info if available
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns device
          schema:
            $ref: "#/definitions/TargetDevice"
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"
        533:
          $ref: "#/responses/SSHError_533"
        534:
          $ref: "#/responses/OSError_534"
        535:
          $ref: "#/responses/InvalidDeviceIdError_535"

  /devices/{device_id}/docker/open:

    get:
      operationId: device_opendocker
      tags:
        - Devices
      summary: Expose remote docker
      description: Expose remote docker port on localhost
      parameters:
        - $ref: "#/parameters/device_id"
        - name: port
          in: query
          type: integer
          required: false
      responses:
        200:
          description: Returns port
          schema:
            type: integer
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/docker/close:

    get:
      operationId: device_closedocker
      tags:
        - Devices
      summary: Disables remote docker
      description: Stop exposing remote docker port on localhost
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: OK
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /devices/{device_id}/docker/port:

    get:
      operationId: device_getdockerport
      tags:
        - Devices
      summary: remote docker local port
      description: Get local port where docker is tunneled
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns port
          schema:
            type: integer
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/ssh/open:

    get:
      operationId: device_openssh
      tags:
        - Devices
      summary: Expose remote ssh
      description: Expose remote ssh port on localhost
      parameters:
        - $ref: "#/parameters/device_id"
        - name: port
          in: query
          type: integer
          required: false
      responses:
        200:
          description: Returns port
          schema:
            type: integer
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/ssh/close:

    get:
      operationId: device_closessh
      tags:
        - Devices
      summary: Disables ssh tunneling
      description: Stop exposing remote ssh port on localhost
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: OK
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /devices/{device_id}/ssh/port:

    get:
      operationId: device_getsshport
      tags:
        - Devices
      summary: remote ssh local port
      description: Get local port where ssh is tunneled
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns port
          schema:
            type: integer
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/processes:

    get:
      operationId: device_getprocesses
      tags:
        - Devices
      summary: list running processes on a device
      description: Get processes running on a specified device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns list of processes
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Process"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/memory:

    get:
      operationId: device_getmemory
      tags:
        - Devices
      summary: Return memory information
      description: Return total/free/available memory on the device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns memory information
          schema:
            $ref: "#/definitions/MemInfo"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/storage:

    get:
      operationId: device_getmountpoints
      tags:
        - Devices
      summary: return storage information for a device
      description: Get a list of storages for the specified device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns list of storage information
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MountPoint"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/images:

    get:
      operationId: device_getimages
      tags:
        - Devices
      summary: list images
      description: Get images available on a specified device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns list of images
          schema:
            type: array
            items:
              $ref: "#/definitions/Docker_Image"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/images/{image_id}:

    get:
      operationId: images_getimage
      tags:
        - Devices
      summary: get image details
      description: Get detailed information on an image
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/image_id"
      responses:
        200:
          description: Returns image
          schema:
            $ref: "#/definitions/Docker_Image"
        404:
          description: Device or Image not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

    delete:
      operationId: images_deleteimage
      tags:
        - Devices
      summary: delete an image
      description: Executes rmi command on and image
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/image_id"
      responses:
        204:
          description: OK
        404:
          description: Device or image not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers:

    get:
      operationId: device_getcontainers
      tags:
        - Devices
      summary: list containers
      description: Get containers running on a specified device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Returns list of containers
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Docker_Container"
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}:

    get:
      operationId: containers_getcontainer
      tags:
        - Devices
      summary: get container details
      description: Get detailed information on a specific container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns container
          schema:
            $ref: "#/definitions/Docker_Container"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

    delete:
      operationId: containers_deletecontainer
      tags:
        - Devices
      summary: delete a container
      description: Executes rm command on container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        204:
          description: OK
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/start:

    get:
      operationId: container_start
      tags:
        - Devices
      summary: starts container
      description: Start specified container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns container
          schema:
            $ref: "#/definitions/Docker_Container"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/stop:

    get:
      operationId: container_stop
      tags:
        - Devices
      summary: stops container
      description: Stops specified container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns container
          schema:
            $ref: "#/definitions/Docker_Container"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/processes:

    get:
      operationId: container_getprocesses
      tags:
        - Devices
      summary: return processes running in container
      description: returns a list of processes running in the specified container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns list of processes
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Process"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/memory:

    get:
      operationId: container_getmemory
      tags:
        - Devices
      summary: Return container memory information
      description: Return total/free/available memory on a specific container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns memory information
          schema:
            $ref: "#/definitions/MemInfo"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/storage:

    get:
      operationId: container_getmountpoints
      tags:
        - Devices
      summary: return information about storage
      description: returns a list of storages available inside the container
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
      responses:
        200:
          description: Returns list of storage informations
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MountPoint"
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/containers/{container_id}/logs:

    get:
      operationId: container_getlogs
      tags:
        - Devices
      summary: return container logs one chunk a time
      description: return one or more lines of the log, waiting until it's available, this will allow clients to show logs in almost real time
      parameters:
        - $ref: "#/parameters/device_id"
        - $ref: "#/parameters/container_id"
        - name: restart
          type: boolean
          in: query
          required: false
          default: false
          description: when true reads the lock back from beginning
      responses:
        200:
          description: Returns list of storage informations
          schema:
            type: string
        204:
          description: No content, container is no longer running and log has ben fully read
        404:
          description: Device or container not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /devices/{device_id}/privatekey:
    get:
      operationId: device_getprivatekey
      tags:
        - Devices
      summary: return the path of the device private key
      description: returns the key that can be used to activate passowordless connections to the device
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: Path of the private key file
          schema:
            type: string
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /devices/{device_id}/syncfolders:

    get:
      operationId: device_syncfolders
      tags:
        - Devices
      summary: synchronizes folders
      description: synchronizes folders between host and target
      parameters:
        - $ref: "#/parameters/device_id"
        - name: sourcefolder
          in: query
          type: string
          required: true
        - name: destfolder
          in: query
          type: string
          required: true
        - $ref: "#/parameters/progress_id"

      responses:
        200:
          description: Sysroot updated
        404:
          description: Device not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        523:
          $ref: "#/responses/ContainerNotRunningError_523"
        533:
          $ref: "#/responses/SSHError_533"
        544:
          $ref: "#/responses/LocalCommandError_544"

  /devices/{device_id}/current_ip:
    get:
      tags:
        - Devices
      operationId: device_current_ip
      summary: returns current ip of the device
      description: Returns current ip of the device using local DNS and mDNS
      parameters:
        - $ref: "#/parameters/device_id"
      responses:
        200:
          description: ip
          schema:
            type: string
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        534:
          $ref: "#/responses/OSError_534"
        535:
          $ref: "#/responses/InvalidDeviceIdError_535"

  /eulas:
    get:
      operationId: eulas_get
      tags:
        - Eulas
      summary: Get all eulas
      description: Returns all eulas
      responses:
        200:
          description: Successful
          schema:
            type: array
            items:
              $ref: "#/definitions/Eula"
        500:
          $ref: "#/responses/InternalServerError_500"

  /eulas/{eula_id}:
    get:
      operationId: eula_get
      tags:
        - Eulas
      summary: Get an eula
      description: Returns data about a specific eula
      parameters:
        - $ref: "#/parameters/eula_id"
      responses:
        200:
          description: Returns an eula
          schema:
            $ref: "#/definitions/Eula"
        404:
          description: eula not found
        500:
          $ref: "#/responses/InternalServerError_500"

    put:
      operationId: eula_modify
      tags:
        - Eulas
      summary: Change eula properties
      description: Set eula as visualized and/or accepted
      parameters:
        - $ref: "#/parameters/eula_id"
        - name: e
          in: body
          schema:
             $ref: "#/definitions/Eula"
      responses:
        200:
          description: Returns eula
          schema:
            $ref: "#/definitions/Eula"
        404:
          description: eula not found
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"

  /platforms:
    get:
      operationId: platforms_get
      tags:
        - Platforms
      summary: Get all platforms
      description: Returns all configured platforms
      parameters:
        - name: runtime
          in: query
          type: string
          required: false
      responses:
        200:
          description: Successful
          schema:
            type: array
            items:
              $ref: "#/definitions/Platform"
        500:
          $ref: "#/responses/InternalServerError_500"

  /platforms/{platform_id}:
    get:
      operationId: platform_get
      tags:
        - Platforms
      summary: Get a platform
      description: Returns data about a specific platform
      parameters:
        - $ref: "#/parameters/platform_id"
      responses:
        200:
          description: Returns a platform
          schema:
            $ref: "#/definitions/Platform"
        404:
          description: Platform not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /platforms/{platform_id}/compatibledevices:
    get:
      operationId: platform_compatibledevices_get
      tags:
        - Platforms
      summary: get compatible devices
      description: Returns a list of devices that are compatible with the platform
      parameters:
        - $ref: "#/parameters/platform_id"
      responses:
        200:
          description: Returns a list of devices
          schema:
            type: array
            items:
              $ref: "#/definitions/TargetDevice"
        404:
          description: Platform not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /applications/create:
    get:
      operationId: applications_create
      tags:
        - Applications
      summary: Loads an application configuration
      description: Returns data about an application
      parameters:
        - name: platform_id
          in: query
          type: string
          required: true
        - name: path
          in: query
          type: string
          required: true
        - name: username
          in: query
          type: string
          required: false
      responses:
        200:
          description: Returns an application
          schema:
            $ref: "#/definitions/Application"
        404:
          description: Platform not found
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"
        540:
          $ref: "#/responses/InvalidPathError_540"

  /applications/load:
    get:
      operationId: applications_load
      tags:
        - Applications
      summary: Loads an application configuration
      description: Returns data about an application
      parameters:
        - name: path
          in: query
          type: string
          required: true
      responses:
        200:
          description: Returns an application
          schema:
            $ref: "#/definitions/Application"
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"
        540:
          $ref: "#/responses/InvalidPathError_540"

  /applications/{application_id}:

    get:
      operationId: application_get
      tags:
        - Applications
      summary: Get application
      description: Returns a specified application, knowing its id
      parameters:
        - $ref: "#/parameters/application_id"
      responses:
        200:
          description: Returns application
          schema:
            $ref: "#/definitions/Application"
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"

    put:
      operationId: application_modify
      tags:
        - Applications
      summary: Change application properties
      description: Changes specified properties on an applicaton
      parameters:
        - $ref: "#/parameters/application_id"
        - name: application
          in: body
          schema:
             $ref: "#/definitions/Application"
      responses:
        200:
          description: Returns application
          schema:
            $ref: "#/definitions/Application"
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        531:
          $ref: "#/responses/InvalidObjectIdError_531"
        532:
          $ref: "#/responses/InvalidObjectStateError_532"

    delete:
      tags:
        - Applications
      operationId: application_delete
      summary: Remove an application and all the associated data and containers
      parameters:
        - $ref: "#/parameters/application_id"
      responses:
        204:
          description: Application was correctly deleted
        404:
          description: Application no found
        500:
          $ref: "#/responses/InternalServerError_500"
        530:
          $ref: "#/responses/LocalDockerError_530"

  /applications/{application_id}/updated:
    get:
      operationId: application_updated
      tags:
        - Applications
      summary: Builds container image
      description: Builds application release or debug container
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
      responses:
        200:
          description: Successful build
          schema:
            type: boolean
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        530:
          $ref: "#/responses/LocalDockerError_530"


  /applications/{application_id}/build:

    get:
      operationId: application_build
      tags:
        - Applications
      summary: Builds container image
      description: Builds application release or debug container
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: Successful build
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        530:
          $ref: "#/responses/LocalDockerError_530"

  /applications/{application_id}/deploy:

    get:
      operationId: application_deploy
      tags:
        - Applications
      summary: Deploys container image
      description: Deploys application release or debug container to target
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: Successful build
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /applications/{application_id}/run:

    get:
      operationId: application_run
      tags:
        - Applications
      summary: Runs container image
      description: Runs application release or debug container on target, if the application is already running, restarts it
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: Returns application container
          schema:
            $ref: "#/definitions/Docker_Container"
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /applications/{application_id}/stop:

    get:
      operationId: application_stop
      tags:
        - Applications
      summary: Stops running container image
      description: Stops application release or debug container currently running on target
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
      responses:
        200:
          description: Application stopped (returned also if not running)
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /applications/{application_id}/container:

    get:
      operationId: application_getcontainer
      tags:
        - Applications
      summary: Get container information
      description: Get informations about container
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
      responses:
        200:
          description: Returns application container
          schema:
            $ref: "#/definitions/Docker_Container"
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"
        539:
          $ref: "#/responses/SSHTunnelError_539"

  /applications/{application_id}/container_logs:

    get:
      operationId: application_getcontainer_logs
      tags:
        - Applications
      summary: Get container log, chunk by chunk
      description: Return one chunk of log (one or more lines), blocking if no data is available
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
        - name: restart
          type: boolean
          in: query
          required: false
          default: false
          description: when true reads the lock back from beginning
      responses:
        200:
          description: Returns application container
          schema:
            type: string
        204:
          description: No content
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        539:
          $ref: "#/responses/SSHTunnelError_539"


  /applications/{application_id}/sdk/run:

    get:
      operationId: application_runsdk
      tags:
        - Applications
      summary: Runs SDK containers
      description: Runs SDK container and return its IP and SSH port
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: build
          in: query
          type: boolean
          required: false
          default: true
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: Container started
          schema:
            type: object
            properties:
              HostIp:
                type: string
                description: The IP address for local container instance
              HostPort:
                type: string
                description: port used for SSH

        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        530:
          $ref: "#/responses/LocalDockerError_530"

  /applications/{application_id}/sdk/update:

    get:
      operationId: application_updatesdk
      tags:
        - Applications
      summary: Update SDK container
      description: Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: SDK updated
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"
  
  /applications/{application_id}/sdk/container:

    get:
      operationId: application_sdk_container
      tags:
        - Applications
      summary: Get SDK container
      description: Get SDK container for check if it is running
      parameters:
        - $ref: "#/parameters/application_id"
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
      responses:
        200:
          description: Returns application container
          schema:
            $ref: "#/definitions/Docker_Container"
        204:
          description: No content
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"

  /applications/{application_id}/syncfolders:

    get:
      operationId: application_syncfolders
      tags:
        - Applications
      summary: synchronizes folders
      description: synchronizes folders between host/SDK container and application container
      parameters:
        - $ref: "#/parameters/application_id"
        - name: sourcefolder
          in: query
          type: string
          required: true
        - name: configuration
          in: query
          type: string
          required: true
          pattern: "(?:debug|release)"
        - name: deviceid
          in: query
          type: string
          required: true
          pattern: "^[-0-9a-zA-Z.]*$"
        - name: destfolder
          in: query
          type: string
          required: true
        - name: source_is_sdk
          in: query
          type: boolean
          required: false
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: Sysroot updated
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"
        520:
          $ref: "#/responses/ImageNotFoundError_520"
        523:
          $ref: "#/responses/ContainerNotRunningError_523"
        525:
          $ref: "#/responses/RemoteDockerError_525"
        529:
          $ref: "#/responses/RemoteCommandError_529"
        530:
          $ref: "#/responses/LocalDockerError_530"
        533:
          $ref: "#/responses/SSHError_533"
        541:
          $ref: "#/responses/SDKContainerNotRunningError_541"
        548:
          $ref: "#/responses/ContainerDoesNotSupportSSH_548"

  /applications/{application_id}/privatekey:

    get:
      operationId: application_getprivatekey
      tags:
        - Applications
      summary: Retrieves the path of the RSA private key
      description: The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
      parameters:
        - $ref: "#/parameters/application_id"
      responses:
        200:
          description: key returned
          schema:
            type: string
        404:
          description: Application not found
        500:
          $ref: "#/responses/InternalServerError_500"

  /applications/{application_id}/reseal:

    get:
      operationId: application_reseal
      tags:
        - Applications
      summary: Cleans id and keys for git repo uploading
      description: This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
      parameters:
        - $ref: "#/parameters/application_id"
      responses:
        200:
          description: key returned
        404:
          description: Application not found

  /setup/pullcontainers:
    get:
      operationId: setup_pullcontainers
      parameters:
        - $ref: "#/parameters/progress_id"
      tags:
        - Setup
      summary: pulls containers from docker repo
      description: installs base and sdk containers for supported platforms
      responses:
        200:
          description: Sysroot updated
        500:
          $ref: "#/responses/InternalServerError_500"
        530:
          $ref: "#/responses/LocalDockerError_530"
        542:
          $ref: "#/responses/PullImageError_542"

  /progress/create:
    get:
      operationId: progress_create
      tags:
        - Progress
      responses:
        200:
          description: returns new empty object
          schema:
            $ref: "#definitions/Progress"
        500:
          $ref: "#/responses/InternalServerError_500"

  /progress/status:
    get:
      operationId: progress_status
      tags:
        - Progress
      parameters:
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: return object with up to date information
          schema:
            $ref: "#definitions/Progress"
        404:
          description: Object not found
        500:
          $ref: "#/responses/InternalServerError_500"


  /progress/delete:
    get:
      operationId: progress_delete
      tags:
        - Progress
      parameters:
        - $ref: "#/parameters/progress_id"
      responses:
        200:
          description: OK
        500:
          $ref: "#/responses/InternalServerError_500"

parameters:

  device_id:
    name: device_id
    description: Target device serial number
    in: path
    type: string
    required: true
    pattern: "^[-0-9a-zA-Z.]*$"

  eula_id:
    name: eula_id
    description: Id of an eula
    in: path
    type: string
    required: true
    pattern: "^[-0-9a-zA-Z.]*$"

  platform_id:
    name: platform_id
    description: Id of a platform formatted as name_version
    in: path
    type: string
    required: true
    pattern: "^[-0-9a-zA-Z.]*_[-0-9a-zA-Z.]*$"

  application_id:
    name: application_id
    description: Id of an application (uuid)
    in: path
    type: string
    required: true
    pattern: "^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$"

  container_id:
    name: container_id
    description: Id of a container
    in: path
    type: string
    required: true
    pattern: "^[0-9,a-f,A-F]{64}$"

  image_id:
    name: image_id
    description: Id of an image
    in: path
    type: string
    required: true
    pattern: "^sha256:[0-9,a-f,A-F]{64}$"

  progress_id:
    name: progress_id
    description: Id of a progress cookie (uuid)
    in: query
    type: string
    required: false
    pattern: "^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$"


definitions:

  TargetDevice:
    type: object
    properties:
      id:
        type: string
        description: Unique serial number
        example: 01234567
        readOnly: true
      name:
        type: string
        description: Device mnemnonic name
        example: Colibri imx7 EVB
      model:
        type: string
        description: Device hardware ID
        example: 0028
        readOnly: true
      hwrev:
        type: string
        description: Device hardware revision
        example: 1.1A
        readOnly: true
      kernelversion:
        type: string
        description: Kernel name
        example: "#1 SMP Fri Aug 24 14:47:37 UTC 2018"
        readOnly: true
      kernelrelease:
        type: string
        description: Kernel release
        example: 4.18.1
        readOnly: true
      distroversion:
        type: string
        description: Torizon version (date)
        example: 20180824141405
        readOnly: true
      hostname:
        type: string
        description: Device host name
        example: verdin-imx8mm-06632494
      username:
        type: string
        description: User account used to connect to device via ssh
        example: torizon
      homefolder:
        type: string
        description: Home folder of ssh user (used to deploy files and apps, can be different from actual home)
        example: /home/torizon
      runningtorizon:
        type: boolean
        description: True for a target device that is a community device, false for default Toradex devices
        example: false

  Eula:
    type: object
    properties: 
      id:
        type: string
        description: Unique name (should be filesystem-compatible)
        example: nxp
        readOnly: true
      title: 
        type: string
        description: eula title
        readOnly: true
      question:
        type: string
        description: message shown to the user to accept/decline license
        readOnly: true
      filepath:
        type: string
        description: full path of the file containing the license text
        readOnly: true
      visualized:
        type: boolean
        description: true if license has been shown at least once to user
        readOnly: false
      accepted:
        type: boolean
        description: true if user accepted the license
        readOnly: false

  Platform:
    type: object
    properties:
      id:
        type: string
        description: Unique name (should be filesystem-compatible)
        example: arm32v7-debian-base_buster
        readOnly: true
      name:
        type: string
        description: Platform mnemnonic name
        example: debian buster-slim arm32v7
        readOnly: true
      standard:
        type: boolean
        description: true if the platform is provided by Toradex and can't be modified
        readOnly: true
      version:
        type: string
        description: Version of the image (not related to distro version)
        example: 1.0
        readOnly: true
      runtimes:
        type: array
        items:
          type: string
        description: runtimes/languages supported by the container
        example: [ python, dotnet ]
      sdkcontainerusername:
        type: string
        description: ssh user supported by the SDK container
      sdkcontainerpassword:
        type: string
        description: password used to ssh inside the SDK container
      dockercomposefile:
        type: object
        additionalProperties:
          type: string
        description: path of docker-compose file to be used to start additional containers needed by the app
      startupscript:
        type: object
        additionalProperties:
          type: string
        description: path of script to be run when application debugging starts
      shutdownscript:
        type: object
        additionalProperties:
          type: string
        description: path of script to be run when application debugging stops
      ports:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
              type: string
        description: ports to be exposed from the container
        example: { 8080/tcp:8080 2222/tcp:null }
      volumes:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
        description: Local folders to be mounted as mount points inside a container
        example: { /tmp:/tmp,rw /home/torizon:/userhome,ro }
      devices:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        description: Additional devices to be shared inside container
        example: [ /dev/gpiochip0 ]
      networks:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        description: Networks used by container (in debug it will always be also on bridge)
      extraparms:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        description: Additional parameter passed to the run call (check docker SDK for python for reference, value is YAML)
        example: { network_mode: host }
      props:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
        description: Custom properties (may be used in dockerfile or by extensions)
      description:
        type: string
        description: Platform human-readable description
        example: Debian Stretch for native applications
        readOnly: true
      tags:
        type: array
        items:
          type: string
        description: strings used to identify specific properties of the platform
        example: [ console, wayland ]
        readOnly: true
      Architecture:
        type: string
        description: architecture as defined by docker
        example: linux/arm
        readOnly: true

  Application:
    type: object
    properties:
      id:
        type: string
        description: Unique id
        readOnly: true
      platformid:
        type: string
        description: id of the platform used to generate this application configuration
        readOnly: true
      folder:
        type: string
        description: folder where application configuration and extra files are stored
        readOnly: true
      props:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
        description: Custom application properties
      dockercomposefile:
        type: object
        additionalProperties:
          type: string
        description: path of docker-compose file to be used to start additional containers needed by the app
      startupscript:
        type: object
        additionalProperties:
          type: string
        description: path of script to be run when application debugging starts
      shutdownscript:
        type: object
        additionalProperties:
          type: string
        description: path of script to be run when application debugging stops
      ports:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
              type: string
        description: ports to be exposed from the container
        example: { 8080/tcp:8080 2222/tcp:null }
      volumes:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: string
        description: Local folders to be mounted "A mount points inside a container
        example: { /tmp:/tmp,rw /home/torizon:/userhome,ro }
      devices:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        description: Additional devices to be shared inside container
        example: [ /dev/gpiochip0 ]
      networks:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        description: Networks used by container (in debug it will always be also on bridge)
      extraparms:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
                type: string
        description: Additional parameter passed to the run call (check docker SDK for python for reference, value is YAML)
        example: { network_mode: host }
      username:
        type: string
        description: user account used to run the application inside the container
      images:
        type: object
        additionalProperties:
          type: string
        description: SHA-ids of the debug and release images
      sdkimages:
        type: object
        additionalProperties:
          type: string
        description: SHA-ids of the debug and release SDK images

  ErrorInfo:
    properties:
      code:
        type: integer
        description: error code
      message:
        type: string
        description: specific error message
      description:
        type: string
        description: generic error description

  Process:
    properties:
      pid:
        type: integer
        description: process id
      ppid:
        type: integer
        description: parent process id
      user:
        type: string
      time:
        type: string
        description: cpu time
      nice:
        type: integer
        description: nice value
      state:
        type: string
        description: process state code
      args:
        type: string
        description: command used to start process

  MemInfo:
    properties:
      total:
        type: number
        description: total memory in kb
      available:
        type: number
        description: available memory in kb
      free:
        type: number
        description: free memory in kb

  MountPoint:
    properties:
      mountpoint:
        type: string
        description: mount point
        example: /sysroot
      filesystem:
        type: string
        description: file system
        example: tmpfs
      size:
        type: integer
        description: total size in 1Kb blocks
      available:
        type: integer
        description: available space in 1kb blocks

  Docker_Image:
    type: "object"
    required:
      - Id
      - Parent
      - Comment
      - Created
      - Container
      - DockerVersion
      - Author
      - Architecture
      - Os
      - Size
      - VirtualSize
      - GraphDriver
      - RootFS
    properties:
      Id:
        type: "string"
        x-nullable: false
      RepoTags:
        type: "array"
        items:
          type: "string"
      RepoDigests:
        type: "array"
        items:
          type: "string"
      Parent:
        type: "string"
        x-nullable: false
      Comment:
        type: "string"
        x-nullable: false
      Created:
        type: "string"
        x-nullable: false
      Container:
        type: "string"
        x-nullable: false
      ContainerConfig:
        $ref: "#/definitions/Docker_ContainerConfig"
      DockerVersion:
        type: "string"
        x-nullable: false
      Author:
        type: "string"
        x-nullable: false
      Config:
        $ref: "#/definitions/Docker_ContainerConfig"
      Architecture:
        type: "string"
        x-nullable: false
      Os:
        type: "string"
        x-nullable: false
      OsVersion:
        type: "string"
      Size:
        type: "integer"
        format: "int64"
        x-nullable: false
      VirtualSize:
        type: "integer"
        format: "int64"
        x-nullable: false
      GraphDriver:
        $ref: "#/definitions/Docker_GraphDriverData"
      RootFS:
        type: "object"
        required: [Type]
        properties:
          Type:
            type: "string"
            x-nullable: false
          Layers:
            type: "array"
            items:
              type: "string"
          BaseLayer:
            type: "string"
      Metadata:
        type: "object"
        properties:
          LastTagTime:
            type: "string"
            format: "dateTime"

  Docker_Container:
    type: "object"
    properties:
      Id:
        description: "The ID of the container"
        type: "string"
      Created:
        description: "The time the container was created"
        type: "string"
      Path:
        description: "The path to the command being run"
        type: "string"
      Args:
        description: "The arguments to the command being run"
        type: "array"
        items:
          type: "string"
      State:
        description: "The state of the container."
        type: "object"
        properties:
          Status:
            description: |
              The status of the container. For example, `"running"` or `"exited"`.
            type: "string"
            enum: ["created", "running", "paused", "restarting", "removing", "exited", "dead"]
          Running:
            description: |
              Whether this container is running.

              Note that a running container can be _paused_. The `Running` and `Paused`
              booleans are not mutually exclusive:

              When pausing a container (on Linux), the cgroups freezer is used to suspend
              all processes in the container. Freezing the process requires the process to
              be running. As a result, paused containers are both `Running` _and_ `Paused`.

              Use the `Status` field instead to determine if a container's state is "running".
            type: "boolean"
          Paused:
            description: "Whether this container is paused."
            type: "boolean"
          Restarting:
            description: "Whether this container is restarting."
            type: "boolean"
          OOMKilled:
            description: "Whether this container has been killed because it ran out of memory."
            type: "boolean"
          Dead:
            type: "boolean"
          Pid:
            description: "The process ID of this container"
            type: "integer"
          ExitCode:
            description: "The last exit code of this container"
            type: "integer"
          Error:
            type: "string"
          StartedAt:
            description: "The time when this container was last started."
            type: "string"
          FinishedAt:
            description: "The time when this container last exited."
            type: "string"
      Image:
        description: "The container's image"
        type: "string"
      ResolvConfPath:
        type: "string"
      HostnamePath:
        type: "string"
      HostsPath:
        type: "string"
      LogPath:
        type: "string"
      Node:
        description: "TODO"
        type: "object"
      Name:
        type: "string"
      RestartCount:
        type: "integer"
      Driver:
        type: "string"
      MountLabel:
        type: "string"
      ProcessLabel:
        type: "string"
      AppArmorProfile:
        type: "string"
      ExecIDs:
        type: "array"
        items:
          type: "string"
      HostConfig:
        $ref: "#/definitions/Docker_HostConfig"
      GraphDriver:
        $ref: "#/definitions/Docker_GraphDriverData"
      SizeRw:
        description: "The size of files that have been created or changed by this container."
        type: "integer"
        format: "int64"
      SizeRootFs:
        description: "The total size of all the files in this container."
        type: "integer"
        format: "int64"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/Docker_MountPoint"
      Config:
        $ref: "#/definitions/Docker_ContainerConfig"
      NetworkSettings:
        $ref: "#/definitions/Docker_NetworkSettings"

  Docker_ContainerConfig:
    description: "Configuration for a container that is portable between hosts"
    type: "object"
    properties:
      Hostname:
        description: "The hostname to use for the container, as a valid RFC 1123 hostname."
        type: "string"
      Domainname:
        description: "The domain name to use for the container."
        type: "string"
      User:
        description: "The user that commands are run as inside the container."
        type: "string"
      AttachStdin:
        description: "Whether to attach to `stdin`."
        type: "boolean"
        default: false
      AttachStdout:
        description: "Whether to attach to `stdout`."
        type: "boolean"
        default: true
      AttachStderr:
        description: "Whether to attach to `stderr`."
        type: "boolean"
        default: true
      ExposedPorts:
        description: |
          An object mapping ports to an empty object in the form:

          `{"<port>/<tcp|udp|sctp>": {}}`
        type: "object"
        additionalProperties:
          type: "object"
          enum:
            - {}
      Tty:
        description: "Attach standard streams to a TTY, including `stdin` if it is not closed."
        type: "boolean"
        default: false
      OpenStdin:
        description: "Open `stdin`"
        type: "boolean"
        default: false
      StdinOnce:
        description: "Close `stdin` after one attached client disconnects"
        type: "boolean"
        default: false
      Env:
        description: |
          A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
        type: "array"
        items:
          type: "string"
      Cmd:
        description: "Command to run specified as a string or an array of strings."
        type: "array"
        items:
          type: "string"
      Healthcheck:
        $ref: "#/definitions/Docker_HealthConfig"
      ArgsEscaped:
        description: "Command is already escaped (Windows only)"
        type: "boolean"
      Image:
        description: "The name of the image to use when creating the container"
        type: "string"
      Volumes:
        description: "An object mapping mount point paths inside the container to empty objects."
        type: "object"
        additionalProperties:
          type: "object"
          enum:
            - {}
      WorkingDir:
        description: "The working directory for commands to run in."
        type: "string"
      Entrypoint:
        description: |
          The entry point for the container as a string or an array of strings.

          If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
        type: "array"
        items:
          type: "string"
      NetworkDisabled:
        description: "Disable networking for the container."
        type: "boolean"
      MacAddress:
        description: "MAC address of the container."
        type: "string"
      OnBuild:
        description: "`ONBUILD` metadata that were defined in the image's `Dockerfile`."
        type: "array"
        items:
          type: "string"
      Labels:
        description: "User-defined key/value metadata."
        type: "object"
        additionalProperties:
          type: "string"
      StopSignal:
        description: "Signal to stop a container as a string or unsigned integer."
        type: "string"
        default: "SIGTERM"
      StopTimeout:
        description: "Timeout to stop a container in seconds."
        type: "integer"
        default: 10
      Shell:
        description: "Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell."
        type: "array"
        items:
          type: "string"

  Docker_GraphDriverData:
    description: "Information about a container's graph driver."
    type: "object"
    required: [Name, Data]
    properties:
      Name:
        type: "string"
        x-nullable: false
      Data:
        type: "object"
        x-nullable: false
        additionalProperties:
          type: "string"

  Docker_HostConfig:
    description: "Container configuration that depends on the host we are running on"
    allOf:
      - $ref: "#/definitions/Docker_Resources"
      - type: "object"
        properties:
          # Applicable to all platforms
          Binds:
            type: "array"
            description: |
              A list of volume bindings for this container. Each volume binding is a string in one of these forms:

              - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
              - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
              - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path.
              - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
            items:
              type: "string"
          ContainerIDFile:
            type: "string"
            description: "Path to a file where the container ID is written"
          LogConfig:
            type: "object"
            description: "The logging configuration for this container"
            properties:
              Type:
                type: "string"
                enum:
                  - "json-file"
                  - "syslog"
                  - "journald"
                  - "gelf"
                  - "fluentd"
                  - "awslogs"
                  - "splunk"
                  - "etwlogs"
                  - "none"
              Config:
                type: "object"
                additionalProperties:
                  type: "string"
          NetworkMode:
            type: "string"
            description: "Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken
              as a custom network's name to which this container should connect to."
          PortBindings:
            $ref: "#/definitions/Docker_PortMap"
          RestartPolicy:
            $ref: "#/definitions/Docker_RestartPolicy"
          AutoRemove:
            type: "boolean"
            description: "Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set."
          VolumeDriver:
            type: "string"
            description: "Driver that this container uses to mount volumes."
          VolumesFrom:
            type: "array"
            description: "A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`."
            items:
              type: "string"
          Mounts:
            description: "Specification for mounts to be added to the container."
            type: "array"
            items:
              $ref: "#/definitions/Docker_Mount"

          # Applicable to UNIX platforms
          CapAdd:
            type: "array"
            description: "A list of kernel capabilities to add to the container."
            items:
              type: "string"
          CapDrop:
            type: "array"
            description: "A list of kernel capabilities to drop from the container."
            items:
              type: "string"
          Dns:
            type: "array"
            description: "A list of DNS servers for the container to use."
            items:
              type: "string"
          DnsOptions:
            type: "array"
            description: "A list of DNS options."
            items:
              type: "string"
          DnsSearch:
            type: "array"
            description: "A list of DNS search domains."
            items:
              type: "string"
          ExtraHosts:
            type: "array"
            description: |
              A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`.
            items:
              type: "string"
          GroupAdd:
            type: "array"
            description: "A list of additional groups that the container process will run as."
            items:
              type: "string"
          IpcMode:
            type: "string"
            description: |
                    IPC sharing mode for the container. Possible values are:

                    - `"none"`: own private IPC namespace, with /dev/shm not mounted
                    - `"private"`: own private IPC namespace
                    - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                    - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                    - `"host"`: use the host system's IPC namespace

                    If not specified, daemon default is used, which can either be `"private"`
                    or `"shareable"`, depending on daemon version and configuration.
          Cgroup:
            type: "string"
            description: "Cgroup to use for the container."
          Links:
            type: "array"
            description: "A list of links for the container in the form `container_name:alias`."
            items:
              type: "string"
          OomScoreAdj:
            type: "integer"
            description: "An integer value containing the score given to the container in order to tune OOM killer preferences."
            example: 500
          PidMode:
            type: "string"
            description: |
              Set the PID (Process) Namespace mode for the container. It can be either:

              - `"container:<name|id>"`: joins another container's PID namespace
              - `"host"`: use the host's PID namespace inside the container
          Privileged:
            type: "boolean"
            description: "Gives the container full access to the host."
          PublishAllPorts:
            type: "boolean"
            description: |
              Allocates an ephemeral host port for all of a container's
              exposed ports.

              Ports are de-allocated when the container stops and allocated when the container starts.
              The allocated port might be changed when restarting the container.

              The port is selected from the ephemeral port range that depends on the kernel.
              For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
          ReadonlyRootfs:
            type: "boolean"
            description: "Mount the container's root filesystem as read only."
          SecurityOpt:
            type: "array"
            description: "A list of string values to customize labels for MLS
            systems, such as SELinux."
            items:
              type: "string"
          StorageOpt:
            type: "object"
            description: |
              Storage driver options for this container, in the form `{"size": "120G"}`.
            additionalProperties:
              type: "string"
          Tmpfs:
            type: "object"
            description: |
              A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`.
            additionalProperties:
              type: "string"
          UTSMode:
            type: "string"
            description: "UTS namespace to use for the container."
          UsernsMode:
            type: "string"
            description: "Sets the usernamespace mode for the container when usernamespace remapping option is enabled."
          ShmSize:
            type: "integer"
            description: "Size of `/dev/shm` in bytes. If omitted, the system uses 64MB."
            minimum: 0
          Sysctls:
            type: "object"
            description: |
              A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}`
            additionalProperties:
              type: "string"
          Runtime:
            type: "string"
            description: "Runtime to use with this container."

  Docker_Resources:
    description: "A container's resources (cgroups config, ulimits, etc)"
    type: "object"
    properties:
      # Applicable to all platforms
      CpuShares:
        description: "An integer value representing this container's relative CPU weight versus other containers."
        type: "integer"
      Memory:
        description: "Memory limit in bytes."
        type: "integer"
        format: "int64"
        default: 0
      # Applicable to UNIX platforms
      CgroupParent:
        description: "Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist."
        type: "string"
      BlkioWeight:
        description: "Block IO weight (relative weight)."
        type: "integer"
        minimum: 0
        maximum: 1000
      BlkioWeightDevice:
        description: |
          Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`.
        type: "array"
        items:
          type: "object"
          properties:
            Path:
              type: "string"
            Weight:
              type: "integer"
              minimum: 0
      BlkioDeviceReadBps:
        description: |
          Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
        type: "array"
        items:
          $ref: "#/definitions/Docker_ThrottleDevice"
      BlkioDeviceWriteBps:
        description: |
          Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
        type: "array"
        items:
          $ref: "#/definitions/Docker_ThrottleDevice"
      BlkioDeviceReadIOps:
        description: |
          Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
        type: "array"
        items:
          $ref: "#/definitions/Docker_ThrottleDevice"
      BlkioDeviceWriteIOps:
        description: |
          Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`.
        type: "array"
        items:
          $ref: "#/definitions/Docker_ThrottleDevice"
      CpuPeriod:
        description: "The length of a CPU period in microseconds."
        type: "integer"
        format: "int64"
      CpuQuota:
        description: "Microseconds of CPU time that the container can get in a CPU period."
        type: "integer"
        format: "int64"
      CpuRealtimePeriod:
        description: "The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks."
        type: "integer"
        format: "int64"
      CpuRealtimeRuntime:
        description: "The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks."
        type: "integer"
        format: "int64"
      CpusetCpus:
        description: "CPUs in which to allow execution (e.g., `0-3`, `0,1`)"
        type: "string"
        example: "0-3"
      CpusetMems:
        description: "Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems."
        type: "string"
      Devices:
        description: "A list of devices to add to the container."
        type: "array"
        items:
          $ref: "#/definitions/Docker_DeviceMapping"
      DeviceCgroupRules:
        description: "a list of cgroup rules to apply to the container"
        type: "array"
        items:
          type: "string"
          example: "c 13:* rwm"
      DiskQuota:
        description: "Disk limit (in bytes)."
        type: "integer"
        format: "int64"
      KernelMemory:
        description: "Kernel memory limit in bytes."
        type: "integer"
        format: "int64"
      MemoryReservation:
        description: "Memory soft limit in bytes."
        type: "integer"
        format: "int64"
      MemorySwap:
        description: "Total memory limit (memory + swap). Set as `-1` to enable unlimited swap."
        type: "integer"
        format: "int64"
      MemorySwappiness:
        description: "Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100."
        type: "integer"
        format: "int64"
        minimum: 0
        maximum: 100
        x-nullable: true
      NanoCPUs:
        description: "CPU quota in units of 10<sup>-9</sup> CPUs."
        type: "integer"
        format: "int64"
      OomKillDisable:
        description: "Disable OOM Killer for the container."
        type: "boolean"
      Init:
        description: "Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used."
        type: "boolean"
        x-nullable: true
      PidsLimit:
        description: "Tune a container's pids limit. Set -1 for unlimited."
        type: "integer"
        format: "int64"
        x-nullable: true
      Ulimits:
        description: |
          A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
        type: "array"
        items:
          type: "object"
          properties:
            Name:
              description: "Name of ulimit"
              type: "string"
            Soft:
              description: "Soft limit"
              type: "integer"
            Hard:
              description: "Hard limit"
              type: "integer"
      # Applicable to Windows
      CpuCount:
        description: |
          The number of usable CPUs (Windows only).

          On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
        type: "integer"
        format: "int64"
      CpuPercent:
        description: |
          The usable percentage of the available CPUs (Windows only).

          On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
        type: "integer"
        format: "int64"
      IOMaximumIOps:
        description: "Maximum IOps for the container system drive (Windows only)"
        type: "integer"
        format: "int64"
      IOMaximumBandwidth:
        description: "Maximum IO in bytes per second for the container system drive (Windows only)"
        type: "integer"
        format: "int64"

  Docker_DeviceMapping:
    type: "object"
    description: "A device mapping between the host and container"
    properties:
      PathOnHost:
        type: "string"
      PathInContainer:
        type: "string"
      CgroupPermissions:
        type: "string"
    example:
      PathOnHost: "/dev/deviceName"
      PathInContainer: "/dev/deviceName"
      CgroupPermissions: "mrw"

  Docker_ThrottleDevice:
    type: "object"
    properties:
      Path:
        description: "Device path"
        type: "string"
      Rate:
        description: "Rate"
        type: "integer"
        format: "int64"
        minimum: 0

  Docker_PortMap:
    description: |
      PortMap describes the mapping of container ports to host ports, using the
      container's port-number and protocol as key in the format `<port>/<protocol>`,
      for example, `80/udp`.

      If a container's port is mapped for multiple protocols, separate entries
      are added to the mapping table.
    type: "object"
    additionalProperties:
      type: "array"
      items:
        $ref: "#/definitions/Docker_PortBinding"
    example:
      "443/tcp":
        - HostIp: "127.0.0.1"
          HostPort: "4443"
      "80/tcp":
        - HostIp: "0.0.0.0"
          HostPort: "80"
        - HostIp: "0.0.0.0"
          HostPort: "8080"
      "80/udp":
        - HostIp: "0.0.0.0"
          HostPort: "80"
      "53/udp":
        - HostIp: "0.0.0.0"
          HostPort: "53"

  Docker_PortBinding:
    description: |
      PortBinding represents a binding between a host IP address and a host
      port.
    type: "object"
    x-nullable: true
    properties:
      HostIp:
        description: "Host IP address that the container's port is mapped to."
        type: "string"
        example: "127.0.0.1"
      HostPort:
        description: "Host port number that the container's port is mapped to."
        type: "string"
        example: "4443"

  Docker_RestartPolicy:
    description: |
      The behavior to apply when the container exits. The default is not to restart.

      An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
    type: "object"
    properties:
      Name:
        type: "string"
        description: |
          - Empty string or `no`means not to restart
          - `always` Always restart
          - `unless-stopped` Restart always except when the user has manually stopped the container
          - `on-failure` Restart only when the container exit code is non-zero
        enum:
          - ""
          - "always"
          - "unless-stopped"
          - "on-failure"
          - "no"
      MaximumRetryCount:
        type: "integer"
        description: "If `on-failure` is used, the number of times to retry before giving up"

  Docker_Mount:
    type: "object"
    properties:
      Target:
        description: "Container path."
        type: "string"
      Source:
        description: "Mount source (e.g. a volume name, a host path)."
        type: "string"
      Type:
        description: |
          The mount type. Available types:

          - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
          - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
          - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
        type: "string"
        enum:
          - "bind"
          - "volume"
          - "tmpfs"
      ReadOnly:
        description: "Whether the mount should be read-only."
        type: "boolean"
      Consistency:
        description: "The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`."
        type: "string"
      BindOptions:
        description: "Optional configuration for the `bind` type."
        type: "object"
        properties:
          Propagation:
            description: "A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`."
            type: "string"
            enum:
              - "private"
              - "rprivate"
              - "shared"
              - "rshared"
              - "slave"
              - "rslave"
      VolumeOptions:
        description: "Optional configuration for the `volume` type."
        type: "object"
        properties:
          NoCopy:
            description: "Populate volume with data from the target."
            type: "boolean"
            default: false
          Labels:
            description: "User-defined key/value metadata."
            type: "object"
            additionalProperties:
              type: "string"
          DriverConfig:
            description: "Map of driver specific options"
            type: "object"
            properties:
              Name:
                description: "Name of the driver to use to create the volume."
                type: "string"
              Options:
                description: "key/value map of driver specific options."
                type: "object"
                additionalProperties:
                  type: "string"
      TmpfsOptions:
        description: "Optional configuration for the `tmpfs` type."
        type: "object"
        properties:
          SizeBytes:
            description: "The size for the tmpfs mount in bytes."
            type: "integer"
            format: "int64"
          Mode:
            description: "The permission mode for the tmpfs mount in an integer."
            type: "integer"

  Docker_HealthConfig:
    description: "A test to perform to check that the container is healthy."
    type: "object"
    properties:
      Test:
        description: |
          The test to perform. Possible values are:

          - `[]` inherit healthcheck from image or parent image
          - `["NONE"]` disable healthcheck
          - `["CMD", args...]` exec arguments directly
          - `["CMD-SHELL", command]` run command with system's default shell
        type: "array"
        items:
          type: "string"
      Interval:
        description: "The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
        type: "integer"
      Timeout:
        description: "The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
        type: "integer"
      Retries:
        description: "The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit."
        type: "integer"
      StartPeriod:
        description: "Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
        type: "integer"

  Docker_NetworkSettings:
    description: "NetworkSettings exposes the network settings in the API"
    type: "object"
    properties:
      Bridge:
        description: Name of the network'a bridge (for example, `docker0`).
        type: "string"
        example: "docker0"
      SandboxID:
        description: SandboxID uniquely represents a container's network stack.
        type: "string"
        example: "9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3"
      HairpinMode:
        description: |
          Indicates if hairpin NAT should be enabled on the virtual interface.
        type: "boolean"
        example: false
      LinkLocalIPv6Address:
        description: IPv6 unicast address using the link-local prefix.
        type: "string"
        example: "fe80::42:acff:fe11:1"
      LinkLocalIPv6PrefixLen:
        description: Prefix length of the IPv6 unicast address.
        type: "integer"
        example: "64"
      Ports:
        $ref: "#/definitions/Docker_PortMap"
      SandboxKey:
        description: SandboxKey identifies the sandbox
        type: "string"
        example: "/var/run/docker/netns/8ab54b426c38"

      # TODO is SecondaryIPAddresses actually used?
      SecondaryIPAddresses:
        description: ""
        type: "array"
        items:
          $ref: "#/definitions/Docker_Address"
        x-nullable: true

      # TODO is SecondaryIPv6Addresses actually used?
      SecondaryIPv6Addresses:
        description: ""
        type: "array"
        items:
          $ref: "#/definitions/Docker_Address"
        x-nullable: true

      # TODO properties below are part of DefaultNetworkSettings, which is
      # marked as deprecated since Docker 1.9 and to be removed in Docker v17.12
      EndpointID:
        description: |
          EndpointID uniquely represents a service endpoint in a Sandbox.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
      Gateway:
        description: |
          Gateway address for the default "bridge" network.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "172.17.0.1"
      GlobalIPv6Address:
        description: |
          Global IPv6 address for the default "bridge" network.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "2001:db8::5689"
      GlobalIPv6PrefixLen:
        description: |
          Mask length of the global IPv6 address.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "integer"
        example: 64
      IPAddress:
        description: |
          IPv4 address for the default "bridge" network.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "172.17.0.4"
      IPPrefixLen:
        description: |
          Mask length of the IPv4 address.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "integer"
        example: 16
      IPv6Gateway:
        description: |
          IPv6 gateway address for this network.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "2001:db8:2::100"
      MacAddress:
        description: |
          MAC address for the container on the default "bridge" network.

          <p><br /></p>

          > **Deprecated**: This field is only propagated when attached to the
          > default "bridge" network. Use the information from the "bridge"
          > network inside the `Networks` map instead, which contains the same
          > information. This field was deprecated in Docker 1.9 and is scheduled
          > to be removed in Docker 17.12.0
        type: "string"
        example: "02:42:ac:11:00:04"
      Networks:
        description: |
          Information about all networks that the container is connected to.
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Docker_EndpointSettings"

  Docker_Address:
    description: Address represents an IPv4 or IPv6 IP address.
    type: "object"
    properties:
      Addr:
        description: IP address.
        type: "string"
      PrefixLen:
        description: Mask length of the IP address.
        type: "integer"

  Docker_EndpointSettings:
    description: "Configuration for a network endpoint."
    type: "object"
    properties:
      # Configurations
      IPAMConfig:
        $ref: "#/definitions/Docker_EndpointIPAMConfig"
      Links:
        type: "array"
        items:
          type: "string"
        example:
          - "container_1"
          - "container_2"
      Aliases:
        type: "array"
        items:
          type: "string"
        example:
          - "server_x"
          - "server_y"

      # Operational data
      NetworkID:
        description: |
          Unique ID of the network.
        type: "string"
        example: "08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a"
      EndpointID:
        description: |
          Unique ID for the service endpoint in a Sandbox.
        type: "string"
        example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
      Gateway:
        description: |
          Gateway address for this network.
        type: "string"
        example: "172.17.0.1"
      IPAddress:
        description: |
          IPv4 address.
        type: "string"
        example: "172.17.0.4"
      IPPrefixLen:
        description: |
          Mask length of the IPv4 address.
        type: "integer"
        example: 16
      IPv6Gateway:
        description: |
          IPv6 gateway address.
        type: "string"
        example: "2001:db8:2::100"
      GlobalIPv6Address:
        description: |
          Global IPv6 address.
        type: "string"
        example: "2001:db8::5689"
      GlobalIPv6PrefixLen:
        description: |
          Mask length of the global IPv6 address.
        type: "integer"
        format: "int64"
        example: 64
      MacAddress:
        description: |
          MAC address for the endpoint on this network.
        type: "string"
        example: "02:42:ac:11:00:04"
      DriverOpts:
        description: |
          DriverOpts is a mapping of driver options and values. These options
          are passed directly to the driver and are driver specific.
        type: "object"
        x-nullable: true
        additionalProperties:
          type: "string"
        example:
          com.example.some-label: "some-value"
          com.example.some-other-label: "some-other-value"

  Docker_EndpointIPAMConfig:
    description: |
      EndpointIPAMConfig represents an endpoint's IPAM configuration.
    type: "object"
    x-nullable: true
    properties:
      IPv4Address:
        type: "string"
        example: "172.20.30.33"
      IPv6Address:
        type: "string"
        example: "2001:db8:abcd::3033"
      LinkLocalIPs:
        type: "array"
        items:
          type: "string"
        example:
          - "169.254.34.68"
          - "fe80::3468"

  Docker_MountPoint:
    type: "object"
    description: "A mount point inside a container"
    properties:
      Type:
        type: "string"
      Name:
        type: "string"
      Source:
        type: "string"
      Destination:
        type: "string"
      Driver:
        type: "string"
      Mode:
        type: "string"
      RW:
        type: "boolean"
      Propagation:
        type: "string"

  Docker_Version:
    type: "object"
    description: "Information about docker version"
    properties:
      Platform:
        type: "object"
        required: [Name]
        properties:
          Name:
            type: "string"
      Components:
        type: "array"
        items:
          type: "object"
          x-go-name: ComponentVersion
          required: [Name, Version]
          properties:
            Name:
              type: "string"
            Version:
              type: "string"
              x-nullable: false
            Details:
              type: "object"
              x-nullable: true
      Version:
        type: "string"
      ApiVersion:
        type: "string"
      MinAPIVersion:
        type: "string"
      GitCommit:
        type: "string"
      GoVersion:
        type: "string"
      Os:
        type: "string"
      Arch:
        type: "string"
      KernelVersion:
        type: "string"
      Experimental:
        type: "boolean"
      BuildTime:
        type: "string"

  Progress:
    type: object
    properties: 
      id:
        type: string
        description: "cookie"
        readOnly: true
      progress:
        type: integer
        description: 0%-100%
        readOnly: true
      messages:
        type: array
        items: 
          type: string
          description: output message
        readOnly: true
      pending:
        type: boolean
        description: true as long as operation is pending
      result:
        $ref: "#/definitions/ErrorInfo"

        readOnly: true

responses:
  InternalServerError_500:
    description: Unexpected exception.
    schema:
      $ref: "#/definitions/ErrorInfo"
  ImageNotFoundError_520:
    description: Container image not found on local host.
    schema:
      $ref: "#/definitions/ErrorInfo"
  IncompatibleDeviceError_521:
    description: Device is not compatible with selected platform.
    schema:
      $ref: "#/definitions/ErrorInfo"
  ConnectionError_522:
    description: Error communicating with device.
    schema:
      $ref: "#/definitions/ErrorInfo"
  ContainerNotRunningError_523:
    description: Container is not running.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SudoError_524:
    description: User is not enable to execute commands as root.
    schema:
      $ref: "#/definitions/ErrorInfo"
  RemoteDockerError_525:
    description: Remote docker exception.
    schema:
      $ref: "#/definitions/ErrorInfo"
  RemoteImageNotFoundError_526:
    description: Image not found on remote device.
    schema:
      $ref: "#/definitions/ErrorInfo"
  PlatformDoesNotRequireSDKError_527:
    description: Image not found on remote device.
    schema:
      $ref: "#/definitions/ErrorInfo"
  PlatformDoesNotExistError_528:
    description: Platform does not exist.
    schema:
      $ref: "#/definitions/ErrorInfo"
  RemoteCommandError_529:
    description: Remote command execution failed.
    schema:
      $ref: "#/definitions/ErrorInfo"
  LocalDockerError_530:
    description: Local docker exception.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidObjectIdError_531:
    description: Object Does not have a valid id.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidObjectStateError_532:
    description: Object cannot be saved because it's in an invalid state.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SSHError_533:
    description: SSH error.
    schema:
      $ref: "#/definitions/ErrorInfo"
  OSError_534:
    description: OS error.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidDeviceIdError_535:
    description: Invalid device id.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SerialError_536:
    description: Serial port error.
    schema:
      $ref: "#/definitions/ErrorInfo"
  TimeoutError_537:
    description: Command timeout.
    schema:
      $ref: "#/definitions/ErrorInfo"
  LoginFailedError_538:
    description: Login failed.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SSHTunnelError_539:
    description: SSH tunnel error.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidPathError_540:
    description: Invalid path.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SDKContainerNotRunningError_541:
    description: SDK container is not running.
    schema:
      $ref: "#/definitions/ErrorInfo"
  PullImageError_542:
    description: Error pulling images from docker registry.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SDKRequiresConfigurationError_543:
    description: Platform requires debug/release configuration for SDK.
    schema:
      $ref: "#/definitions/ErrorInfo"
  LocalCommandError_544:
    description: Local command execution failed.
    schema:
      $ref: "#/definitions/ErrorInfo"
  DNSError_545:
    description: Can't resolve hostname.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidDeviceError_546:
    description: Device information is not valid.
    schema:
      $ref: "#/definitions/ErrorInfo"
  InvalidModelError_547:
    description: Model id not recognized.
    schema:
      $ref: "#/definitions/ErrorInfo"
  SDKContainerNotFoundError_548:
    description: SDK container not found.
    schema:
      $ref: "#/definitions/ErrorInfo"
  ContainerDoesNotSupportSSH_548:
    description: Container does not support SSH
    schema:
      $ref: "#/definitions/ErrorInfo"

