---
# set to true for platforms that are provided by Toradex
standard: true
# descriptive information
name: Wayland arm64v8-vivante bullseye
version: "1.0"
description: Platform for Wayland applications with a minimal set of libraries and components for arm64v8 with vivante graphics on debian-buster
# supported modules (using product id),* means all modules except unsupported ones
supportedmodels:
  [
    "0037",
    "0038",
    "0046",
    "0047",
    "0048",
    "0049",
    "0050",
    "0051",
    "0052",
    "0053",
    "0054",
    "0055",
    "0056",
    "0057",
    "0058",
    "0059",
    "0060",
    "0061",
    "0063",
    "0064",
    "0065",
    "0066",
]

unsupportedmodels: []
# defines base image and dockerfile templates for the containers
architecture: linux/arm64
baseimage:
  common:
    - "torizon/wayland-base-vivante"
    - "2"
  debug:
  release:
# names of dockerfile templates
container:
  common:
  debug: debug.dockerfile
  release: release.dockerfile
# defines what languages/runtimes are supported by this platform
runtimes:
  - c-cpp-nossh
tags:
  - wayland
# information about how containers should run
ports:
  common: {}
  debug: { "6502/tcp": null }
  release: {}
volumes:
  common:
    /tmp: /tmp
    /dev/dri: /dev/dri
    /dev/galcore: /dev/galcore
  debug: {}
  release: {}
devices:
  common: []
  debug: []
  release: []
privileged: false
extraparms:
  common:
    device_cgroup_rules: '[ "c 199:* rmw" , "c 226:* rmw" ]'
  debug: {}
  release: {}
# information about the SDK (if required)
usesdk: true
usessh: false
# base image for the container/template
sdkbaseimage:
  common:
    - "torizon/debian-cross-toolchain-arm64"
    - "2-bullseye"
  debug:
  release:
# template file for SDK container build
sdkcontainer:
  common: sdk.dockerfile
  debug: null
  release: null

# additional platform-specific properties that can be used in projects or plugins
props:
  common:
    linkeroptions: "-Wl,--dynamic-linker=/lib/ld-linux-arm64.so.3"
    prefix: "aarch64-linux-gnu-"
    vscode-arch: "arm64"
    gdb-arch: "aarch64"
    cmake-arch: "aarch64"
    debian-arch: "arm64"
    intellisensemode: "gcc-arm64"
  debug: {}
  release: {}
# additional scripts (docker-compose or shell) that can be used to start/stop
# the container
# If you use docker-compose file the application container should NOT be listed in the services, since it will be started by the debugger
dockercomposefile:
  common: docker-compose.yml
  debug: null
  release: null
startupscript:
  common: null
  debug: null
  release: null
shutdownscript:
  common: null
  debug: null
  release: null
networks:
  common: []
  debug: []
  release: []
eulas: ["nxp-la-opt-v5"]
