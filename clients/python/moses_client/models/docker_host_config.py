# coding: utf-8

"""
    Torizon Deployment API

    Toradex Development API to build and deploy application on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moses_client.configuration import Configuration


class DockerHostConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_shares': 'int',
        'memory': 'int',
        'cgroup_parent': 'str',
        'blkio_weight': 'int',
        'blkio_weight_device': 'list[DockerResourcesBlkioWeightDevice]',
        'blkio_device_read_bps': 'list[DockerThrottleDevice]',
        'blkio_device_write_bps': 'list[DockerThrottleDevice]',
        'blkio_device_read_i_ops': 'list[DockerThrottleDevice]',
        'blkio_device_write_i_ops': 'list[DockerThrottleDevice]',
        'cpu_period': 'int',
        'cpu_quota': 'int',
        'cpu_realtime_period': 'int',
        'cpu_realtime_runtime': 'int',
        'cpuset_cpus': 'str',
        'cpuset_mems': 'str',
        'devices': 'list[DockerDeviceMapping]',
        'device_cgroup_rules': 'list[str]',
        'disk_quota': 'int',
        'kernel_memory': 'int',
        'memory_reservation': 'int',
        'memory_swap': 'int',
        'memory_swappiness': 'int',
        'nano_cp_us': 'int',
        'oom_kill_disable': 'bool',
        'init': 'bool',
        'pids_limit': 'int',
        'ulimits': 'list[DockerResourcesUlimits]',
        'cpu_count': 'int',
        'cpu_percent': 'int',
        'io_maximum_i_ops': 'int',
        'io_maximum_bandwidth': 'int',
        'binds': 'list[str]',
        'container_id_file': 'str',
        'log_config': 'DockerHostConfigAllOfLogConfig',
        'network_mode': 'str',
        'port_bindings': 'dict(str, list[DockerPortBinding])',
        'restart_policy': 'DockerRestartPolicy',
        'auto_remove': 'bool',
        'volume_driver': 'str',
        'volumes_from': 'list[str]',
        'mounts': 'list[DockerMount]',
        'cap_add': 'list[str]',
        'cap_drop': 'list[str]',
        'dns': 'list[str]',
        'dns_options': 'list[str]',
        'dns_search': 'list[str]',
        'extra_hosts': 'list[str]',
        'group_add': 'list[str]',
        'ipc_mode': 'str',
        'cgroup': 'str',
        'links': 'list[str]',
        'oom_score_adj': 'int',
        'pid_mode': 'str',
        'privileged': 'bool',
        'publish_all_ports': 'bool',
        'readonly_rootfs': 'bool',
        'security_opt': 'list[str]',
        'storage_opt': 'dict(str, str)',
        'tmpfs': 'dict(str, str)',
        'uts_mode': 'str',
        'userns_mode': 'str',
        'shm_size': 'int',
        'sysctls': 'dict(str, str)',
        'runtime': 'str'
    }

    attribute_map = {
        'cpu_shares': 'CpuShares',
        'memory': 'Memory',
        'cgroup_parent': 'CgroupParent',
        'blkio_weight': 'BlkioWeight',
        'blkio_weight_device': 'BlkioWeightDevice',
        'blkio_device_read_bps': 'BlkioDeviceReadBps',
        'blkio_device_write_bps': 'BlkioDeviceWriteBps',
        'blkio_device_read_i_ops': 'BlkioDeviceReadIOps',
        'blkio_device_write_i_ops': 'BlkioDeviceWriteIOps',
        'cpu_period': 'CpuPeriod',
        'cpu_quota': 'CpuQuota',
        'cpu_realtime_period': 'CpuRealtimePeriod',
        'cpu_realtime_runtime': 'CpuRealtimeRuntime',
        'cpuset_cpus': 'CpusetCpus',
        'cpuset_mems': 'CpusetMems',
        'devices': 'Devices',
        'device_cgroup_rules': 'DeviceCgroupRules',
        'disk_quota': 'DiskQuota',
        'kernel_memory': 'KernelMemory',
        'memory_reservation': 'MemoryReservation',
        'memory_swap': 'MemorySwap',
        'memory_swappiness': 'MemorySwappiness',
        'nano_cp_us': 'NanoCPUs',
        'oom_kill_disable': 'OomKillDisable',
        'init': 'Init',
        'pids_limit': 'PidsLimit',
        'ulimits': 'Ulimits',
        'cpu_count': 'CpuCount',
        'cpu_percent': 'CpuPercent',
        'io_maximum_i_ops': 'IOMaximumIOps',
        'io_maximum_bandwidth': 'IOMaximumBandwidth',
        'binds': 'Binds',
        'container_id_file': 'ContainerIDFile',
        'log_config': 'LogConfig',
        'network_mode': 'NetworkMode',
        'port_bindings': 'PortBindings',
        'restart_policy': 'RestartPolicy',
        'auto_remove': 'AutoRemove',
        'volume_driver': 'VolumeDriver',
        'volumes_from': 'VolumesFrom',
        'mounts': 'Mounts',
        'cap_add': 'CapAdd',
        'cap_drop': 'CapDrop',
        'dns': 'Dns',
        'dns_options': 'DnsOptions',
        'dns_search': 'DnsSearch',
        'extra_hosts': 'ExtraHosts',
        'group_add': 'GroupAdd',
        'ipc_mode': 'IpcMode',
        'cgroup': 'Cgroup',
        'links': 'Links',
        'oom_score_adj': 'OomScoreAdj',
        'pid_mode': 'PidMode',
        'privileged': 'Privileged',
        'publish_all_ports': 'PublishAllPorts',
        'readonly_rootfs': 'ReadonlyRootfs',
        'security_opt': 'SecurityOpt',
        'storage_opt': 'StorageOpt',
        'tmpfs': 'Tmpfs',
        'uts_mode': 'UTSMode',
        'userns_mode': 'UsernsMode',
        'shm_size': 'ShmSize',
        'sysctls': 'Sysctls',
        'runtime': 'Runtime'
    }

    def __init__(self, cpu_shares=None, memory=0, cgroup_parent=None, blkio_weight=None, blkio_weight_device=None, blkio_device_read_bps=None, blkio_device_write_bps=None, blkio_device_read_i_ops=None, blkio_device_write_i_ops=None, cpu_period=None, cpu_quota=None, cpu_realtime_period=None, cpu_realtime_runtime=None, cpuset_cpus=None, cpuset_mems=None, devices=None, device_cgroup_rules=None, disk_quota=None, kernel_memory=None, memory_reservation=None, memory_swap=None, memory_swappiness=None, nano_cp_us=None, oom_kill_disable=None, init=None, pids_limit=None, ulimits=None, cpu_count=None, cpu_percent=None, io_maximum_i_ops=None, io_maximum_bandwidth=None, binds=None, container_id_file=None, log_config=None, network_mode=None, port_bindings=None, restart_policy=None, auto_remove=None, volume_driver=None, volumes_from=None, mounts=None, cap_add=None, cap_drop=None, dns=None, dns_options=None, dns_search=None, extra_hosts=None, group_add=None, ipc_mode=None, cgroup=None, links=None, oom_score_adj=None, pid_mode=None, privileged=None, publish_all_ports=None, readonly_rootfs=None, security_opt=None, storage_opt=None, tmpfs=None, uts_mode=None, userns_mode=None, shm_size=None, sysctls=None, runtime=None, local_vars_configuration=None):  # noqa: E501
        """DockerHostConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_shares = None
        self._memory = None
        self._cgroup_parent = None
        self._blkio_weight = None
        self._blkio_weight_device = None
        self._blkio_device_read_bps = None
        self._blkio_device_write_bps = None
        self._blkio_device_read_i_ops = None
        self._blkio_device_write_i_ops = None
        self._cpu_period = None
        self._cpu_quota = None
        self._cpu_realtime_period = None
        self._cpu_realtime_runtime = None
        self._cpuset_cpus = None
        self._cpuset_mems = None
        self._devices = None
        self._device_cgroup_rules = None
        self._disk_quota = None
        self._kernel_memory = None
        self._memory_reservation = None
        self._memory_swap = None
        self._memory_swappiness = None
        self._nano_cp_us = None
        self._oom_kill_disable = None
        self._init = None
        self._pids_limit = None
        self._ulimits = None
        self._cpu_count = None
        self._cpu_percent = None
        self._io_maximum_i_ops = None
        self._io_maximum_bandwidth = None
        self._binds = None
        self._container_id_file = None
        self._log_config = None
        self._network_mode = None
        self._port_bindings = None
        self._restart_policy = None
        self._auto_remove = None
        self._volume_driver = None
        self._volumes_from = None
        self._mounts = None
        self._cap_add = None
        self._cap_drop = None
        self._dns = None
        self._dns_options = None
        self._dns_search = None
        self._extra_hosts = None
        self._group_add = None
        self._ipc_mode = None
        self._cgroup = None
        self._links = None
        self._oom_score_adj = None
        self._pid_mode = None
        self._privileged = None
        self._publish_all_ports = None
        self._readonly_rootfs = None
        self._security_opt = None
        self._storage_opt = None
        self._tmpfs = None
        self._uts_mode = None
        self._userns_mode = None
        self._shm_size = None
        self._sysctls = None
        self._runtime = None
        self.discriminator = None

        if cpu_shares is not None:
            self.cpu_shares = cpu_shares
        if memory is not None:
            self.memory = memory
        if cgroup_parent is not None:
            self.cgroup_parent = cgroup_parent
        if blkio_weight is not None:
            self.blkio_weight = blkio_weight
        if blkio_weight_device is not None:
            self.blkio_weight_device = blkio_weight_device
        if blkio_device_read_bps is not None:
            self.blkio_device_read_bps = blkio_device_read_bps
        if blkio_device_write_bps is not None:
            self.blkio_device_write_bps = blkio_device_write_bps
        if blkio_device_read_i_ops is not None:
            self.blkio_device_read_i_ops = blkio_device_read_i_ops
        if blkio_device_write_i_ops is not None:
            self.blkio_device_write_i_ops = blkio_device_write_i_ops
        if cpu_period is not None:
            self.cpu_period = cpu_period
        if cpu_quota is not None:
            self.cpu_quota = cpu_quota
        if cpu_realtime_period is not None:
            self.cpu_realtime_period = cpu_realtime_period
        if cpu_realtime_runtime is not None:
            self.cpu_realtime_runtime = cpu_realtime_runtime
        if cpuset_cpus is not None:
            self.cpuset_cpus = cpuset_cpus
        if cpuset_mems is not None:
            self.cpuset_mems = cpuset_mems
        if devices is not None:
            self.devices = devices
        if device_cgroup_rules is not None:
            self.device_cgroup_rules = device_cgroup_rules
        if disk_quota is not None:
            self.disk_quota = disk_quota
        if kernel_memory is not None:
            self.kernel_memory = kernel_memory
        if memory_reservation is not None:
            self.memory_reservation = memory_reservation
        if memory_swap is not None:
            self.memory_swap = memory_swap
        self.memory_swappiness = memory_swappiness
        if nano_cp_us is not None:
            self.nano_cp_us = nano_cp_us
        if oom_kill_disable is not None:
            self.oom_kill_disable = oom_kill_disable
        self.init = init
        self.pids_limit = pids_limit
        if ulimits is not None:
            self.ulimits = ulimits
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if cpu_percent is not None:
            self.cpu_percent = cpu_percent
        if io_maximum_i_ops is not None:
            self.io_maximum_i_ops = io_maximum_i_ops
        if io_maximum_bandwidth is not None:
            self.io_maximum_bandwidth = io_maximum_bandwidth
        if binds is not None:
            self.binds = binds
        if container_id_file is not None:
            self.container_id_file = container_id_file
        if log_config is not None:
            self.log_config = log_config
        if network_mode is not None:
            self.network_mode = network_mode
        if port_bindings is not None:
            self.port_bindings = port_bindings
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if auto_remove is not None:
            self.auto_remove = auto_remove
        if volume_driver is not None:
            self.volume_driver = volume_driver
        if volumes_from is not None:
            self.volumes_from = volumes_from
        if mounts is not None:
            self.mounts = mounts
        if cap_add is not None:
            self.cap_add = cap_add
        if cap_drop is not None:
            self.cap_drop = cap_drop
        if dns is not None:
            self.dns = dns
        if dns_options is not None:
            self.dns_options = dns_options
        if dns_search is not None:
            self.dns_search = dns_search
        if extra_hosts is not None:
            self.extra_hosts = extra_hosts
        if group_add is not None:
            self.group_add = group_add
        if ipc_mode is not None:
            self.ipc_mode = ipc_mode
        if cgroup is not None:
            self.cgroup = cgroup
        if links is not None:
            self.links = links
        if oom_score_adj is not None:
            self.oom_score_adj = oom_score_adj
        if pid_mode is not None:
            self.pid_mode = pid_mode
        if privileged is not None:
            self.privileged = privileged
        if publish_all_ports is not None:
            self.publish_all_ports = publish_all_ports
        if readonly_rootfs is not None:
            self.readonly_rootfs = readonly_rootfs
        if security_opt is not None:
            self.security_opt = security_opt
        if storage_opt is not None:
            self.storage_opt = storage_opt
        if tmpfs is not None:
            self.tmpfs = tmpfs
        if uts_mode is not None:
            self.uts_mode = uts_mode
        if userns_mode is not None:
            self.userns_mode = userns_mode
        if shm_size is not None:
            self.shm_size = shm_size
        if sysctls is not None:
            self.sysctls = sysctls
        if runtime is not None:
            self.runtime = runtime

    @property
    def cpu_shares(self):
        """Gets the cpu_shares of this DockerHostConfig.  # noqa: E501

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :return: The cpu_shares of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares):
        """Sets the cpu_shares of this DockerHostConfig.

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :param cpu_shares: The cpu_shares of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_shares = cpu_shares

    @property
    def memory(self):
        """Gets the memory of this DockerHostConfig.  # noqa: E501

        Memory limit in bytes.  # noqa: E501

        :return: The memory of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DockerHostConfig.

        Memory limit in bytes.  # noqa: E501

        :param memory: The memory of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def cgroup_parent(self):
        """Gets the cgroup_parent of this DockerHostConfig.  # noqa: E501

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :return: The cgroup_parent of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._cgroup_parent

    @cgroup_parent.setter
    def cgroup_parent(self, cgroup_parent):
        """Sets the cgroup_parent of this DockerHostConfig.

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :param cgroup_parent: The cgroup_parent of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._cgroup_parent = cgroup_parent

    @property
    def blkio_weight(self):
        """Gets the blkio_weight of this DockerHostConfig.  # noqa: E501

        Block IO weight (relative weight).  # noqa: E501

        :return: The blkio_weight of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._blkio_weight

    @blkio_weight.setter
    def blkio_weight(self, blkio_weight):
        """Sets the blkio_weight of this DockerHostConfig.

        Block IO weight (relative weight).  # noqa: E501

        :param blkio_weight: The blkio_weight of this DockerHostConfig.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                blkio_weight is not None and blkio_weight > 1000):  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                blkio_weight is not None and blkio_weight < 0):  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blkio_weight = blkio_weight

    @property
    def blkio_weight_device(self):
        """Gets the blkio_weight_device of this DockerHostConfig.  # noqa: E501

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :return: The blkio_weight_device of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerResourcesBlkioWeightDevice]
        """
        return self._blkio_weight_device

    @blkio_weight_device.setter
    def blkio_weight_device(self, blkio_weight_device):
        """Sets the blkio_weight_device of this DockerHostConfig.

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :param blkio_weight_device: The blkio_weight_device of this DockerHostConfig.  # noqa: E501
        :type: list[DockerResourcesBlkioWeightDevice]
        """

        self._blkio_weight_device = blkio_weight_device

    @property
    def blkio_device_read_bps(self):
        """Gets the blkio_device_read_bps of this DockerHostConfig.  # noqa: E501

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_bps of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerThrottleDevice]
        """
        return self._blkio_device_read_bps

    @blkio_device_read_bps.setter
    def blkio_device_read_bps(self, blkio_device_read_bps):
        """Sets the blkio_device_read_bps of this DockerHostConfig.

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_bps: The blkio_device_read_bps of this DockerHostConfig.  # noqa: E501
        :type: list[DockerThrottleDevice]
        """

        self._blkio_device_read_bps = blkio_device_read_bps

    @property
    def blkio_device_write_bps(self):
        """Gets the blkio_device_write_bps of this DockerHostConfig.  # noqa: E501

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_bps of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerThrottleDevice]
        """
        return self._blkio_device_write_bps

    @blkio_device_write_bps.setter
    def blkio_device_write_bps(self, blkio_device_write_bps):
        """Sets the blkio_device_write_bps of this DockerHostConfig.

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_bps: The blkio_device_write_bps of this DockerHostConfig.  # noqa: E501
        :type: list[DockerThrottleDevice]
        """

        self._blkio_device_write_bps = blkio_device_write_bps

    @property
    def blkio_device_read_i_ops(self):
        """Gets the blkio_device_read_i_ops of this DockerHostConfig.  # noqa: E501

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_i_ops of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerThrottleDevice]
        """
        return self._blkio_device_read_i_ops

    @blkio_device_read_i_ops.setter
    def blkio_device_read_i_ops(self, blkio_device_read_i_ops):
        """Sets the blkio_device_read_i_ops of this DockerHostConfig.

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_i_ops: The blkio_device_read_i_ops of this DockerHostConfig.  # noqa: E501
        :type: list[DockerThrottleDevice]
        """

        self._blkio_device_read_i_ops = blkio_device_read_i_ops

    @property
    def blkio_device_write_i_ops(self):
        """Gets the blkio_device_write_i_ops of this DockerHostConfig.  # noqa: E501

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_i_ops of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerThrottleDevice]
        """
        return self._blkio_device_write_i_ops

    @blkio_device_write_i_ops.setter
    def blkio_device_write_i_ops(self, blkio_device_write_i_ops):
        """Sets the blkio_device_write_i_ops of this DockerHostConfig.

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_i_ops: The blkio_device_write_i_ops of this DockerHostConfig.  # noqa: E501
        :type: list[DockerThrottleDevice]
        """

        self._blkio_device_write_i_ops = blkio_device_write_i_ops

    @property
    def cpu_period(self):
        """Gets the cpu_period of this DockerHostConfig.  # noqa: E501

        The length of a CPU period in microseconds.  # noqa: E501

        :return: The cpu_period of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_period

    @cpu_period.setter
    def cpu_period(self, cpu_period):
        """Sets the cpu_period of this DockerHostConfig.

        The length of a CPU period in microseconds.  # noqa: E501

        :param cpu_period: The cpu_period of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_period = cpu_period

    @property
    def cpu_quota(self):
        """Gets the cpu_quota of this DockerHostConfig.  # noqa: E501

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :return: The cpu_quota of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_quota

    @cpu_quota.setter
    def cpu_quota(self, cpu_quota):
        """Sets the cpu_quota of this DockerHostConfig.

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :param cpu_quota: The cpu_quota of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_quota = cpu_quota

    @property
    def cpu_realtime_period(self):
        """Gets the cpu_realtime_period of this DockerHostConfig.  # noqa: E501

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_period of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_realtime_period

    @cpu_realtime_period.setter
    def cpu_realtime_period(self, cpu_realtime_period):
        """Sets the cpu_realtime_period of this DockerHostConfig.

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_period: The cpu_realtime_period of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_realtime_period = cpu_realtime_period

    @property
    def cpu_realtime_runtime(self):
        """Gets the cpu_realtime_runtime of this DockerHostConfig.  # noqa: E501

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_runtime of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_realtime_runtime

    @cpu_realtime_runtime.setter
    def cpu_realtime_runtime(self, cpu_realtime_runtime):
        """Sets the cpu_realtime_runtime of this DockerHostConfig.

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_runtime: The cpu_realtime_runtime of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_realtime_runtime = cpu_realtime_runtime

    @property
    def cpuset_cpus(self):
        """Gets the cpuset_cpus of this DockerHostConfig.  # noqa: E501

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :return: The cpuset_cpus of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._cpuset_cpus

    @cpuset_cpus.setter
    def cpuset_cpus(self, cpuset_cpus):
        """Sets the cpuset_cpus of this DockerHostConfig.

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :param cpuset_cpus: The cpuset_cpus of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._cpuset_cpus = cpuset_cpus

    @property
    def cpuset_mems(self):
        """Gets the cpuset_mems of this DockerHostConfig.  # noqa: E501

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :return: The cpuset_mems of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._cpuset_mems

    @cpuset_mems.setter
    def cpuset_mems(self, cpuset_mems):
        """Sets the cpuset_mems of this DockerHostConfig.

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :param cpuset_mems: The cpuset_mems of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._cpuset_mems = cpuset_mems

    @property
    def devices(self):
        """Gets the devices of this DockerHostConfig.  # noqa: E501

        A list of devices to add to the container.  # noqa: E501

        :return: The devices of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerDeviceMapping]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this DockerHostConfig.

        A list of devices to add to the container.  # noqa: E501

        :param devices: The devices of this DockerHostConfig.  # noqa: E501
        :type: list[DockerDeviceMapping]
        """

        self._devices = devices

    @property
    def device_cgroup_rules(self):
        """Gets the device_cgroup_rules of this DockerHostConfig.  # noqa: E501

        a list of cgroup rules to apply to the container  # noqa: E501

        :return: The device_cgroup_rules of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_cgroup_rules

    @device_cgroup_rules.setter
    def device_cgroup_rules(self, device_cgroup_rules):
        """Sets the device_cgroup_rules of this DockerHostConfig.

        a list of cgroup rules to apply to the container  # noqa: E501

        :param device_cgroup_rules: The device_cgroup_rules of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._device_cgroup_rules = device_cgroup_rules

    @property
    def disk_quota(self):
        """Gets the disk_quota of this DockerHostConfig.  # noqa: E501

        Disk limit (in bytes).  # noqa: E501

        :return: The disk_quota of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._disk_quota

    @disk_quota.setter
    def disk_quota(self, disk_quota):
        """Sets the disk_quota of this DockerHostConfig.

        Disk limit (in bytes).  # noqa: E501

        :param disk_quota: The disk_quota of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._disk_quota = disk_quota

    @property
    def kernel_memory(self):
        """Gets the kernel_memory of this DockerHostConfig.  # noqa: E501

        Kernel memory limit in bytes.  # noqa: E501

        :return: The kernel_memory of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._kernel_memory

    @kernel_memory.setter
    def kernel_memory(self, kernel_memory):
        """Sets the kernel_memory of this DockerHostConfig.

        Kernel memory limit in bytes.  # noqa: E501

        :param kernel_memory: The kernel_memory of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._kernel_memory = kernel_memory

    @property
    def memory_reservation(self):
        """Gets the memory_reservation of this DockerHostConfig.  # noqa: E501

        Memory soft limit in bytes.  # noqa: E501

        :return: The memory_reservation of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation):
        """Sets the memory_reservation of this DockerHostConfig.

        Memory soft limit in bytes.  # noqa: E501

        :param memory_reservation: The memory_reservation of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._memory_reservation = memory_reservation

    @property
    def memory_swap(self):
        """Gets the memory_swap of this DockerHostConfig.  # noqa: E501

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :return: The memory_swap of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory_swap

    @memory_swap.setter
    def memory_swap(self, memory_swap):
        """Sets the memory_swap of this DockerHostConfig.

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :param memory_swap: The memory_swap of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._memory_swap = memory_swap

    @property
    def memory_swappiness(self):
        """Gets the memory_swappiness of this DockerHostConfig.  # noqa: E501

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :return: The memory_swappiness of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._memory_swappiness

    @memory_swappiness.setter
    def memory_swappiness(self, memory_swappiness):
        """Sets the memory_swappiness of this DockerHostConfig.

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :param memory_swappiness: The memory_swappiness of this DockerHostConfig.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                memory_swappiness is not None and memory_swappiness > 100):  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                memory_swappiness is not None and memory_swappiness < 0):  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._memory_swappiness = memory_swappiness

    @property
    def nano_cp_us(self):
        """Gets the nano_cp_us of this DockerHostConfig.  # noqa: E501

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :return: The nano_cp_us of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._nano_cp_us

    @nano_cp_us.setter
    def nano_cp_us(self, nano_cp_us):
        """Sets the nano_cp_us of this DockerHostConfig.

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :param nano_cp_us: The nano_cp_us of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._nano_cp_us = nano_cp_us

    @property
    def oom_kill_disable(self):
        """Gets the oom_kill_disable of this DockerHostConfig.  # noqa: E501

        Disable OOM Killer for the container.  # noqa: E501

        :return: The oom_kill_disable of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._oom_kill_disable

    @oom_kill_disable.setter
    def oom_kill_disable(self, oom_kill_disable):
        """Sets the oom_kill_disable of this DockerHostConfig.

        Disable OOM Killer for the container.  # noqa: E501

        :param oom_kill_disable: The oom_kill_disable of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._oom_kill_disable = oom_kill_disable

    @property
    def init(self):
        """Gets the init of this DockerHostConfig.  # noqa: E501

        Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  # noqa: E501

        :return: The init of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this DockerHostConfig.

        Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  # noqa: E501

        :param init: The init of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._init = init

    @property
    def pids_limit(self):
        """Gets the pids_limit of this DockerHostConfig.  # noqa: E501

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :return: The pids_limit of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._pids_limit

    @pids_limit.setter
    def pids_limit(self, pids_limit):
        """Sets the pids_limit of this DockerHostConfig.

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :param pids_limit: The pids_limit of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._pids_limit = pids_limit

    @property
    def ulimits(self):
        """Gets the ulimits of this DockerHostConfig.  # noqa: E501

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :return: The ulimits of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerResourcesUlimits]
        """
        return self._ulimits

    @ulimits.setter
    def ulimits(self, ulimits):
        """Sets the ulimits of this DockerHostConfig.

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :param ulimits: The ulimits of this DockerHostConfig.  # noqa: E501
        :type: list[DockerResourcesUlimits]
        """

        self._ulimits = ulimits

    @property
    def cpu_count(self):
        """Gets the cpu_count of this DockerHostConfig.  # noqa: E501

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_count of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this DockerHostConfig.

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_count: The cpu_count of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def cpu_percent(self):
        """Gets the cpu_percent of this DockerHostConfig.  # noqa: E501

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_percent of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._cpu_percent

    @cpu_percent.setter
    def cpu_percent(self, cpu_percent):
        """Sets the cpu_percent of this DockerHostConfig.

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_percent: The cpu_percent of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._cpu_percent = cpu_percent

    @property
    def io_maximum_i_ops(self):
        """Gets the io_maximum_i_ops of this DockerHostConfig.  # noqa: E501

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_i_ops of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._io_maximum_i_ops

    @io_maximum_i_ops.setter
    def io_maximum_i_ops(self, io_maximum_i_ops):
        """Sets the io_maximum_i_ops of this DockerHostConfig.

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_i_ops: The io_maximum_i_ops of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._io_maximum_i_ops = io_maximum_i_ops

    @property
    def io_maximum_bandwidth(self):
        """Gets the io_maximum_bandwidth of this DockerHostConfig.  # noqa: E501

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_bandwidth of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._io_maximum_bandwidth

    @io_maximum_bandwidth.setter
    def io_maximum_bandwidth(self, io_maximum_bandwidth):
        """Sets the io_maximum_bandwidth of this DockerHostConfig.

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_bandwidth: The io_maximum_bandwidth of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._io_maximum_bandwidth = io_maximum_bandwidth

    @property
    def binds(self):
        """Gets the binds of this DockerHostConfig.  # noqa: E501

        A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.   # noqa: E501

        :return: The binds of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._binds

    @binds.setter
    def binds(self, binds):
        """Sets the binds of this DockerHostConfig.

        A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.   # noqa: E501

        :param binds: The binds of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._binds = binds

    @property
    def container_id_file(self):
        """Gets the container_id_file of this DockerHostConfig.  # noqa: E501

        Path to a file where the container ID is written  # noqa: E501

        :return: The container_id_file of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._container_id_file

    @container_id_file.setter
    def container_id_file(self, container_id_file):
        """Sets the container_id_file of this DockerHostConfig.

        Path to a file where the container ID is written  # noqa: E501

        :param container_id_file: The container_id_file of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._container_id_file = container_id_file

    @property
    def log_config(self):
        """Gets the log_config of this DockerHostConfig.  # noqa: E501


        :return: The log_config of this DockerHostConfig.  # noqa: E501
        :rtype: DockerHostConfigAllOfLogConfig
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config):
        """Sets the log_config of this DockerHostConfig.


        :param log_config: The log_config of this DockerHostConfig.  # noqa: E501
        :type: DockerHostConfigAllOfLogConfig
        """

        self._log_config = log_config

    @property
    def network_mode(self):
        """Gets the network_mode of this DockerHostConfig.  # noqa: E501

        Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.  # noqa: E501

        :return: The network_mode of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode):
        """Sets the network_mode of this DockerHostConfig.

        Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.  # noqa: E501

        :param network_mode: The network_mode of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._network_mode = network_mode

    @property
    def port_bindings(self):
        """Gets the port_bindings of this DockerHostConfig.  # noqa: E501

        PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.   # noqa: E501

        :return: The port_bindings of this DockerHostConfig.  # noqa: E501
        :rtype: dict(str, list[DockerPortBinding])
        """
        return self._port_bindings

    @port_bindings.setter
    def port_bindings(self, port_bindings):
        """Sets the port_bindings of this DockerHostConfig.

        PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.   # noqa: E501

        :param port_bindings: The port_bindings of this DockerHostConfig.  # noqa: E501
        :type: dict(str, list[DockerPortBinding])
        """

        self._port_bindings = port_bindings

    @property
    def restart_policy(self):
        """Gets the restart_policy of this DockerHostConfig.  # noqa: E501


        :return: The restart_policy of this DockerHostConfig.  # noqa: E501
        :rtype: DockerRestartPolicy
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy):
        """Sets the restart_policy of this DockerHostConfig.


        :param restart_policy: The restart_policy of this DockerHostConfig.  # noqa: E501
        :type: DockerRestartPolicy
        """

        self._restart_policy = restart_policy

    @property
    def auto_remove(self):
        """Gets the auto_remove of this DockerHostConfig.  # noqa: E501

        Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.  # noqa: E501

        :return: The auto_remove of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._auto_remove

    @auto_remove.setter
    def auto_remove(self, auto_remove):
        """Sets the auto_remove of this DockerHostConfig.

        Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.  # noqa: E501

        :param auto_remove: The auto_remove of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._auto_remove = auto_remove

    @property
    def volume_driver(self):
        """Gets the volume_driver of this DockerHostConfig.  # noqa: E501

        Driver that this container uses to mount volumes.  # noqa: E501

        :return: The volume_driver of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._volume_driver

    @volume_driver.setter
    def volume_driver(self, volume_driver):
        """Sets the volume_driver of this DockerHostConfig.

        Driver that this container uses to mount volumes.  # noqa: E501

        :param volume_driver: The volume_driver of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._volume_driver = volume_driver

    @property
    def volumes_from(self):
        """Gets the volumes_from of this DockerHostConfig.  # noqa: E501

        A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.  # noqa: E501

        :return: The volumes_from of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._volumes_from

    @volumes_from.setter
    def volumes_from(self, volumes_from):
        """Sets the volumes_from of this DockerHostConfig.

        A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.  # noqa: E501

        :param volumes_from: The volumes_from of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._volumes_from = volumes_from

    @property
    def mounts(self):
        """Gets the mounts of this DockerHostConfig.  # noqa: E501

        Specification for mounts to be added to the container.  # noqa: E501

        :return: The mounts of this DockerHostConfig.  # noqa: E501
        :rtype: list[DockerMount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this DockerHostConfig.

        Specification for mounts to be added to the container.  # noqa: E501

        :param mounts: The mounts of this DockerHostConfig.  # noqa: E501
        :type: list[DockerMount]
        """

        self._mounts = mounts

    @property
    def cap_add(self):
        """Gets the cap_add of this DockerHostConfig.  # noqa: E501

        A list of kernel capabilities to add to the container.  # noqa: E501

        :return: The cap_add of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add):
        """Sets the cap_add of this DockerHostConfig.

        A list of kernel capabilities to add to the container.  # noqa: E501

        :param cap_add: The cap_add of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cap_drop(self):
        """Gets the cap_drop of this DockerHostConfig.  # noqa: E501

        A list of kernel capabilities to drop from the container.  # noqa: E501

        :return: The cap_drop of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_drop

    @cap_drop.setter
    def cap_drop(self, cap_drop):
        """Sets the cap_drop of this DockerHostConfig.

        A list of kernel capabilities to drop from the container.  # noqa: E501

        :param cap_drop: The cap_drop of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._cap_drop = cap_drop

    @property
    def dns(self):
        """Gets the dns of this DockerHostConfig.  # noqa: E501

        A list of DNS servers for the container to use.  # noqa: E501

        :return: The dns of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this DockerHostConfig.

        A list of DNS servers for the container to use.  # noqa: E501

        :param dns: The dns of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns = dns

    @property
    def dns_options(self):
        """Gets the dns_options of this DockerHostConfig.  # noqa: E501

        A list of DNS options.  # noqa: E501

        :return: The dns_options of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_options

    @dns_options.setter
    def dns_options(self, dns_options):
        """Sets the dns_options of this DockerHostConfig.

        A list of DNS options.  # noqa: E501

        :param dns_options: The dns_options of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns_options = dns_options

    @property
    def dns_search(self):
        """Gets the dns_search of this DockerHostConfig.  # noqa: E501

        A list of DNS search domains.  # noqa: E501

        :return: The dns_search of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_search

    @dns_search.setter
    def dns_search(self, dns_search):
        """Sets the dns_search of this DockerHostConfig.

        A list of DNS search domains.  # noqa: E501

        :param dns_search: The dns_search of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns_search = dns_search

    @property
    def extra_hosts(self):
        """Gets the extra_hosts of this DockerHostConfig.  # noqa: E501

        A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.   # noqa: E501

        :return: The extra_hosts of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_hosts

    @extra_hosts.setter
    def extra_hosts(self, extra_hosts):
        """Sets the extra_hosts of this DockerHostConfig.

        A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.   # noqa: E501

        :param extra_hosts: The extra_hosts of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._extra_hosts = extra_hosts

    @property
    def group_add(self):
        """Gets the group_add of this DockerHostConfig.  # noqa: E501

        A list of additional groups that the container process will run as.  # noqa: E501

        :return: The group_add of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_add

    @group_add.setter
    def group_add(self, group_add):
        """Sets the group_add of this DockerHostConfig.

        A list of additional groups that the container process will run as.  # noqa: E501

        :param group_add: The group_add of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._group_add = group_add

    @property
    def ipc_mode(self):
        """Gets the ipc_mode of this DockerHostConfig.  # noqa: E501

        IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.   # noqa: E501

        :return: The ipc_mode of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipc_mode

    @ipc_mode.setter
    def ipc_mode(self, ipc_mode):
        """Sets the ipc_mode of this DockerHostConfig.

        IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.   # noqa: E501

        :param ipc_mode: The ipc_mode of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._ipc_mode = ipc_mode

    @property
    def cgroup(self):
        """Gets the cgroup of this DockerHostConfig.  # noqa: E501

        Cgroup to use for the container.  # noqa: E501

        :return: The cgroup of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._cgroup

    @cgroup.setter
    def cgroup(self, cgroup):
        """Sets the cgroup of this DockerHostConfig.

        Cgroup to use for the container.  # noqa: E501

        :param cgroup: The cgroup of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._cgroup = cgroup

    @property
    def links(self):
        """Gets the links of this DockerHostConfig.  # noqa: E501

        A list of links for the container in the form `container_name:alias`.  # noqa: E501

        :return: The links of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DockerHostConfig.

        A list of links for the container in the form `container_name:alias`.  # noqa: E501

        :param links: The links of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._links = links

    @property
    def oom_score_adj(self):
        """Gets the oom_score_adj of this DockerHostConfig.  # noqa: E501

        An integer value containing the score given to the container in order to tune OOM killer preferences.  # noqa: E501

        :return: The oom_score_adj of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._oom_score_adj

    @oom_score_adj.setter
    def oom_score_adj(self, oom_score_adj):
        """Sets the oom_score_adj of this DockerHostConfig.

        An integer value containing the score given to the container in order to tune OOM killer preferences.  # noqa: E501

        :param oom_score_adj: The oom_score_adj of this DockerHostConfig.  # noqa: E501
        :type: int
        """

        self._oom_score_adj = oom_score_adj

    @property
    def pid_mode(self):
        """Gets the pid_mode of this DockerHostConfig.  # noqa: E501

        Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container   # noqa: E501

        :return: The pid_mode of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._pid_mode

    @pid_mode.setter
    def pid_mode(self, pid_mode):
        """Sets the pid_mode of this DockerHostConfig.

        Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container   # noqa: E501

        :param pid_mode: The pid_mode of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._pid_mode = pid_mode

    @property
    def privileged(self):
        """Gets the privileged of this DockerHostConfig.  # noqa: E501

        Gives the container full access to the host.  # noqa: E501

        :return: The privileged of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged):
        """Sets the privileged of this DockerHostConfig.

        Gives the container full access to the host.  # noqa: E501

        :param privileged: The privileged of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._privileged = privileged

    @property
    def publish_all_ports(self):
        """Gets the publish_all_ports of this DockerHostConfig.  # noqa: E501

        Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.   # noqa: E501

        :return: The publish_all_ports of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._publish_all_ports

    @publish_all_ports.setter
    def publish_all_ports(self, publish_all_ports):
        """Sets the publish_all_ports of this DockerHostConfig.

        Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.   # noqa: E501

        :param publish_all_ports: The publish_all_ports of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._publish_all_ports = publish_all_ports

    @property
    def readonly_rootfs(self):
        """Gets the readonly_rootfs of this DockerHostConfig.  # noqa: E501

        Mount the container's root filesystem as read only.  # noqa: E501

        :return: The readonly_rootfs of this DockerHostConfig.  # noqa: E501
        :rtype: bool
        """
        return self._readonly_rootfs

    @readonly_rootfs.setter
    def readonly_rootfs(self, readonly_rootfs):
        """Sets the readonly_rootfs of this DockerHostConfig.

        Mount the container's root filesystem as read only.  # noqa: E501

        :param readonly_rootfs: The readonly_rootfs of this DockerHostConfig.  # noqa: E501
        :type: bool
        """

        self._readonly_rootfs = readonly_rootfs

    @property
    def security_opt(self):
        """Gets the security_opt of this DockerHostConfig.  # noqa: E501

        A list of string values to customize labels for MLS systems, such as SELinux.  # noqa: E501

        :return: The security_opt of this DockerHostConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_opt

    @security_opt.setter
    def security_opt(self, security_opt):
        """Sets the security_opt of this DockerHostConfig.

        A list of string values to customize labels for MLS systems, such as SELinux.  # noqa: E501

        :param security_opt: The security_opt of this DockerHostConfig.  # noqa: E501
        :type: list[str]
        """

        self._security_opt = security_opt

    @property
    def storage_opt(self):
        """Gets the storage_opt of this DockerHostConfig.  # noqa: E501

        Storage driver options for this container, in the form `{\"size\": \"120G\"}`.   # noqa: E501

        :return: The storage_opt of this DockerHostConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._storage_opt

    @storage_opt.setter
    def storage_opt(self, storage_opt):
        """Sets the storage_opt of this DockerHostConfig.

        Storage driver options for this container, in the form `{\"size\": \"120G\"}`.   # noqa: E501

        :param storage_opt: The storage_opt of this DockerHostConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._storage_opt = storage_opt

    @property
    def tmpfs(self):
        """Gets the tmpfs of this DockerHostConfig.  # noqa: E501

        A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.   # noqa: E501

        :return: The tmpfs of this DockerHostConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tmpfs

    @tmpfs.setter
    def tmpfs(self, tmpfs):
        """Sets the tmpfs of this DockerHostConfig.

        A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.   # noqa: E501

        :param tmpfs: The tmpfs of this DockerHostConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._tmpfs = tmpfs

    @property
    def uts_mode(self):
        """Gets the uts_mode of this DockerHostConfig.  # noqa: E501

        UTS namespace to use for the container.  # noqa: E501

        :return: The uts_mode of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._uts_mode

    @uts_mode.setter
    def uts_mode(self, uts_mode):
        """Sets the uts_mode of this DockerHostConfig.

        UTS namespace to use for the container.  # noqa: E501

        :param uts_mode: The uts_mode of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._uts_mode = uts_mode

    @property
    def userns_mode(self):
        """Gets the userns_mode of this DockerHostConfig.  # noqa: E501

        Sets the usernamespace mode for the container when usernamespace remapping option is enabled.  # noqa: E501

        :return: The userns_mode of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._userns_mode

    @userns_mode.setter
    def userns_mode(self, userns_mode):
        """Sets the userns_mode of this DockerHostConfig.

        Sets the usernamespace mode for the container when usernamespace remapping option is enabled.  # noqa: E501

        :param userns_mode: The userns_mode of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._userns_mode = userns_mode

    @property
    def shm_size(self):
        """Gets the shm_size of this DockerHostConfig.  # noqa: E501

        Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.  # noqa: E501

        :return: The shm_size of this DockerHostConfig.  # noqa: E501
        :rtype: int
        """
        return self._shm_size

    @shm_size.setter
    def shm_size(self, shm_size):
        """Sets the shm_size of this DockerHostConfig.

        Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.  # noqa: E501

        :param shm_size: The shm_size of this DockerHostConfig.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                shm_size is not None and shm_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `shm_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shm_size = shm_size

    @property
    def sysctls(self):
        """Gets the sysctls of this DockerHostConfig.  # noqa: E501

        A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`   # noqa: E501

        :return: The sysctls of this DockerHostConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._sysctls

    @sysctls.setter
    def sysctls(self, sysctls):
        """Sets the sysctls of this DockerHostConfig.

        A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`   # noqa: E501

        :param sysctls: The sysctls of this DockerHostConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._sysctls = sysctls

    @property
    def runtime(self):
        """Gets the runtime of this DockerHostConfig.  # noqa: E501

        Runtime to use with this container.  # noqa: E501

        :return: The runtime of this DockerHostConfig.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this DockerHostConfig.

        Runtime to use with this container.  # noqa: E501

        :param runtime: The runtime of this DockerHostConfig.  # noqa: E501
        :type: str
        """

        self._runtime = runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerHostConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerHostConfig):
            return True

        return self.to_dict() != other.to_dict()
