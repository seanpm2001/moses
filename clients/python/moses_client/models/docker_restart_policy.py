# coding: utf-8

"""
    Torizon IDE-backend API

    Toradex API to build and deploy applications running as containers on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moses_client.configuration import Configuration


class DockerRestartPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'maximum_retry_count': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'maximum_retry_count': 'MaximumRetryCount'
    }

    def __init__(self, name=None, maximum_retry_count=None, local_vars_configuration=None):  # noqa: E501
        """DockerRestartPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._maximum_retry_count = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if maximum_retry_count is not None:
            self.maximum_retry_count = maximum_retry_count

    @property
    def name(self):
        """Gets the name of this DockerRestartPolicy.  # noqa: E501

        - Empty string or `no`means not to restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero   # noqa: E501

        :return: The name of this DockerRestartPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerRestartPolicy.

        - Empty string or `no`means not to restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero   # noqa: E501

        :param name: The name of this DockerRestartPolicy.  # noqa: E501
        :type name: str
        """
        allowed_values = ["", "always", "unless-stopped", "on-failure", "no"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def maximum_retry_count(self):
        """Gets the maximum_retry_count of this DockerRestartPolicy.  # noqa: E501

        If `on-failure` is used, the number of times to retry before giving up  # noqa: E501

        :return: The maximum_retry_count of this DockerRestartPolicy.  # noqa: E501
        :rtype: int
        """
        return self._maximum_retry_count

    @maximum_retry_count.setter
    def maximum_retry_count(self, maximum_retry_count):
        """Sets the maximum_retry_count of this DockerRestartPolicy.

        If `on-failure` is used, the number of times to retry before giving up  # noqa: E501

        :param maximum_retry_count: The maximum_retry_count of this DockerRestartPolicy.  # noqa: E501
        :type maximum_retry_count: int
        """

        self._maximum_retry_count = maximum_retry_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerRestartPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerRestartPolicy):
            return True

        return self.to_dict() != other.to_dict()
