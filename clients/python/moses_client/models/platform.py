# coding: utf-8

"""
    Torizon Deployment API

    Toradex Development API to build and deploy application on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moses_client.configuration import Configuration


class Platform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'standard': 'bool',
        'version': 'str',
        'runtimes': 'list[str]',
        'sdkcontainerusername': 'str',
        'sdkcontainerpassword': 'str',
        'dockercomposefile': 'dict(str, str)',
        'startupscript': 'dict(str, str)',
        'shutdownscript': 'dict(str, str)',
        'ports': 'dict(str, dict(str, str))',
        'volumes': 'dict(str, dict(str, str))',
        'devices': 'dict(str, list[str])',
        'networks': 'dict(str, list[str])',
        'extraparms': 'dict(str, dict(str, object))',
        'props': 'dict(str, dict(str, str))'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'standard': 'standard',
        'version': 'version',
        'runtimes': 'runtimes',
        'sdkcontainerusername': 'sdkcontainerusername',
        'sdkcontainerpassword': 'sdkcontainerpassword',
        'dockercomposefile': 'dockercomposefile',
        'startupscript': 'startupscript',
        'shutdownscript': 'shutdownscript',
        'ports': 'ports',
        'volumes': 'volumes',
        'devices': 'devices',
        'networks': 'networks',
        'extraparms': 'extraparms',
        'props': 'props'
    }

    def __init__(self, id=None, name=None, standard=None, version=None, runtimes=None, sdkcontainerusername=None, sdkcontainerpassword=None, dockercomposefile=None, startupscript=None, shutdownscript=None, ports=None, volumes=None, devices=None, networks=None, extraparms=None, props=None, local_vars_configuration=None):  # noqa: E501
        """Platform - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._standard = None
        self._version = None
        self._runtimes = None
        self._sdkcontainerusername = None
        self._sdkcontainerpassword = None
        self._dockercomposefile = None
        self._startupscript = None
        self._shutdownscript = None
        self._ports = None
        self._volumes = None
        self._devices = None
        self._networks = None
        self._extraparms = None
        self._props = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if standard is not None:
            self.standard = standard
        if version is not None:
            self.version = version
        if runtimes is not None:
            self.runtimes = runtimes
        if sdkcontainerusername is not None:
            self.sdkcontainerusername = sdkcontainerusername
        if sdkcontainerpassword is not None:
            self.sdkcontainerpassword = sdkcontainerpassword
        if dockercomposefile is not None:
            self.dockercomposefile = dockercomposefile
        if startupscript is not None:
            self.startupscript = startupscript
        if shutdownscript is not None:
            self.shutdownscript = shutdownscript
        if ports is not None:
            self.ports = ports
        if volumes is not None:
            self.volumes = volumes
        if devices is not None:
            self.devices = devices
        if networks is not None:
            self.networks = networks
        if extraparms is not None:
            self.extraparms = extraparms
        if props is not None:
            self.props = props

    @property
    def id(self):
        """Gets the id of this Platform.  # noqa: E501

        Unique name (including version)  # noqa: E501

        :return: The id of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Platform.

        Unique name (including version)  # noqa: E501

        :param id: The id of this Platform.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Platform.  # noqa: E501

        Platform mnemnonic name  # noqa: E501

        :return: The name of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Platform.

        Platform mnemnonic name  # noqa: E501

        :param name: The name of this Platform.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def standard(self):
        """Gets the standard of this Platform.  # noqa: E501

        true if the platform is provided by Toradex and can't be modified  # noqa: E501

        :return: The standard of this Platform.  # noqa: E501
        :rtype: bool
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this Platform.

        true if the platform is provided by Toradex and can't be modified  # noqa: E501

        :param standard: The standard of this Platform.  # noqa: E501
        :type: bool
        """

        self._standard = standard

    @property
    def version(self):
        """Gets the version of this Platform.  # noqa: E501

        Version of the image (not related to distro version)  # noqa: E501

        :return: The version of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Platform.

        Version of the image (not related to distro version)  # noqa: E501

        :param version: The version of this Platform.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def runtimes(self):
        """Gets the runtimes of this Platform.  # noqa: E501


        :return: The runtimes of this Platform.  # noqa: E501
        :rtype: list[str]
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this Platform.


        :param runtimes: The runtimes of this Platform.  # noqa: E501
        :type: list[str]
        """

        self._runtimes = runtimes

    @property
    def sdkcontainerusername(self):
        """Gets the sdkcontainerusername of this Platform.  # noqa: E501


        :return: The sdkcontainerusername of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._sdkcontainerusername

    @sdkcontainerusername.setter
    def sdkcontainerusername(self, sdkcontainerusername):
        """Sets the sdkcontainerusername of this Platform.


        :param sdkcontainerusername: The sdkcontainerusername of this Platform.  # noqa: E501
        :type: str
        """

        self._sdkcontainerusername = sdkcontainerusername

    @property
    def sdkcontainerpassword(self):
        """Gets the sdkcontainerpassword of this Platform.  # noqa: E501


        :return: The sdkcontainerpassword of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._sdkcontainerpassword

    @sdkcontainerpassword.setter
    def sdkcontainerpassword(self, sdkcontainerpassword):
        """Sets the sdkcontainerpassword of this Platform.


        :param sdkcontainerpassword: The sdkcontainerpassword of this Platform.  # noqa: E501
        :type: str
        """

        self._sdkcontainerpassword = sdkcontainerpassword

    @property
    def dockercomposefile(self):
        """Gets the dockercomposefile of this Platform.  # noqa: E501


        :return: The dockercomposefile of this Platform.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dockercomposefile

    @dockercomposefile.setter
    def dockercomposefile(self, dockercomposefile):
        """Sets the dockercomposefile of this Platform.


        :param dockercomposefile: The dockercomposefile of this Platform.  # noqa: E501
        :type: dict(str, str)
        """

        self._dockercomposefile = dockercomposefile

    @property
    def startupscript(self):
        """Gets the startupscript of this Platform.  # noqa: E501


        :return: The startupscript of this Platform.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._startupscript

    @startupscript.setter
    def startupscript(self, startupscript):
        """Sets the startupscript of this Platform.


        :param startupscript: The startupscript of this Platform.  # noqa: E501
        :type: dict(str, str)
        """

        self._startupscript = startupscript

    @property
    def shutdownscript(self):
        """Gets the shutdownscript of this Platform.  # noqa: E501


        :return: The shutdownscript of this Platform.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._shutdownscript

    @shutdownscript.setter
    def shutdownscript(self, shutdownscript):
        """Sets the shutdownscript of this Platform.


        :param shutdownscript: The shutdownscript of this Platform.  # noqa: E501
        :type: dict(str, str)
        """

        self._shutdownscript = shutdownscript

    @property
    def ports(self):
        """Gets the ports of this Platform.  # noqa: E501


        :return: The ports of this Platform.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Platform.


        :param ports: The ports of this Platform.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._ports = ports

    @property
    def volumes(self):
        """Gets the volumes of this Platform.  # noqa: E501


        :return: The volumes of this Platform.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Platform.


        :param volumes: The volumes of this Platform.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._volumes = volumes

    @property
    def devices(self):
        """Gets the devices of this Platform.  # noqa: E501


        :return: The devices of this Platform.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Platform.


        :param devices: The devices of this Platform.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._devices = devices

    @property
    def networks(self):
        """Gets the networks of this Platform.  # noqa: E501


        :return: The networks of this Platform.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Platform.


        :param networks: The networks of this Platform.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._networks = networks

    @property
    def extraparms(self):
        """Gets the extraparms of this Platform.  # noqa: E501


        :return: The extraparms of this Platform.  # noqa: E501
        :rtype: dict(str, dict(str, object))
        """
        return self._extraparms

    @extraparms.setter
    def extraparms(self, extraparms):
        """Sets the extraparms of this Platform.


        :param extraparms: The extraparms of this Platform.  # noqa: E501
        :type: dict(str, dict(str, object))
        """

        self._extraparms = extraparms

    @property
    def props(self):
        """Gets the props of this Platform.  # noqa: E501


        :return: The props of this Platform.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this Platform.


        :param props: The props of this Platform.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._props = props

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Platform):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Platform):
            return True

        return self.to_dict() != other.to_dict()
