# coding: utf-8

"""
    Torizon IDE-backend API

    Toradex API to build and deploy applications running as containers on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moses_client.configuration import Configuration


class DockerDeviceMapping(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path_on_host': 'str',
        'path_in_container': 'str',
        'cgroup_permissions': 'str'
    }

    attribute_map = {
        'path_on_host': 'PathOnHost',
        'path_in_container': 'PathInContainer',
        'cgroup_permissions': 'CgroupPermissions'
    }

    def __init__(self, path_on_host=None, path_in_container=None, cgroup_permissions=None, local_vars_configuration=None):  # noqa: E501
        """DockerDeviceMapping - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path_on_host = None
        self._path_in_container = None
        self._cgroup_permissions = None
        self.discriminator = None

        if path_on_host is not None:
            self.path_on_host = path_on_host
        if path_in_container is not None:
            self.path_in_container = path_in_container
        if cgroup_permissions is not None:
            self.cgroup_permissions = cgroup_permissions

    @property
    def path_on_host(self):
        """Gets the path_on_host of this DockerDeviceMapping.  # noqa: E501


        :return: The path_on_host of this DockerDeviceMapping.  # noqa: E501
        :rtype: str
        """
        return self._path_on_host

    @path_on_host.setter
    def path_on_host(self, path_on_host):
        """Sets the path_on_host of this DockerDeviceMapping.


        :param path_on_host: The path_on_host of this DockerDeviceMapping.  # noqa: E501
        :type path_on_host: str
        """

        self._path_on_host = path_on_host

    @property
    def path_in_container(self):
        """Gets the path_in_container of this DockerDeviceMapping.  # noqa: E501


        :return: The path_in_container of this DockerDeviceMapping.  # noqa: E501
        :rtype: str
        """
        return self._path_in_container

    @path_in_container.setter
    def path_in_container(self, path_in_container):
        """Sets the path_in_container of this DockerDeviceMapping.


        :param path_in_container: The path_in_container of this DockerDeviceMapping.  # noqa: E501
        :type path_in_container: str
        """

        self._path_in_container = path_in_container

    @property
    def cgroup_permissions(self):
        """Gets the cgroup_permissions of this DockerDeviceMapping.  # noqa: E501


        :return: The cgroup_permissions of this DockerDeviceMapping.  # noqa: E501
        :rtype: str
        """
        return self._cgroup_permissions

    @cgroup_permissions.setter
    def cgroup_permissions(self, cgroup_permissions):
        """Sets the cgroup_permissions of this DockerDeviceMapping.


        :param cgroup_permissions: The cgroup_permissions of this DockerDeviceMapping.  # noqa: E501
        :type cgroup_permissions: str
        """

        self._cgroup_permissions = cgroup_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerDeviceMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerDeviceMapping):
            return True

        return self.to_dict() != other.to_dict()
