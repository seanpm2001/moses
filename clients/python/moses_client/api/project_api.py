# coding: utf-8

"""
    Torizon IDE-backend API

    Toradex API to build and deploy applications running as containers on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.0.8
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from moses_client.api_client import ApiClient
from moses_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ProjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def project_build(self, project_path, clean_build, generate_installer_image, generate_ota_update, **kwargs):  # noqa: E501
        """Builds a project using torizoncore-builder  # noqa: E501

        This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.project_build(project_path, clean_build, generate_installer_image, generate_ota_update, async_req=True)
        >>> result = thread.get()

        :param project_path: (required)
        :type project_path: str
        :param clean_build: (required)
        :type clean_build: bool
        :param generate_installer_image: (required)
        :type generate_installer_image: bool
        :param generate_ota_update: (required)
        :type generate_ota_update: bool
        :param output_dir:
        :type output_dir: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Application
        """
        kwargs['_return_http_data_only'] = True
        return self.project_build_with_http_info(project_path, clean_build, generate_installer_image, generate_ota_update, **kwargs)  # noqa: E501

    def project_build_with_http_info(self, project_path, clean_build, generate_installer_image, generate_ota_update, **kwargs):  # noqa: E501
        """Builds a project using torizoncore-builder  # noqa: E501

        This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.project_build_with_http_info(project_path, clean_build, generate_installer_image, generate_ota_update, async_req=True)
        >>> result = thread.get()

        :param project_path: (required)
        :type project_path: str
        :param clean_build: (required)
        :type clean_build: bool
        :param generate_installer_image: (required)
        :type generate_installer_image: bool
        :param generate_ota_update: (required)
        :type generate_ota_update: bool
        :param output_dir:
        :type output_dir: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Application, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project_path',
            'clean_build',
            'generate_installer_image',
            'generate_ota_update',
            'output_dir'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_path' is set
        if self.api_client.client_side_validation and ('project_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_path` when calling `project_build`")  # noqa: E501
        # verify the required parameter 'clean_build' is set
        if self.api_client.client_side_validation and ('clean_build' not in local_var_params or  # noqa: E501
                                                        local_var_params['clean_build'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `clean_build` when calling `project_build`")  # noqa: E501
        # verify the required parameter 'generate_installer_image' is set
        if self.api_client.client_side_validation and ('generate_installer_image' not in local_var_params or  # noqa: E501
                                                        local_var_params['generate_installer_image'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `generate_installer_image` when calling `project_build`")  # noqa: E501
        # verify the required parameter 'generate_ota_update' is set
        if self.api_client.client_side_validation and ('generate_ota_update' not in local_var_params or  # noqa: E501
                                                        local_var_params['generate_ota_update'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `generate_ota_update` when calling `project_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_path' in local_var_params and local_var_params['project_path'] is not None:  # noqa: E501
            query_params.append(('project_path', local_var_params['project_path']))  # noqa: E501
        if 'clean_build' in local_var_params and local_var_params['clean_build'] is not None:  # noqa: E501
            query_params.append(('clean_build', local_var_params['clean_build']))  # noqa: E501
        if 'generate_installer_image' in local_var_params and local_var_params['generate_installer_image'] is not None:  # noqa: E501
            query_params.append(('generate_installer_image', local_var_params['generate_installer_image']))  # noqa: E501
        if 'generate_ota_update' in local_var_params and local_var_params['generate_ota_update'] is not None:  # noqa: E501
            query_params.append(('generate_ota_update', local_var_params['generate_ota_update']))  # noqa: E501
        if 'output_dir' in local_var_params and local_var_params['output_dir'] is not None:  # noqa: E501
            query_params.append(('output_dir', local_var_params['output_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/build', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
