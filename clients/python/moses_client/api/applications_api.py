"""
    Torizon IDE-backend API

    Toradex API to build and deploy applications running as containers on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.1.6
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from moses_client.api_client import ApiClient, Endpoint as _Endpoint
from moses_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from moses_client.model.application import Application
from moses_client.model.docker_container import DockerContainer
from moses_client.model.error_info import ErrorInfo
from moses_client.model.inline_response200 import InlineResponse200
from moses_client.model.validation_result import ValidationResult


class ApplicationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.application_build_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/build',
                'operation_id': 'application_build',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_deploy_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/deploy',
                'operation_id': 'application_deploy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_get_endpoint = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_getcontainer_endpoint = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/container',
                'operation_id': 'application_getcontainer',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_getcontainer_logs_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/container_logs',
                'operation_id': 'application_getcontainer_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'restart',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'restart':
                        (bool,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'restart': 'restart',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'restart': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_getdocker_commandline_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/docker_commandline',
                'operation_id': 'application_getdocker_commandline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_getdocker_composefile_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/docker_composefile',
                'operation_id': 'application_getdocker_composefile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_getprivatekey_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/privatekey',
                'operation_id': 'application_getprivatekey',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_modify_endpoint = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_modify',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'application',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'application':
                        (Application,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'application': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.application_publish_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/publish',
                'operation_id': 'application_publish',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'credentials',
                    'dockeruser',
                    'dockerpass',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'credentials',
                    'dockeruser',
                    'dockerpass',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'credentials':
                        (str,),
                    'dockeruser':
                        (str,),
                    'dockerpass':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'credentials': 'credentials',
                    'dockeruser': 'dockeruser',
                    'dockerpass': 'dockerpass',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'credentials': 'query',
                    'dockeruser': 'query',
                    'dockerpass': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_push_to_registry_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/push_to_registry',
                'operation_id': 'application_push_to_registry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'username',
                    'password',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'username',
                    'password',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'username': 'username',
                    'password': 'password',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'username': 'query',
                    'password': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_reseal_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/reseal',
                'operation_id': 'application_reseal',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_run_endpoint = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/run',
                'operation_id': 'application_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_runsdk_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/run',
                'operation_id': 'application_runsdk',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'build',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'build':
                        (bool,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'build': 'build',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'build': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_sdk_container_endpoint = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/container',
                'operation_id': 'application_sdk_container',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_stop_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/stop',
                'operation_id': 'application_stop',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_syncfolders_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/syncfolders',
                'operation_id': 'application_syncfolders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'sourcefolder',
                    'configuration',
                    'device_id',
                    'destfolder',
                    'source_is_sdk',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'sourcefolder',
                    'configuration',
                    'device_id',
                    'destfolder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'sourcefolder':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'destfolder':
                        (str,),
                    'source_is_sdk':
                        (bool,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'sourcefolder': 'sourcefolder',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'destfolder': 'destfolder',
                    'source_is_sdk': 'source_is_sdk',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'sourcefolder': 'query',
                    'configuration': 'query',
                    'device_id': 'query',
                    'destfolder': 'query',
                    'source_is_sdk': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_build_yaml_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_build_yaml',
                'operation_id': 'application_tcb_build_yaml',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'yamlfilepath',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'yamlfilepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'yamlfilepath':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'yamlfilepath': 'yamlfilepath',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'yamlfilepath': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_deploy_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_deploy',
                'operation_id': 'application_tcb_deploy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'host',
                    'username',
                    'password',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'host',
                    'username',
                    'password',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'host':
                        (str,),
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'host': 'host',
                    'username': 'username',
                    'password': 'password',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'host': 'query',
                    'username': 'query',
                    'password': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_dt_checkout_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_dt_checkout',
                'operation_id': 'application_tcb_dt_checkout',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_isolate_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_isolate',
                'operation_id': 'application_tcb_isolate',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'host',
                    'username',
                    'password',
                    'output_dir',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'host',
                    'username',
                    'password',
                    'output_dir',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'host':
                        (str,),
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'output_dir':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'host': 'host',
                    'username': 'username',
                    'password': 'password',
                    'output_dir': 'output_dir',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'host': 'query',
                    'username': 'query',
                    'password': 'query',
                    'output_dir': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_push_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_push',
                'operation_id': 'application_tcb_push',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'branch',
                    'credentials',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'branch',
                    'credentials',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'branch':
                        (str,),
                    'credentials':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'branch': 'branch',
                    'credentials': 'credentials',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'branch': 'query',
                    'credentials': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_union_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_union',
                'operation_id': 'application_tcb_union',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'branch',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'branch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'branch':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'branch': 'branch',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'branch': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_tcb_unpack_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/tcb_unpack',
                'operation_id': 'application_tcb_unpack',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'outputpath',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'outputpath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'outputpath':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'outputpath': 'outputpath',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'outputpath': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_updated_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/updated',
                'operation_id': 'application_updated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_updatesdk_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/update',
                'operation_id': 'application_updatesdk',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_validate_array_item_endpoint = _Endpoint(
            settings={
                'response_type': (ValidationResult,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/validate_array_item',
                'operation_id': 'application_validate_array_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'value',
                    'index',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'value',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release|common)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'parameter':
                        (str,),
                    'value':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'parameter': 'parameter',
                    'value': 'value',
                    'index': 'index',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'parameter': 'query',
                    'value': 'query',
                    'index': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_validate_dictionary_entry_endpoint = _Endpoint(
            settings={
                'response_type': (ValidationResult,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/validate_dictionary_entry',
                'operation_id': 'application_validate_dictionary_entry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'key',
                    'value',
                    'is_key',
                    'newitem',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'key',
                    'value',
                    'is_key',
                    'newitem',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release|common)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'parameter':
                        (str,),
                    'key':
                        (str,),
                    'value':
                        (str,),
                    'is_key':
                        (bool,),
                    'newitem':
                        (bool,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'parameter': 'parameter',
                    'key': 'key',
                    'value': 'value',
                    'is_key': 'isKey',
                    'newitem': 'newitem',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'parameter': 'query',
                    'key': 'query',
                    'value': 'query',
                    'is_key': 'query',
                    'newitem': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.application_validate_parameter_endpoint = _Endpoint(
            settings={
                'response_type': (ValidationResult,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/validate_parameter',
                'operation_id': 'application_validate_parameter',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'value',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'parameter',
                    'value',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release|common)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'parameter':
                        (str,),
                    'value':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'parameter': 'parameter',
                    'value': 'value',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'parameter': 'query',
                    'value': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.applications_create_endpoint = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/create',
                'operation_id': 'applications_create',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_id',
                    'path',
                    'username',
                ],
                'required': [
                    'platform_id',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_id':
                        (str,),
                    'path':
                        (str,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'platform_id': 'platform_id',
                    'path': 'path',
                    'username': 'username',
                },
                'location_map': {
                    'platform_id': 'query',
                    'path': 'query',
                    'username': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.applications_load_endpoint = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/load',
                'operation_id': 'applications_load',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                ],
                'required': [
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                },
                'location_map': {
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def application_build(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Build container image  # noqa: E501

        Build application release or debug container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_build(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_build_endpoint.call_with_http_info(**kwargs)

    def application_delete(
        self,
        application_id,
        **kwargs
    ):
        """Remove an application  # noqa: E501

        Remove an application and all the associated data and containers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_delete(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_delete_endpoint.call_with_http_info(**kwargs)

    def application_deploy(
        self,
        application_id,
        configuration,
        device_id,
        **kwargs
    ):
        """Deploy container image  # noqa: E501

        Deploy application container to target  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_deploy(application_id, configuration, device_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            device_id (str): Target device serial number

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        return self.application_deploy_endpoint.call_with_http_info(**kwargs)

    def application_get(
        self,
        application_id,
        **kwargs
    ):
        """Get application  # noqa: E501

        Returns a specified application, knowing its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_get(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Application
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_get_endpoint.call_with_http_info(**kwargs)

    def application_getcontainer(
        self,
        application_id,
        configuration,
        device_id,
        **kwargs
    ):
        """Get container information  # noqa: E501

        Get detailed informations about container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_getcontainer(application_id, configuration, device_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            device_id (str): Target device serial number

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DockerContainer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        return self.application_getcontainer_endpoint.call_with_http_info(**kwargs)

    def application_getcontainer_logs(
        self,
        application_id,
        configuration,
        device_id,
        **kwargs
    ):
        """Get one of more lines from container logs  # noqa: E501

        Return one chunk of log (one or more lines), blocking if no data is available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_getcontainer_logs(application_id, configuration, device_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            device_id (str): Target device serial number

        Keyword Args:
            restart (bool): when true reads the lock back from beginning. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        return self.application_getcontainer_logs_endpoint.call_with_http_info(**kwargs)

    def application_getdocker_commandline(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Get docker command line to run the application/json  # noqa: E501

        Return the full docker command line that can be used to run the application container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_getdocker_commandline(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_getdocker_commandline_endpoint.call_with_http_info(**kwargs)

    def application_getdocker_composefile(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Get docker compose file  # noqa: E501

        Return docker-compose file that can be used to run the application container and its dependencies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_getdocker_composefile(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_getdocker_composefile_endpoint.call_with_http_info(**kwargs)

    def application_getprivatekey(
        self,
        application_id,
        **kwargs
    ):
        """Get the path of the RSA private key  # noqa: E501

        Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_getprivatekey(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_getprivatekey_endpoint.call_with_http_info(**kwargs)

    def application_modify(
        self,
        application_id,
        **kwargs
    ):
        """Change application properties  # noqa: E501

        Changes specified properties on an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_modify(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            application (Application): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Application
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_modify_endpoint.call_with_http_info(**kwargs)

    def application_publish(
        self,
        application_id,
        credentials,
        dockeruser,
        dockerpass,
        **kwargs
    ):
        """Publish a new version of the application on Torizon OTA  # noqa: E501

        Publishes a new package version for the application, if no credentials are provided, then only docker-compose file is generated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_publish(application_id, credentials, dockeruser, dockerpass, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            credentials (str): credentials file
            dockeruser (str): user for docker registry login
            dockerpass (str): password for docker registry login

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['credentials'] = \
            credentials
        kwargs['dockeruser'] = \
            dockeruser
        kwargs['dockerpass'] = \
            dockerpass
        return self.application_publish_endpoint.call_with_http_info(**kwargs)

    def application_push_to_registry(
        self,
        application_id,
        configuration,
        username,
        password,
        **kwargs
    ):
        """Push application to docker registry  # noqa: E501

        Push application's container to a docker registry, using authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_push_to_registry(application_id, configuration, username, password, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            username (str):
            password (str):

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['username'] = \
            username
        kwargs['password'] = \
            password
        return self.application_push_to_registry_endpoint.call_with_http_info(**kwargs)

    def application_reseal(
        self,
        application_id,
        **kwargs
    ):
        """Clean id and keys from application configuration  # noqa: E501

        This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_reseal(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_reseal_endpoint.call_with_http_info(**kwargs)

    def application_run(
        self,
        application_id,
        configuration,
        device_id,
        **kwargs
    ):
        """Run container image  # noqa: E501

        Run the application release or debug container on target, if the application is already running, restarts it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_run(application_id, configuration, device_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            device_id (str): Target device serial number

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DockerContainer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        return self.application_run_endpoint.call_with_http_info(**kwargs)

    def application_runsdk(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Run SDK containers  # noqa: E501

        Run SDK container and return its IP and SSH port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_runsdk(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            build (bool): [optional] if omitted the server will use the default value of True
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse200
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_runsdk_endpoint.call_with_http_info(**kwargs)

    def application_sdk_container(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Get SDK container  # noqa: E501

        Get SDK container information (can be used to check if it's running)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_sdk_container(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DockerContainer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_sdk_container_endpoint.call_with_http_info(**kwargs)

    def application_stop(
        self,
        application_id,
        configuration,
        device_id,
        **kwargs
    ):
        """Stop running container image  # noqa: E501

        Stop application release or debug container currently running on target, operation succeeds even if the container is not running  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_stop(application_id, configuration, device_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            device_id (str): Target device serial number

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        return self.application_stop_endpoint.call_with_http_info(**kwargs)

    def application_syncfolders(
        self,
        application_id,
        sourcefolder,
        configuration,
        device_id,
        destfolder,
        **kwargs
    ):
        """Synchronize folders  # noqa: E501

        Synchronizes folders between host/SDK container and the application container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_syncfolders(application_id, sourcefolder, configuration, device_id, destfolder, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            sourcefolder (str):
            configuration (str):
            device_id (str): Target device serial number
            destfolder (str):

        Keyword Args:
            source_is_sdk (bool): [optional]
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['sourcefolder'] = \
            sourcefolder
        kwargs['configuration'] = \
            configuration
        kwargs['device_id'] = \
            device_id
        kwargs['destfolder'] = \
            destfolder
        return self.application_syncfolders_endpoint.call_with_http_info(**kwargs)

    def application_tcb_build_yaml(
        self,
        application_id,
        yamlfilepath,
        **kwargs
    ):
        """Build the TorizonCore tcbuild.yaml  # noqa: E501

        Build the TorizonCore tcbuild.yaml using TorizonCore Builder Docker image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_build_yaml(application_id, yamlfilepath, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            yamlfilepath (str): the yaml file name from workspace path

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['yamlfilepath'] = \
            yamlfilepath
        return self.application_tcb_build_yaml_endpoint.call_with_http_info(**kwargs)

    def application_tcb_deploy(
        self,
        application_id,
        host,
        username,
        password,
        **kwargs
    ):
        """TorizonCore unpack command  # noqa: E501

        Unpack the output using TorizonCore Builder Docker image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_deploy(application_id, host, username, password, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            host (str): the hostname or ip address of the device to be deployed
            username (str): the Torizon username of the device to be deployed
            password (str): the Torizon password of the device to be deployed

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['host'] = \
            host
        kwargs['username'] = \
            username
        kwargs['password'] = \
            password
        return self.application_tcb_deploy_endpoint.call_with_http_info(**kwargs)

    def application_tcb_dt_checkout(
        self,
        application_id,
        **kwargs
    ):
        """TorizonCore Device Tree repo checkout  # noqa: E501

        Checkout the device tree and overlays repository at https://github.com/toradex/device-trees  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_dt_checkout(application_id, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        return self.application_tcb_dt_checkout_endpoint.call_with_http_info(**kwargs)

    def application_tcb_isolate(
        self,
        application_id,
        host,
        username,
        password,
        output_dir,
        **kwargs
    ):
        """TorizonCore isolate command  # noqa: E501

        Get configuration changes from the target board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_isolate(application_id, host, username, password, output_dir, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            host (str): the hostname or ip address of the device to be deployed
            username (str): the Torizon username of the device to be deployed
            password (str): the Torizon password of the device to be deployed
            output_dir (str): the direcotry path that the changes will be save

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['host'] = \
            host
        kwargs['username'] = \
            username
        kwargs['password'] = \
            password
        kwargs['output_dir'] = \
            output_dir
        return self.application_tcb_isolate_endpoint.call_with_http_info(**kwargs)

    def application_tcb_push(
        self,
        application_id,
        branch,
        credentials,
        **kwargs
    ):
        """TorizonCore Builder push command.  # noqa: E501

        The command push from TorizonCore Builder can be used to push a new TorizonCore image to Torizon OTA.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_push(application_id, branch, credentials, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            branch (str): union branch string
            credentials (str): credentials file path

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['branch'] = \
            branch
        kwargs['credentials'] = \
            credentials
        return self.application_tcb_push_endpoint.call_with_http_info(**kwargs)

    def application_tcb_union(
        self,
        application_id,
        branch,
        **kwargs
    ):
        """TorizonCore Builder union command.  # noqa: E501

        union makes an OSTree branch (containing the commit for changes) for all changes provided by the user to be made in OSTree rootfs of unpacked base Torizon image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_union(application_id, branch, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            branch (str): union branch string

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['branch'] = \
            branch
        return self.application_tcb_union_endpoint.call_with_http_info(**kwargs)

    def application_tcb_unpack(
        self,
        application_id,
        outputpath,
        **kwargs
    ):
        """TorizonCore unpack command  # noqa: E501

        Unpack the output using TorizonCore Builder Docker image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_tcb_unpack(application_id, outputpath, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            outputpath (str): the output directory created by TorizonCore builder from workspace path

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['outputpath'] = \
            outputpath
        return self.application_tcb_unpack_endpoint.call_with_http_info(**kwargs)

    def application_updated(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Check if container image is up to date  # noqa: E501

        Check if some properties have been changed after the last build of the configuration-specific container image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_updated(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_updated_endpoint.call_with_http_info(**kwargs)

    def application_updatesdk(
        self,
        application_id,
        configuration,
        **kwargs
    ):
        """Update SDK container  # noqa: E501

        Update the SDK container by adding new dev libraries or synchronizing sysroots  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_updatesdk(application_id, configuration, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):

        Keyword Args:
            progress_id (str): Id of a progress cookie (uuid). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        return self.application_updatesdk_endpoint.call_with_http_info(**kwargs)

    def application_validate_array_item(
        self,
        application_id,
        configuration,
        parameter,
        value,
        index,
        **kwargs
    ):
        """Validates a value for a parameter  # noqa: E501

        Validates a parameter, allowing UI to report problems before applying it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_validate_array_item(application_id, configuration, parameter, value, index, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            parameter (str):
            value (str):
            index (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ValidationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['parameter'] = \
            parameter
        kwargs['value'] = \
            value
        kwargs['index'] = \
            index
        return self.application_validate_array_item_endpoint.call_with_http_info(**kwargs)

    def application_validate_dictionary_entry(
        self,
        application_id,
        configuration,
        parameter,
        key,
        value,
        is_key,
        newitem,
        **kwargs
    ):
        """Validates a value for a parameter  # noqa: E501

        Validates a parameter, allowing UI to report problems before applying it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_validate_dictionary_entry(application_id, configuration, parameter, key, value, is_key, newitem, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            parameter (str):
            key (str):
            value (str):
            is_key (bool):
            newitem (bool):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ValidationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['parameter'] = \
            parameter
        kwargs['key'] = \
            key
        kwargs['value'] = \
            value
        kwargs['is_key'] = \
            is_key
        kwargs['newitem'] = \
            newitem
        return self.application_validate_dictionary_entry_endpoint.call_with_http_info(**kwargs)

    def application_validate_parameter(
        self,
        application_id,
        configuration,
        parameter,
        value,
        **kwargs
    ):
        """Validates a value for a parameter  # noqa: E501

        Validates a parameter, allowing UI to report problems before applying it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_validate_parameter(application_id, configuration, parameter, value, async_req=True)
        >>> result = thread.get()

        Args:
            application_id (str): Id of an application (uuid)
            configuration (str):
            parameter (str):
            value (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ValidationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application_id'] = \
            application_id
        kwargs['configuration'] = \
            configuration
        kwargs['parameter'] = \
            parameter
        kwargs['value'] = \
            value
        return self.application_validate_parameter_endpoint.call_with_http_info(**kwargs)

    def applications_create(
        self,
        platform_id,
        path,
        **kwargs
    ):
        """Create an application configuration  # noqa: E501

        Create a new application configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.applications_create(platform_id, path, async_req=True)
        >>> result = thread.get()

        Args:
            platform_id (str):
            path (str):

        Keyword Args:
            username (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Application
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['platform_id'] = \
            platform_id
        kwargs['path'] = \
            path
        return self.applications_create_endpoint.call_with_http_info(**kwargs)

    def applications_load(
        self,
        path,
        **kwargs
    ):
        """Load an application configuration  # noqa: E501

        Load an application configuration from the local filesystem  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.applications_load(path, async_req=True)
        >>> result = thread.get()

        Args:
            path (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Application
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['path'] = \
            path
        return self.applications_load_endpoint.call_with_http_info(**kwargs)

