"""
    Torizon IDE-backend API

    Toradex API to build and deploy applications running as containers on Torizon  # noqa: E501

    The version of the OpenAPI document: 1.1.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from moses_client.api_client import ApiClient, Endpoint as _Endpoint
from moses_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from moses_client.model.application import Application
from moses_client.model.docker_container import DockerContainer
from moses_client.model.error_info import ErrorInfo
from moses_client.model.inline_response200 import InlineResponse200


class ApplicationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __application_build(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Build container image  # noqa: E501

            Build application release or debug container  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_build(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_build = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/build',
                'operation_id': 'application_build',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_build
        )

        def __application_delete(
            self,
            application_id,
            **kwargs
        ):
            """Remove an application  # noqa: E501

            Remove an application and all the associated data and containers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_delete(application_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            return self.call_with_http_info(**kwargs)

        self.application_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_delete
        )

        def __application_deploy(
            self,
            application_id,
            configuration,
            device_id,
            **kwargs
        ):
            """Deploy container image  # noqa: E501

            Deploy application container to target  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_deploy(application_id, configuration, device_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                device_id (str): Target device serial number

            Keyword Args:
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            return self.call_with_http_info(**kwargs)

        self.application_deploy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/deploy',
                'operation_id': 'application_deploy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_deploy
        )

        def __application_get(
            self,
            application_id,
            **kwargs
        ):
            """Get application  # noqa: E501

            Returns a specified application, knowing its id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_get(application_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Application
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            return self.call_with_http_info(**kwargs)

        self.application_get = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_get
        )

        def __application_getcontainer(
            self,
            application_id,
            configuration,
            device_id,
            **kwargs
        ):
            """Get container information  # noqa: E501

            Get detailed informations about container  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_getcontainer(application_id, configuration, device_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                device_id (str): Target device serial number

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DockerContainer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            return self.call_with_http_info(**kwargs)

        self.application_getcontainer = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/container',
                'operation_id': 'application_getcontainer',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_getcontainer
        )

        def __application_getcontainer_logs(
            self,
            application_id,
            configuration,
            device_id,
            **kwargs
        ):
            """Get one of more lines from container logs  # noqa: E501

            Return one chunk of log (one or more lines), blocking if no data is available  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_getcontainer_logs(application_id, configuration, device_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                device_id (str): Target device serial number

            Keyword Args:
                restart (bool): when true reads the lock back from beginning. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            return self.call_with_http_info(**kwargs)

        self.application_getcontainer_logs = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/container_logs',
                'operation_id': 'application_getcontainer_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'restart',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'restart':
                        (bool,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'restart': 'restart',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'restart': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_getcontainer_logs
        )

        def __application_getdocker_commandline(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Get docker command line to run the application/json  # noqa: E501

            Return the full docker command line that can be used to run the application container  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_getdocker_commandline(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_getdocker_commandline = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/docker_commandline',
                'operation_id': 'application_getdocker_commandline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_getdocker_commandline
        )

        def __application_getdocker_composefile(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Get docker compose file  # noqa: E501

            Return docker-compose file that can be used to run the application container and its dependencies  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_getdocker_composefile(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_getdocker_composefile = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/docker_composefile',
                'operation_id': 'application_getdocker_composefile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_getdocker_composefile
        )

        def __application_getprivatekey(
            self,
            application_id,
            **kwargs
        ):
            """Get the path of the RSA private key  # noqa: E501

            Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_getprivatekey(application_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            return self.call_with_http_info(**kwargs)

        self.application_getprivatekey = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/privatekey',
                'operation_id': 'application_getprivatekey',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_getprivatekey
        )

        def __application_modify(
            self,
            application_id,
            **kwargs
        ):
            """Change application properties  # noqa: E501

            Changes specified properties on an application  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_modify(application_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)

            Keyword Args:
                application (Application): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Application
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            return self.call_with_http_info(**kwargs)

        self.application_modify = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}',
                'operation_id': 'application_modify',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'application',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'application':
                        (Application,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'application': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__application_modify
        )

        def __application_push_to_registry(
            self,
            application_id,
            configuration,
            username,
            password,
            **kwargs
        ):
            """Push application to docker registry  # noqa: E501

            Push application's container to a docker registry, using authentication  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_push_to_registry(application_id, configuration, username, password, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                username (str):
                password (str):

            Keyword Args:
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['username'] = \
                username
            kwargs['password'] = \
                password
            return self.call_with_http_info(**kwargs)

        self.application_push_to_registry = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/push_to_registry',
                'operation_id': 'application_push_to_registry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'username',
                    'password',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'username',
                    'password',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'username': 'username',
                    'password': 'password',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'username': 'query',
                    'password': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_push_to_registry
        )

        def __application_reseal(
            self,
            application_id,
            **kwargs
        ):
            """Clean id and keys from application configuration  # noqa: E501

            This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_reseal(application_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            return self.call_with_http_info(**kwargs)

        self.application_reseal = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/reseal',
                'operation_id': 'application_reseal',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                ],
                'required': [
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                },
                'location_map': {
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_reseal
        )

        def __application_run(
            self,
            application_id,
            configuration,
            device_id,
            **kwargs
        ):
            """Run container image  # noqa: E501

            Run the application release or debug container on target, if the application is already running, restarts it  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_run(application_id, configuration, device_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                device_id (str): Target device serial number

            Keyword Args:
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DockerContainer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            return self.call_with_http_info(**kwargs)

        self.application_run = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/run',
                'operation_id': 'application_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_run
        )

        def __application_runsdk(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Run SDK containers  # noqa: E501

            Run SDK container and return its IP and SSH port  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_runsdk(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                build (bool): [optional] if omitted the server will use the default value of True
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_runsdk = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/run',
                'operation_id': 'application_runsdk',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'build',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'build':
                        (bool,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'build': 'build',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'build': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_runsdk
        )

        def __application_sdk_container(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Get SDK container  # noqa: E501

            Get SDK container information (can be used to check if it's running)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_sdk_container(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DockerContainer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_sdk_container = _Endpoint(
            settings={
                'response_type': (DockerContainer,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/container',
                'operation_id': 'application_sdk_container',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_sdk_container
        )

        def __application_stop(
            self,
            application_id,
            configuration,
            device_id,
            **kwargs
        ):
            """Stop running container image  # noqa: E501

            Stop application release or debug container currently running on target, operation succeeds even if the container is not running  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_stop(application_id, configuration, device_id, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):
                device_id (str): Target device serial number

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            return self.call_with_http_info(**kwargs)

        self.application_stop = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/stop',
                'operation_id': 'application_stop',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'device_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_stop
        )

        def __application_syncfolders(
            self,
            application_id,
            sourcefolder,
            configuration,
            device_id,
            destfolder,
            **kwargs
        ):
            """Synchronize folders  # noqa: E501

            Synchronizes folders between host/SDK container and the application container  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_syncfolders(application_id, sourcefolder, configuration, device_id, destfolder, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                sourcefolder (str):
                configuration (str):
                device_id (str): Target device serial number
                destfolder (str):

            Keyword Args:
                source_is_sdk (bool): [optional]
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['sourcefolder'] = \
                sourcefolder
            kwargs['configuration'] = \
                configuration
            kwargs['device_id'] = \
                device_id
            kwargs['destfolder'] = \
                destfolder
            return self.call_with_http_info(**kwargs)

        self.application_syncfolders = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/syncfolders',
                'operation_id': 'application_syncfolders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'sourcefolder',
                    'configuration',
                    'device_id',
                    'destfolder',
                    'source_is_sdk',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'sourcefolder',
                    'configuration',
                    'device_id',
                    'destfolder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'device_id',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('device_id',): {

                        'regex': {
                            'pattern': r'^[-0-9a-zA-Z.]*$',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'sourcefolder':
                        (str,),
                    'configuration':
                        (str,),
                    'device_id':
                        (str,),
                    'destfolder':
                        (str,),
                    'source_is_sdk':
                        (bool,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'sourcefolder': 'sourcefolder',
                    'configuration': 'configuration',
                    'device_id': 'device_id',
                    'destfolder': 'destfolder',
                    'source_is_sdk': 'source_is_sdk',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'sourcefolder': 'query',
                    'configuration': 'query',
                    'device_id': 'query',
                    'destfolder': 'query',
                    'source_is_sdk': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_syncfolders
        )

        def __application_updated(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Check if container image is up to date  # noqa: E501

            Check if some properties have been changed after the last build of the configuration-specific container image  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_updated(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_updated = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/applications/{application_id}/updated',
                'operation_id': 'application_updated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_updated
        )

        def __application_updatesdk(
            self,
            application_id,
            configuration,
            **kwargs
        ):
            """Update SDK container  # noqa: E501

            Update the SDK container by adding new dev libraries or synchronizing sysroots  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.application_updatesdk(application_id, configuration, async_req=True)
            >>> result = thread.get()

            Args:
                application_id (str): Id of an application (uuid)
                configuration (str):

            Keyword Args:
                progress_id (str): Id of a progress cookie (uuid). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['application_id'] = \
                application_id
            kwargs['configuration'] = \
                configuration
            return self.call_with_http_info(**kwargs)

        self.application_updatesdk = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/applications/{application_id}/sdk/update',
                'operation_id': 'application_updatesdk',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ],
                'required': [
                    'application_id',
                    'configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'application_id',
                    'configuration',
                    'progress_id',
                ]
            },
            root_map={
                'validations': {
                    ('application_id',): {

                        'regex': {
                            'pattern': r'^[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                    ('configuration',): {

                        'regex': {
                            'pattern': r'(?:debug|release)',  # noqa: E501
                        },
                    },
                    ('progress_id',): {

                        'regex': {
                            'pattern': r'^$|[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_id':
                        (str,),
                    'configuration':
                        (str,),
                    'progress_id':
                        (str,),
                },
                'attribute_map': {
                    'application_id': 'application_id',
                    'configuration': 'configuration',
                    'progress_id': 'progress_id',
                },
                'location_map': {
                    'application_id': 'path',
                    'configuration': 'query',
                    'progress_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__application_updatesdk
        )

        def __applications_create(
            self,
            platform_id,
            path,
            **kwargs
        ):
            """Create an application configuration  # noqa: E501

            Create a new application configuration  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.applications_create(platform_id, path, async_req=True)
            >>> result = thread.get()

            Args:
                platform_id (str):
                path (str):

            Keyword Args:
                username (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Application
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_id'] = \
                platform_id
            kwargs['path'] = \
                path
            return self.call_with_http_info(**kwargs)

        self.applications_create = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/create',
                'operation_id': 'applications_create',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_id',
                    'path',
                    'username',
                ],
                'required': [
                    'platform_id',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_id':
                        (str,),
                    'path':
                        (str,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'platform_id': 'platform_id',
                    'path': 'path',
                    'username': 'username',
                },
                'location_map': {
                    'platform_id': 'query',
                    'path': 'query',
                    'username': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__applications_create
        )

        def __applications_load(
            self,
            path,
            **kwargs
        ):
            """Load an application configuration  # noqa: E501

            Load an application configuration from the local filesystem  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.applications_load(path, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Application
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            return self.call_with_http_info(**kwargs)

        self.applications_load = _Endpoint(
            settings={
                'response_type': (Application,),
                'auth': [],
                'endpoint_path': '/applications/load',
                'operation_id': 'applications_load',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                ],
                'required': [
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                },
                'location_map': {
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__applications_load
        )
