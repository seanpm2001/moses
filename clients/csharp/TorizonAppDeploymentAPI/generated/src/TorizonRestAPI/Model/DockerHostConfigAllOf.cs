/* 
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TorizonRestAPI.Client.OpenAPIDateConverter;

namespace TorizonRestAPI.Model
{
    /// <summary>
    /// DockerHostConfigAllOf
    /// </summary>
    [DataContract]
    public partial class DockerHostConfigAllOf :  IEquatable<DockerHostConfigAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerHostConfigAllOf" /> class.
        /// </summary>
        /// <param name="binds">A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. .</param>
        /// <param name="containerIDFile">Path to a file where the container ID is written.</param>
        /// <param name="logConfig">logConfig.</param>
        /// <param name="networkMode">Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to..</param>
        /// <param name="portBindings">PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. .</param>
        /// <param name="restartPolicy">restartPolicy.</param>
        /// <param name="autoRemove">Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set..</param>
        /// <param name="volumeDriver">Driver that this container uses to mount volumes..</param>
        /// <param name="volumesFrom">A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;..</param>
        /// <param name="mounts">Specification for mounts to be added to the container..</param>
        /// <param name="capAdd">A list of kernel capabilities to add to the container..</param>
        /// <param name="capDrop">A list of kernel capabilities to drop from the container..</param>
        /// <param name="dns">A list of DNS servers for the container to use..</param>
        /// <param name="dnsOptions">A list of DNS options..</param>
        /// <param name="dnsSearch">A list of DNS search domains..</param>
        /// <param name="extraHosts">A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. .</param>
        /// <param name="groupAdd">A list of additional groups that the container process will run as..</param>
        /// <param name="ipcMode">IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. .</param>
        /// <param name="cgroup">Cgroup to use for the container..</param>
        /// <param name="links">A list of links for the container in the form &#x60;container_name:alias&#x60;..</param>
        /// <param name="oomScoreAdj">An integer value containing the score given to the container in order to tune OOM killer preferences..</param>
        /// <param name="pidMode">Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container .</param>
        /// <param name="privileged">Gives the container full access to the host..</param>
        /// <param name="publishAllPorts">Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. .</param>
        /// <param name="readonlyRootfs">Mount the container&#39;s root filesystem as read only..</param>
        /// <param name="securityOpt">A list of string values to customize labels for MLS systems, such as SELinux..</param>
        /// <param name="storageOpt">Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. .</param>
        /// <param name="tmpfs">A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. .</param>
        /// <param name="uTSMode">UTS namespace to use for the container..</param>
        /// <param name="usernsMode">Sets the usernamespace mode for the container when usernamespace remapping option is enabled..</param>
        /// <param name="shmSize">Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB..</param>
        /// <param name="sysctls">A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; .</param>
        /// <param name="runtime">Runtime to use with this container..</param>
        public DockerHostConfigAllOf(List<string> binds = default(List<string>), string containerIDFile = default(string), DockerHostConfigAllOfLogConfig logConfig = default(DockerHostConfigAllOfLogConfig), string networkMode = default(string), Dictionary<string, List<DockerPortBinding>> portBindings = default(Dictionary<string, List<DockerPortBinding>>), DockerRestartPolicy restartPolicy = default(DockerRestartPolicy), bool autoRemove = default(bool), string volumeDriver = default(string), List<string> volumesFrom = default(List<string>), List<DockerMount> mounts = default(List<DockerMount>), List<string> capAdd = default(List<string>), List<string> capDrop = default(List<string>), List<string> dns = default(List<string>), List<string> dnsOptions = default(List<string>), List<string> dnsSearch = default(List<string>), List<string> extraHosts = default(List<string>), List<string> groupAdd = default(List<string>), string ipcMode = default(string), string cgroup = default(string), List<string> links = default(List<string>), int oomScoreAdj = default(int), string pidMode = default(string), bool privileged = default(bool), bool publishAllPorts = default(bool), bool readonlyRootfs = default(bool), List<string> securityOpt = default(List<string>), Dictionary<string, string> storageOpt = default(Dictionary<string, string>), Dictionary<string, string> tmpfs = default(Dictionary<string, string>), string uTSMode = default(string), string usernsMode = default(string), int shmSize = default(int), Dictionary<string, string> sysctls = default(Dictionary<string, string>), string runtime = default(string))
        {
            this.Binds = binds;
            this.ContainerIDFile = containerIDFile;
            this.LogConfig = logConfig;
            this.NetworkMode = networkMode;
            this.PortBindings = portBindings;
            this.RestartPolicy = restartPolicy;
            this.AutoRemove = autoRemove;
            this.VolumeDriver = volumeDriver;
            this.VolumesFrom = volumesFrom;
            this.Mounts = mounts;
            this.CapAdd = capAdd;
            this.CapDrop = capDrop;
            this.Dns = dns;
            this.DnsOptions = dnsOptions;
            this.DnsSearch = dnsSearch;
            this.ExtraHosts = extraHosts;
            this.GroupAdd = groupAdd;
            this.IpcMode = ipcMode;
            this.Cgroup = cgroup;
            this.Links = links;
            this.OomScoreAdj = oomScoreAdj;
            this.PidMode = pidMode;
            this.Privileged = privileged;
            this.PublishAllPorts = publishAllPorts;
            this.ReadonlyRootfs = readonlyRootfs;
            this.SecurityOpt = securityOpt;
            this.StorageOpt = storageOpt;
            this.Tmpfs = tmpfs;
            this.UTSMode = uTSMode;
            this.UsernsMode = usernsMode;
            this.ShmSize = shmSize;
            this.Sysctls = sysctls;
            this.Runtime = runtime;
        }
        
        /// <summary>
        /// A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. 
        /// </summary>
        /// <value>A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. </value>
        [DataMember(Name="Binds", EmitDefaultValue=false)]
        public List<string> Binds { get; set; }

        /// <summary>
        /// Path to a file where the container ID is written
        /// </summary>
        /// <value>Path to a file where the container ID is written</value>
        [DataMember(Name="ContainerIDFile", EmitDefaultValue=false)]
        public string ContainerIDFile { get; set; }

        /// <summary>
        /// Gets or Sets LogConfig
        /// </summary>
        [DataMember(Name="LogConfig", EmitDefaultValue=false)]
        public DockerHostConfigAllOfLogConfig LogConfig { get; set; }

        /// <summary>
        /// Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.
        /// </summary>
        /// <value>Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.</value>
        [DataMember(Name="NetworkMode", EmitDefaultValue=false)]
        public string NetworkMode { get; set; }

        /// <summary>
        /// PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. 
        /// </summary>
        /// <value>PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. </value>
        [DataMember(Name="PortBindings", EmitDefaultValue=false)]
        public Dictionary<string, List<DockerPortBinding>> PortBindings { get; set; }

        /// <summary>
        /// Gets or Sets RestartPolicy
        /// </summary>
        [DataMember(Name="RestartPolicy", EmitDefaultValue=false)]
        public DockerRestartPolicy RestartPolicy { get; set; }

        /// <summary>
        /// Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set.
        /// </summary>
        /// <value>Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set.</value>
        [DataMember(Name="AutoRemove", EmitDefaultValue=false)]
        public bool AutoRemove { get; set; }

        /// <summary>
        /// Driver that this container uses to mount volumes.
        /// </summary>
        /// <value>Driver that this container uses to mount volumes.</value>
        [DataMember(Name="VolumeDriver", EmitDefaultValue=false)]
        public string VolumeDriver { get; set; }

        /// <summary>
        /// A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;.
        /// </summary>
        /// <value>A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;.</value>
        [DataMember(Name="VolumesFrom", EmitDefaultValue=false)]
        public List<string> VolumesFrom { get; set; }

        /// <summary>
        /// Specification for mounts to be added to the container.
        /// </summary>
        /// <value>Specification for mounts to be added to the container.</value>
        [DataMember(Name="Mounts", EmitDefaultValue=false)]
        public List<DockerMount> Mounts { get; set; }

        /// <summary>
        /// A list of kernel capabilities to add to the container.
        /// </summary>
        /// <value>A list of kernel capabilities to add to the container.</value>
        [DataMember(Name="CapAdd", EmitDefaultValue=false)]
        public List<string> CapAdd { get; set; }

        /// <summary>
        /// A list of kernel capabilities to drop from the container.
        /// </summary>
        /// <value>A list of kernel capabilities to drop from the container.</value>
        [DataMember(Name="CapDrop", EmitDefaultValue=false)]
        public List<string> CapDrop { get; set; }

        /// <summary>
        /// A list of DNS servers for the container to use.
        /// </summary>
        /// <value>A list of DNS servers for the container to use.</value>
        [DataMember(Name="Dns", EmitDefaultValue=false)]
        public List<string> Dns { get; set; }

        /// <summary>
        /// A list of DNS options.
        /// </summary>
        /// <value>A list of DNS options.</value>
        [DataMember(Name="DnsOptions", EmitDefaultValue=false)]
        public List<string> DnsOptions { get; set; }

        /// <summary>
        /// A list of DNS search domains.
        /// </summary>
        /// <value>A list of DNS search domains.</value>
        [DataMember(Name="DnsSearch", EmitDefaultValue=false)]
        public List<string> DnsSearch { get; set; }

        /// <summary>
        /// A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. 
        /// </summary>
        /// <value>A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. </value>
        [DataMember(Name="ExtraHosts", EmitDefaultValue=false)]
        public List<string> ExtraHosts { get; set; }

        /// <summary>
        /// A list of additional groups that the container process will run as.
        /// </summary>
        /// <value>A list of additional groups that the container process will run as.</value>
        [DataMember(Name="GroupAdd", EmitDefaultValue=false)]
        public List<string> GroupAdd { get; set; }

        /// <summary>
        /// IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. 
        /// </summary>
        /// <value>IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. </value>
        [DataMember(Name="IpcMode", EmitDefaultValue=false)]
        public string IpcMode { get; set; }

        /// <summary>
        /// Cgroup to use for the container.
        /// </summary>
        /// <value>Cgroup to use for the container.</value>
        [DataMember(Name="Cgroup", EmitDefaultValue=false)]
        public string Cgroup { get; set; }

        /// <summary>
        /// A list of links for the container in the form &#x60;container_name:alias&#x60;.
        /// </summary>
        /// <value>A list of links for the container in the form &#x60;container_name:alias&#x60;.</value>
        [DataMember(Name="Links", EmitDefaultValue=false)]
        public List<string> Links { get; set; }

        /// <summary>
        /// An integer value containing the score given to the container in order to tune OOM killer preferences.
        /// </summary>
        /// <value>An integer value containing the score given to the container in order to tune OOM killer preferences.</value>
        [DataMember(Name="OomScoreAdj", EmitDefaultValue=false)]
        public int OomScoreAdj { get; set; }

        /// <summary>
        /// Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container 
        /// </summary>
        /// <value>Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container </value>
        [DataMember(Name="PidMode", EmitDefaultValue=false)]
        public string PidMode { get; set; }

        /// <summary>
        /// Gives the container full access to the host.
        /// </summary>
        /// <value>Gives the container full access to the host.</value>
        [DataMember(Name="Privileged", EmitDefaultValue=false)]
        public bool Privileged { get; set; }

        /// <summary>
        /// Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. 
        /// </summary>
        /// <value>Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. </value>
        [DataMember(Name="PublishAllPorts", EmitDefaultValue=false)]
        public bool PublishAllPorts { get; set; }

        /// <summary>
        /// Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>
        [DataMember(Name="ReadonlyRootfs", EmitDefaultValue=false)]
        public bool ReadonlyRootfs { get; set; }

        /// <summary>
        /// A list of string values to customize labels for MLS systems, such as SELinux.
        /// </summary>
        /// <value>A list of string values to customize labels for MLS systems, such as SELinux.</value>
        [DataMember(Name="SecurityOpt", EmitDefaultValue=false)]
        public List<string> SecurityOpt { get; set; }

        /// <summary>
        /// Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. 
        /// </summary>
        /// <value>Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. </value>
        [DataMember(Name="StorageOpt", EmitDefaultValue=false)]
        public Dictionary<string, string> StorageOpt { get; set; }

        /// <summary>
        /// A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. 
        /// </summary>
        /// <value>A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. </value>
        [DataMember(Name="Tmpfs", EmitDefaultValue=false)]
        public Dictionary<string, string> Tmpfs { get; set; }

        /// <summary>
        /// UTS namespace to use for the container.
        /// </summary>
        /// <value>UTS namespace to use for the container.</value>
        [DataMember(Name="UTSMode", EmitDefaultValue=false)]
        public string UTSMode { get; set; }

        /// <summary>
        /// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
        /// </summary>
        /// <value>Sets the usernamespace mode for the container when usernamespace remapping option is enabled.</value>
        [DataMember(Name="UsernsMode", EmitDefaultValue=false)]
        public string UsernsMode { get; set; }

        /// <summary>
        /// Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.
        /// </summary>
        /// <value>Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.</value>
        [DataMember(Name="ShmSize", EmitDefaultValue=false)]
        public int ShmSize { get; set; }

        /// <summary>
        /// A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; 
        /// </summary>
        /// <value>A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; </value>
        [DataMember(Name="Sysctls", EmitDefaultValue=false)]
        public Dictionary<string, string> Sysctls { get; set; }

        /// <summary>
        /// Runtime to use with this container.
        /// </summary>
        /// <value>Runtime to use with this container.</value>
        [DataMember(Name="Runtime", EmitDefaultValue=false)]
        public string Runtime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerHostConfigAllOf {\n");
            sb.Append("  Binds: ").Append(Binds).Append("\n");
            sb.Append("  ContainerIDFile: ").Append(ContainerIDFile).Append("\n");
            sb.Append("  LogConfig: ").Append(LogConfig).Append("\n");
            sb.Append("  NetworkMode: ").Append(NetworkMode).Append("\n");
            sb.Append("  PortBindings: ").Append(PortBindings).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  AutoRemove: ").Append(AutoRemove).Append("\n");
            sb.Append("  VolumeDriver: ").Append(VolumeDriver).Append("\n");
            sb.Append("  VolumesFrom: ").Append(VolumesFrom).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  CapAdd: ").Append(CapAdd).Append("\n");
            sb.Append("  CapDrop: ").Append(CapDrop).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  DnsOptions: ").Append(DnsOptions).Append("\n");
            sb.Append("  DnsSearch: ").Append(DnsSearch).Append("\n");
            sb.Append("  ExtraHosts: ").Append(ExtraHosts).Append("\n");
            sb.Append("  GroupAdd: ").Append(GroupAdd).Append("\n");
            sb.Append("  IpcMode: ").Append(IpcMode).Append("\n");
            sb.Append("  Cgroup: ").Append(Cgroup).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  OomScoreAdj: ").Append(OomScoreAdj).Append("\n");
            sb.Append("  PidMode: ").Append(PidMode).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  PublishAllPorts: ").Append(PublishAllPorts).Append("\n");
            sb.Append("  ReadonlyRootfs: ").Append(ReadonlyRootfs).Append("\n");
            sb.Append("  SecurityOpt: ").Append(SecurityOpt).Append("\n");
            sb.Append("  StorageOpt: ").Append(StorageOpt).Append("\n");
            sb.Append("  Tmpfs: ").Append(Tmpfs).Append("\n");
            sb.Append("  UTSMode: ").Append(UTSMode).Append("\n");
            sb.Append("  UsernsMode: ").Append(UsernsMode).Append("\n");
            sb.Append("  ShmSize: ").Append(ShmSize).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerHostConfigAllOf);
        }

        /// <summary>
        /// Returns true if DockerHostConfigAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerHostConfigAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerHostConfigAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Binds == input.Binds ||
                    this.Binds != null &&
                    input.Binds != null &&
                    this.Binds.SequenceEqual(input.Binds)
                ) && 
                (
                    this.ContainerIDFile == input.ContainerIDFile ||
                    (this.ContainerIDFile != null &&
                    this.ContainerIDFile.Equals(input.ContainerIDFile))
                ) && 
                (
                    this.LogConfig == input.LogConfig ||
                    (this.LogConfig != null &&
                    this.LogConfig.Equals(input.LogConfig))
                ) && 
                (
                    this.NetworkMode == input.NetworkMode ||
                    (this.NetworkMode != null &&
                    this.NetworkMode.Equals(input.NetworkMode))
                ) && 
                (
                    this.PortBindings == input.PortBindings ||
                    this.PortBindings != null &&
                    input.PortBindings != null &&
                    this.PortBindings.SequenceEqual(input.PortBindings)
                ) && 
                (
                    this.RestartPolicy == input.RestartPolicy ||
                    (this.RestartPolicy != null &&
                    this.RestartPolicy.Equals(input.RestartPolicy))
                ) && 
                (
                    this.AutoRemove == input.AutoRemove ||
                    (this.AutoRemove != null &&
                    this.AutoRemove.Equals(input.AutoRemove))
                ) && 
                (
                    this.VolumeDriver == input.VolumeDriver ||
                    (this.VolumeDriver != null &&
                    this.VolumeDriver.Equals(input.VolumeDriver))
                ) && 
                (
                    this.VolumesFrom == input.VolumesFrom ||
                    this.VolumesFrom != null &&
                    input.VolumesFrom != null &&
                    this.VolumesFrom.SequenceEqual(input.VolumesFrom)
                ) && 
                (
                    this.Mounts == input.Mounts ||
                    this.Mounts != null &&
                    input.Mounts != null &&
                    this.Mounts.SequenceEqual(input.Mounts)
                ) && 
                (
                    this.CapAdd == input.CapAdd ||
                    this.CapAdd != null &&
                    input.CapAdd != null &&
                    this.CapAdd.SequenceEqual(input.CapAdd)
                ) && 
                (
                    this.CapDrop == input.CapDrop ||
                    this.CapDrop != null &&
                    input.CapDrop != null &&
                    this.CapDrop.SequenceEqual(input.CapDrop)
                ) && 
                (
                    this.Dns == input.Dns ||
                    this.Dns != null &&
                    input.Dns != null &&
                    this.Dns.SequenceEqual(input.Dns)
                ) && 
                (
                    this.DnsOptions == input.DnsOptions ||
                    this.DnsOptions != null &&
                    input.DnsOptions != null &&
                    this.DnsOptions.SequenceEqual(input.DnsOptions)
                ) && 
                (
                    this.DnsSearch == input.DnsSearch ||
                    this.DnsSearch != null &&
                    input.DnsSearch != null &&
                    this.DnsSearch.SequenceEqual(input.DnsSearch)
                ) && 
                (
                    this.ExtraHosts == input.ExtraHosts ||
                    this.ExtraHosts != null &&
                    input.ExtraHosts != null &&
                    this.ExtraHosts.SequenceEqual(input.ExtraHosts)
                ) && 
                (
                    this.GroupAdd == input.GroupAdd ||
                    this.GroupAdd != null &&
                    input.GroupAdd != null &&
                    this.GroupAdd.SequenceEqual(input.GroupAdd)
                ) && 
                (
                    this.IpcMode == input.IpcMode ||
                    (this.IpcMode != null &&
                    this.IpcMode.Equals(input.IpcMode))
                ) && 
                (
                    this.Cgroup == input.Cgroup ||
                    (this.Cgroup != null &&
                    this.Cgroup.Equals(input.Cgroup))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.OomScoreAdj == input.OomScoreAdj ||
                    (this.OomScoreAdj != null &&
                    this.OomScoreAdj.Equals(input.OomScoreAdj))
                ) && 
                (
                    this.PidMode == input.PidMode ||
                    (this.PidMode != null &&
                    this.PidMode.Equals(input.PidMode))
                ) && 
                (
                    this.Privileged == input.Privileged ||
                    (this.Privileged != null &&
                    this.Privileged.Equals(input.Privileged))
                ) && 
                (
                    this.PublishAllPorts == input.PublishAllPorts ||
                    (this.PublishAllPorts != null &&
                    this.PublishAllPorts.Equals(input.PublishAllPorts))
                ) && 
                (
                    this.ReadonlyRootfs == input.ReadonlyRootfs ||
                    (this.ReadonlyRootfs != null &&
                    this.ReadonlyRootfs.Equals(input.ReadonlyRootfs))
                ) && 
                (
                    this.SecurityOpt == input.SecurityOpt ||
                    this.SecurityOpt != null &&
                    input.SecurityOpt != null &&
                    this.SecurityOpt.SequenceEqual(input.SecurityOpt)
                ) && 
                (
                    this.StorageOpt == input.StorageOpt ||
                    this.StorageOpt != null &&
                    input.StorageOpt != null &&
                    this.StorageOpt.SequenceEqual(input.StorageOpt)
                ) && 
                (
                    this.Tmpfs == input.Tmpfs ||
                    this.Tmpfs != null &&
                    input.Tmpfs != null &&
                    this.Tmpfs.SequenceEqual(input.Tmpfs)
                ) && 
                (
                    this.UTSMode == input.UTSMode ||
                    (this.UTSMode != null &&
                    this.UTSMode.Equals(input.UTSMode))
                ) && 
                (
                    this.UsernsMode == input.UsernsMode ||
                    (this.UsernsMode != null &&
                    this.UsernsMode.Equals(input.UsernsMode))
                ) && 
                (
                    this.ShmSize == input.ShmSize ||
                    (this.ShmSize != null &&
                    this.ShmSize.Equals(input.ShmSize))
                ) && 
                (
                    this.Sysctls == input.Sysctls ||
                    this.Sysctls != null &&
                    input.Sysctls != null &&
                    this.Sysctls.SequenceEqual(input.Sysctls)
                ) && 
                (
                    this.Runtime == input.Runtime ||
                    (this.Runtime != null &&
                    this.Runtime.Equals(input.Runtime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Binds != null)
                    hashCode = hashCode * 59 + this.Binds.GetHashCode();
                if (this.ContainerIDFile != null)
                    hashCode = hashCode * 59 + this.ContainerIDFile.GetHashCode();
                if (this.LogConfig != null)
                    hashCode = hashCode * 59 + this.LogConfig.GetHashCode();
                if (this.NetworkMode != null)
                    hashCode = hashCode * 59 + this.NetworkMode.GetHashCode();
                if (this.PortBindings != null)
                    hashCode = hashCode * 59 + this.PortBindings.GetHashCode();
                if (this.RestartPolicy != null)
                    hashCode = hashCode * 59 + this.RestartPolicy.GetHashCode();
                if (this.AutoRemove != null)
                    hashCode = hashCode * 59 + this.AutoRemove.GetHashCode();
                if (this.VolumeDriver != null)
                    hashCode = hashCode * 59 + this.VolumeDriver.GetHashCode();
                if (this.VolumesFrom != null)
                    hashCode = hashCode * 59 + this.VolumesFrom.GetHashCode();
                if (this.Mounts != null)
                    hashCode = hashCode * 59 + this.Mounts.GetHashCode();
                if (this.CapAdd != null)
                    hashCode = hashCode * 59 + this.CapAdd.GetHashCode();
                if (this.CapDrop != null)
                    hashCode = hashCode * 59 + this.CapDrop.GetHashCode();
                if (this.Dns != null)
                    hashCode = hashCode * 59 + this.Dns.GetHashCode();
                if (this.DnsOptions != null)
                    hashCode = hashCode * 59 + this.DnsOptions.GetHashCode();
                if (this.DnsSearch != null)
                    hashCode = hashCode * 59 + this.DnsSearch.GetHashCode();
                if (this.ExtraHosts != null)
                    hashCode = hashCode * 59 + this.ExtraHosts.GetHashCode();
                if (this.GroupAdd != null)
                    hashCode = hashCode * 59 + this.GroupAdd.GetHashCode();
                if (this.IpcMode != null)
                    hashCode = hashCode * 59 + this.IpcMode.GetHashCode();
                if (this.Cgroup != null)
                    hashCode = hashCode * 59 + this.Cgroup.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.OomScoreAdj != null)
                    hashCode = hashCode * 59 + this.OomScoreAdj.GetHashCode();
                if (this.PidMode != null)
                    hashCode = hashCode * 59 + this.PidMode.GetHashCode();
                if (this.Privileged != null)
                    hashCode = hashCode * 59 + this.Privileged.GetHashCode();
                if (this.PublishAllPorts != null)
                    hashCode = hashCode * 59 + this.PublishAllPorts.GetHashCode();
                if (this.ReadonlyRootfs != null)
                    hashCode = hashCode * 59 + this.ReadonlyRootfs.GetHashCode();
                if (this.SecurityOpt != null)
                    hashCode = hashCode * 59 + this.SecurityOpt.GetHashCode();
                if (this.StorageOpt != null)
                    hashCode = hashCode * 59 + this.StorageOpt.GetHashCode();
                if (this.Tmpfs != null)
                    hashCode = hashCode * 59 + this.Tmpfs.GetHashCode();
                if (this.UTSMode != null)
                    hashCode = hashCode * 59 + this.UTSMode.GetHashCode();
                if (this.UsernsMode != null)
                    hashCode = hashCode * 59 + this.UsernsMode.GetHashCode();
                if (this.ShmSize != null)
                    hashCode = hashCode * 59 + this.ShmSize.GetHashCode();
                if (this.Sysctls != null)
                    hashCode = hashCode * 59 + this.Sysctls.GetHashCode();
                if (this.Runtime != null)
                    hashCode = hashCode * 59 + this.Runtime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // ShmSize (int) minimum
            if(this.ShmSize < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShmSize, must be a value greater than or equal to 0.", new [] { "ShmSize" });
            }

            yield break;
        }
    }

}
