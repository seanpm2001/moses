/* 
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TorizonRestAPI.Client.OpenAPIDateConverter;

namespace TorizonRestAPI.Model
{
    /// <summary>
    /// Address represents an IPv4 or IPv6 IP address.
    /// </summary>
    [DataContract]
    public partial class DockerAddress :  IEquatable<DockerAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerAddress" /> class.
        /// </summary>
        /// <param name="addr">IP address..</param>
        /// <param name="prefixLen">Mask length of the IP address..</param>
        public DockerAddress(string addr = default(string), int prefixLen = default(int))
        {
            this.Addr = addr;
            this.PrefixLen = prefixLen;
        }
        
        /// <summary>
        /// IP address.
        /// </summary>
        /// <value>IP address.</value>
        [DataMember(Name="Addr", EmitDefaultValue=false)]
        public string Addr { get; set; }

        /// <summary>
        /// Mask length of the IP address.
        /// </summary>
        /// <value>Mask length of the IP address.</value>
        [DataMember(Name="PrefixLen", EmitDefaultValue=false)]
        public int PrefixLen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerAddress {\n");
            sb.Append("  Addr: ").Append(Addr).Append("\n");
            sb.Append("  PrefixLen: ").Append(PrefixLen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerAddress);
        }

        /// <summary>
        /// Returns true if DockerAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addr == input.Addr ||
                    (this.Addr != null &&
                    this.Addr.Equals(input.Addr))
                ) && 
                (
                    this.PrefixLen == input.PrefixLen ||
                    (this.PrefixLen != null &&
                    this.PrefixLen.Equals(input.PrefixLen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addr != null)
                    hashCode = hashCode * 59 + this.Addr.GetHashCode();
                if (this.PrefixLen != null)
                    hashCode = hashCode * 59 + this.PrefixLen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
