/* 
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TorizonRestAPI.Client.OpenAPIDateConverter;

namespace TorizonRestAPI.Model
{
    /// <summary>
    /// NetworkSettings exposes the network settings in the API
    /// </summary>
    [DataContract]
    public partial class DockerNetworkSettings :  IEquatable<DockerNetworkSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerNetworkSettings" /> class.
        /// </summary>
        /// <param name="bridge">Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;)..</param>
        /// <param name="sandboxID">SandboxID uniquely represents a container&#39;s network stack..</param>
        /// <param name="hairpinMode">Indicates if hairpin NAT should be enabled on the virtual interface. .</param>
        /// <param name="linkLocalIPv6Address">IPv6 unicast address using the link-local prefix..</param>
        /// <param name="linkLocalIPv6PrefixLen">Prefix length of the IPv6 unicast address..</param>
        /// <param name="ports">PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. .</param>
        /// <param name="sandboxKey">SandboxKey identifies the sandbox.</param>
        /// <param name="secondaryIPAddresses">secondaryIPAddresses.</param>
        /// <param name="secondaryIPv6Addresses">secondaryIPv6Addresses.</param>
        /// <param name="endpointID">EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="gateway">Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="globalIPv6Address">Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="globalIPv6PrefixLen">Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="iPAddress">IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="iPPrefixLen">Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="iPv6Gateway">IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="macAddress">MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .</param>
        /// <param name="networks">Information about all networks that the container is connected to. .</param>
        public DockerNetworkSettings(string bridge = default(string), string sandboxID = default(string), bool hairpinMode = default(bool), string linkLocalIPv6Address = default(string), int linkLocalIPv6PrefixLen = default(int), Dictionary<string, List<DockerPortBinding>> ports = default(Dictionary<string, List<DockerPortBinding>>), string sandboxKey = default(string), List<DockerAddress> secondaryIPAddresses = default(List<DockerAddress>), List<DockerAddress> secondaryIPv6Addresses = default(List<DockerAddress>), string endpointID = default(string), string gateway = default(string), string globalIPv6Address = default(string), int globalIPv6PrefixLen = default(int), string iPAddress = default(string), int iPPrefixLen = default(int), string iPv6Gateway = default(string), string macAddress = default(string), Dictionary<string, DockerEndpointSettings> networks = default(Dictionary<string, DockerEndpointSettings>))
        {
            this.SecondaryIPAddresses = secondaryIPAddresses;
            this.SecondaryIPv6Addresses = secondaryIPv6Addresses;
            this.Bridge = bridge;
            this.SandboxID = sandboxID;
            this.HairpinMode = hairpinMode;
            this.LinkLocalIPv6Address = linkLocalIPv6Address;
            this.LinkLocalIPv6PrefixLen = linkLocalIPv6PrefixLen;
            this.Ports = ports;
            this.SandboxKey = sandboxKey;
            this.SecondaryIPAddresses = secondaryIPAddresses;
            this.SecondaryIPv6Addresses = secondaryIPv6Addresses;
            this.EndpointID = endpointID;
            this.Gateway = gateway;
            this.GlobalIPv6Address = globalIPv6Address;
            this.GlobalIPv6PrefixLen = globalIPv6PrefixLen;
            this.IPAddress = iPAddress;
            this.IPPrefixLen = iPPrefixLen;
            this.IPv6Gateway = iPv6Gateway;
            this.MacAddress = macAddress;
            this.Networks = networks;
        }
        
        /// <summary>
        /// Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).
        /// </summary>
        /// <value>Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).</value>
        [DataMember(Name="Bridge", EmitDefaultValue=false)]
        public string Bridge { get; set; }

        /// <summary>
        /// SandboxID uniquely represents a container&#39;s network stack.
        /// </summary>
        /// <value>SandboxID uniquely represents a container&#39;s network stack.</value>
        [DataMember(Name="SandboxID", EmitDefaultValue=false)]
        public string SandboxID { get; set; }

        /// <summary>
        /// Indicates if hairpin NAT should be enabled on the virtual interface. 
        /// </summary>
        /// <value>Indicates if hairpin NAT should be enabled on the virtual interface. </value>
        [DataMember(Name="HairpinMode", EmitDefaultValue=false)]
        public bool HairpinMode { get; set; }

        /// <summary>
        /// IPv6 unicast address using the link-local prefix.
        /// </summary>
        /// <value>IPv6 unicast address using the link-local prefix.</value>
        [DataMember(Name="LinkLocalIPv6Address", EmitDefaultValue=false)]
        public string LinkLocalIPv6Address { get; set; }

        /// <summary>
        /// Prefix length of the IPv6 unicast address.
        /// </summary>
        /// <value>Prefix length of the IPv6 unicast address.</value>
        [DataMember(Name="LinkLocalIPv6PrefixLen", EmitDefaultValue=false)]
        public int LinkLocalIPv6PrefixLen { get; set; }

        /// <summary>
        /// PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. 
        /// </summary>
        /// <value>PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table. </value>
        [DataMember(Name="Ports", EmitDefaultValue=false)]
        public Dictionary<string, List<DockerPortBinding>> Ports { get; set; }

        /// <summary>
        /// SandboxKey identifies the sandbox
        /// </summary>
        /// <value>SandboxKey identifies the sandbox</value>
        [DataMember(Name="SandboxKey", EmitDefaultValue=false)]
        public string SandboxKey { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryIPAddresses
        /// </summary>
        [DataMember(Name="SecondaryIPAddresses", EmitDefaultValue=true)]
        public List<DockerAddress> SecondaryIPAddresses { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryIPv6Addresses
        /// </summary>
        [DataMember(Name="SecondaryIPv6Addresses", EmitDefaultValue=true)]
        public List<DockerAddress> SecondaryIPv6Addresses { get; set; }

        /// <summary>
        /// EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="EndpointID", EmitDefaultValue=false)]
        public string EndpointID { get; set; }

        /// <summary>
        /// Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="Gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="GlobalIPv6Address", EmitDefaultValue=false)]
        public string GlobalIPv6Address { get; set; }

        /// <summary>
        /// Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="GlobalIPv6PrefixLen", EmitDefaultValue=false)]
        public int GlobalIPv6PrefixLen { get; set; }

        /// <summary>
        /// IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="IPAddress", EmitDefaultValue=false)]
        public string IPAddress { get; set; }

        /// <summary>
        /// Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="IPPrefixLen", EmitDefaultValue=false)]
        public int IPPrefixLen { get; set; }

        /// <summary>
        /// IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="IPv6Gateway", EmitDefaultValue=false)]
        public string IPv6Gateway { get; set; }

        /// <summary>
        /// MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        [DataMember(Name="MacAddress", EmitDefaultValue=false)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Information about all networks that the container is connected to. 
        /// </summary>
        /// <value>Information about all networks that the container is connected to. </value>
        [DataMember(Name="Networks", EmitDefaultValue=false)]
        public Dictionary<string, DockerEndpointSettings> Networks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerNetworkSettings {\n");
            sb.Append("  Bridge: ").Append(Bridge).Append("\n");
            sb.Append("  SandboxID: ").Append(SandboxID).Append("\n");
            sb.Append("  HairpinMode: ").Append(HairpinMode).Append("\n");
            sb.Append("  LinkLocalIPv6Address: ").Append(LinkLocalIPv6Address).Append("\n");
            sb.Append("  LinkLocalIPv6PrefixLen: ").Append(LinkLocalIPv6PrefixLen).Append("\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  SandboxKey: ").Append(SandboxKey).Append("\n");
            sb.Append("  SecondaryIPAddresses: ").Append(SecondaryIPAddresses).Append("\n");
            sb.Append("  SecondaryIPv6Addresses: ").Append(SecondaryIPv6Addresses).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  GlobalIPv6Address: ").Append(GlobalIPv6Address).Append("\n");
            sb.Append("  GlobalIPv6PrefixLen: ").Append(GlobalIPv6PrefixLen).Append("\n");
            sb.Append("  IPAddress: ").Append(IPAddress).Append("\n");
            sb.Append("  IPPrefixLen: ").Append(IPPrefixLen).Append("\n");
            sb.Append("  IPv6Gateway: ").Append(IPv6Gateway).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerNetworkSettings);
        }

        /// <summary>
        /// Returns true if DockerNetworkSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerNetworkSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerNetworkSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bridge == input.Bridge ||
                    (this.Bridge != null &&
                    this.Bridge.Equals(input.Bridge))
                ) && 
                (
                    this.SandboxID == input.SandboxID ||
                    (this.SandboxID != null &&
                    this.SandboxID.Equals(input.SandboxID))
                ) && 
                (
                    this.HairpinMode == input.HairpinMode ||
                    (this.HairpinMode != null &&
                    this.HairpinMode.Equals(input.HairpinMode))
                ) && 
                (
                    this.LinkLocalIPv6Address == input.LinkLocalIPv6Address ||
                    (this.LinkLocalIPv6Address != null &&
                    this.LinkLocalIPv6Address.Equals(input.LinkLocalIPv6Address))
                ) && 
                (
                    this.LinkLocalIPv6PrefixLen == input.LinkLocalIPv6PrefixLen ||
                    (this.LinkLocalIPv6PrefixLen != null &&
                    this.LinkLocalIPv6PrefixLen.Equals(input.LinkLocalIPv6PrefixLen))
                ) && 
                (
                    this.Ports == input.Ports ||
                    this.Ports != null &&
                    input.Ports != null &&
                    this.Ports.SequenceEqual(input.Ports)
                ) && 
                (
                    this.SandboxKey == input.SandboxKey ||
                    (this.SandboxKey != null &&
                    this.SandboxKey.Equals(input.SandboxKey))
                ) && 
                (
                    this.SecondaryIPAddresses == input.SecondaryIPAddresses ||
                    this.SecondaryIPAddresses != null &&
                    input.SecondaryIPAddresses != null &&
                    this.SecondaryIPAddresses.SequenceEqual(input.SecondaryIPAddresses)
                ) && 
                (
                    this.SecondaryIPv6Addresses == input.SecondaryIPv6Addresses ||
                    this.SecondaryIPv6Addresses != null &&
                    input.SecondaryIPv6Addresses != null &&
                    this.SecondaryIPv6Addresses.SequenceEqual(input.SecondaryIPv6Addresses)
                ) && 
                (
                    this.EndpointID == input.EndpointID ||
                    (this.EndpointID != null &&
                    this.EndpointID.Equals(input.EndpointID))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.GlobalIPv6Address == input.GlobalIPv6Address ||
                    (this.GlobalIPv6Address != null &&
                    this.GlobalIPv6Address.Equals(input.GlobalIPv6Address))
                ) && 
                (
                    this.GlobalIPv6PrefixLen == input.GlobalIPv6PrefixLen ||
                    (this.GlobalIPv6PrefixLen != null &&
                    this.GlobalIPv6PrefixLen.Equals(input.GlobalIPv6PrefixLen))
                ) && 
                (
                    this.IPAddress == input.IPAddress ||
                    (this.IPAddress != null &&
                    this.IPAddress.Equals(input.IPAddress))
                ) && 
                (
                    this.IPPrefixLen == input.IPPrefixLen ||
                    (this.IPPrefixLen != null &&
                    this.IPPrefixLen.Equals(input.IPPrefixLen))
                ) && 
                (
                    this.IPv6Gateway == input.IPv6Gateway ||
                    (this.IPv6Gateway != null &&
                    this.IPv6Gateway.Equals(input.IPv6Gateway))
                ) && 
                (
                    this.MacAddress == input.MacAddress ||
                    (this.MacAddress != null &&
                    this.MacAddress.Equals(input.MacAddress))
                ) && 
                (
                    this.Networks == input.Networks ||
                    this.Networks != null &&
                    input.Networks != null &&
                    this.Networks.SequenceEqual(input.Networks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bridge != null)
                    hashCode = hashCode * 59 + this.Bridge.GetHashCode();
                if (this.SandboxID != null)
                    hashCode = hashCode * 59 + this.SandboxID.GetHashCode();
                if (this.HairpinMode != null)
                    hashCode = hashCode * 59 + this.HairpinMode.GetHashCode();
                if (this.LinkLocalIPv6Address != null)
                    hashCode = hashCode * 59 + this.LinkLocalIPv6Address.GetHashCode();
                if (this.LinkLocalIPv6PrefixLen != null)
                    hashCode = hashCode * 59 + this.LinkLocalIPv6PrefixLen.GetHashCode();
                if (this.Ports != null)
                    hashCode = hashCode * 59 + this.Ports.GetHashCode();
                if (this.SandboxKey != null)
                    hashCode = hashCode * 59 + this.SandboxKey.GetHashCode();
                if (this.SecondaryIPAddresses != null)
                    hashCode = hashCode * 59 + this.SecondaryIPAddresses.GetHashCode();
                if (this.SecondaryIPv6Addresses != null)
                    hashCode = hashCode * 59 + this.SecondaryIPv6Addresses.GetHashCode();
                if (this.EndpointID != null)
                    hashCode = hashCode * 59 + this.EndpointID.GetHashCode();
                if (this.Gateway != null)
                    hashCode = hashCode * 59 + this.Gateway.GetHashCode();
                if (this.GlobalIPv6Address != null)
                    hashCode = hashCode * 59 + this.GlobalIPv6Address.GetHashCode();
                if (this.GlobalIPv6PrefixLen != null)
                    hashCode = hashCode * 59 + this.GlobalIPv6PrefixLen.GetHashCode();
                if (this.IPAddress != null)
                    hashCode = hashCode * 59 + this.IPAddress.GetHashCode();
                if (this.IPPrefixLen != null)
                    hashCode = hashCode * 59 + this.IPPrefixLen.GetHashCode();
                if (this.IPv6Gateway != null)
                    hashCode = hashCode * 59 + this.IPv6Gateway.GetHashCode();
                if (this.MacAddress != null)
                    hashCode = hashCode * 59 + this.MacAddress.GetHashCode();
                if (this.Networks != null)
                    hashCode = hashCode * 59 + this.Networks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
