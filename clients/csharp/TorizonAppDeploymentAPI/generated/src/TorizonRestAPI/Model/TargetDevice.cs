/* 
 * Torizon Deployment API
 *
 * Toradex Development API to build and deploy application on Torizon
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TorizonRestAPI.Client.OpenAPIDateConverter;

namespace TorizonRestAPI.Model
{
    /// <summary>
    /// TargetDevice
    /// </summary>
    [DataContract]
    public partial class TargetDevice :  IEquatable<TargetDevice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetDevice" /> class.
        /// </summary>
        /// <param name="name">Device mnemnonic name.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="username">username.</param>
        /// <param name="homefolder">homefolder.</param>
        public TargetDevice(string name = default(string), string hostname = default(string), string username = default(string), string homefolder = default(string))
        {
            this.Name = name;
            this.Hostname = hostname;
            this.Username = username;
            this.Homefolder = homefolder;
        }
        
        /// <summary>
        /// Unique serial number
        /// </summary>
        /// <value>Unique serial number</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Device mnemnonic name
        /// </summary>
        /// <value>Device mnemnonic name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Device hardware ID
        /// </summary>
        /// <value>Device hardware ID</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; private set; }

        /// <summary>
        /// Device hardware revision
        /// </summary>
        /// <value>Device hardware revision</value>
        [DataMember(Name="hwrev", EmitDefaultValue=false)]
        public string Hwrev { get; private set; }

        /// <summary>
        /// Kernel name
        /// </summary>
        /// <value>Kernel name</value>
        [DataMember(Name="kernelversion", EmitDefaultValue=false)]
        public string Kernelversion { get; private set; }

        /// <summary>
        /// Gets or Sets Kernelrelease
        /// </summary>
        [DataMember(Name="kernelrelease", EmitDefaultValue=false)]
        public string Kernelrelease { get; private set; }

        /// <summary>
        /// Gets or Sets Torizonversion
        /// </summary>
        [DataMember(Name="torizonversion", EmitDefaultValue=false)]
        public string Torizonversion { get; private set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Homefolder
        /// </summary>
        [DataMember(Name="homefolder", EmitDefaultValue=false)]
        public string Homefolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetDevice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Hwrev: ").Append(Hwrev).Append("\n");
            sb.Append("  Kernelversion: ").Append(Kernelversion).Append("\n");
            sb.Append("  Kernelrelease: ").Append(Kernelrelease).Append("\n");
            sb.Append("  Torizonversion: ").Append(Torizonversion).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Homefolder: ").Append(Homefolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetDevice);
        }

        /// <summary>
        /// Returns true if TargetDevice instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetDevice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Hwrev == input.Hwrev ||
                    (this.Hwrev != null &&
                    this.Hwrev.Equals(input.Hwrev))
                ) && 
                (
                    this.Kernelversion == input.Kernelversion ||
                    (this.Kernelversion != null &&
                    this.Kernelversion.Equals(input.Kernelversion))
                ) && 
                (
                    this.Kernelrelease == input.Kernelrelease ||
                    (this.Kernelrelease != null &&
                    this.Kernelrelease.Equals(input.Kernelrelease))
                ) && 
                (
                    this.Torizonversion == input.Torizonversion ||
                    (this.Torizonversion != null &&
                    this.Torizonversion.Equals(input.Torizonversion))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Homefolder == input.Homefolder ||
                    (this.Homefolder != null &&
                    this.Homefolder.Equals(input.Homefolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Hwrev != null)
                    hashCode = hashCode * 59 + this.Hwrev.GetHashCode();
                if (this.Kernelversion != null)
                    hashCode = hashCode * 59 + this.Kernelversion.GetHashCode();
                if (this.Kernelrelease != null)
                    hashCode = hashCode * 59 + this.Kernelrelease.GetHashCode();
                if (this.Torizonversion != null)
                    hashCode = hashCode * 59 + this.Torizonversion.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Homefolder != null)
                    hashCode = hashCode * 59 + this.Homefolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
