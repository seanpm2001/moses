/* 
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TorizonRestAPI.Client;
using TorizonRestAPI.Model;

namespace TorizonRestAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Builds a project using torizoncore-builder
        /// </summary>
        /// <remarks>
        /// This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <returns>Application</returns>
        Application ProjectBuild (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string));

        /// <summary>
        /// Builds a project using torizoncore-builder
        /// </summary>
        /// <remarks>
        /// This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ProjectBuildWithHttpInfo (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Builds a project using torizoncore-builder
        /// </summary>
        /// <remarks>
        /// This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ProjectBuildAsync (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Builds a project using torizoncore-builder
        /// </summary>
        /// <remarks>
        /// This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ProjectBuildWithHttpInfoAsync (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private TorizonRestAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(String basePath)
        {
            this.Configuration = new TorizonRestAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectApi()
        {
            this.Configuration = TorizonRestAPI.Client.Configuration.Default;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(TorizonRestAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TorizonRestAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TorizonRestAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TorizonRestAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Builds a project using torizoncore-builder This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <returns>Application</returns>
        public Application ProjectBuild (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string))
        {
             ApiResponse<Application> localVarResponse = ProjectBuildWithHttpInfo(projectPath, cleanBuild, generateInstallerImage, generateOtaUpdate, outputDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Builds a project using torizoncore-builder This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ProjectBuildWithHttpInfo (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string))
        {
            // verify the required parameter 'projectPath' is set
            if (projectPath == null)
                throw new ApiException(400, "Missing required parameter 'projectPath' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'cleanBuild' is set
            if (cleanBuild == null)
                throw new ApiException(400, "Missing required parameter 'cleanBuild' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'generateInstallerImage' is set
            if (generateInstallerImage == null)
                throw new ApiException(400, "Missing required parameter 'generateInstallerImage' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'generateOtaUpdate' is set
            if (generateOtaUpdate == null)
                throw new ApiException(400, "Missing required parameter 'generateOtaUpdate' when calling ProjectApi->ProjectBuild");

            var localVarPath = "/project/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_path", projectPath)); // query parameter
            if (cleanBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clean_build", cleanBuild)); // query parameter
            if (generateInstallerImage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_installer_image", generateInstallerImage)); // query parameter
            if (generateOtaUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_ota_update", generateOtaUpdate)); // query parameter
            if (outputDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_dir", outputDir)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Builds a project using torizoncore-builder This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ProjectBuildAsync (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await ProjectBuildWithHttpInfoAsync(projectPath, cleanBuild, generateInstallerImage, generateOtaUpdate, outputDir, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Builds a project using torizoncore-builder This operation can be used to build a project. The IDE backend will take care of running torizoncore-builder container.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPath"></param>
        /// <param name="cleanBuild"></param>
        /// <param name="generateInstallerImage"></param>
        /// <param name="generateOtaUpdate"></param>
        /// <param name="outputDir"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ProjectBuildWithHttpInfoAsync (string projectPath, bool cleanBuild, bool generateInstallerImage, bool generateOtaUpdate, string outputDir = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPath' is set
            if (projectPath == null)
                throw new ApiException(400, "Missing required parameter 'projectPath' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'cleanBuild' is set
            if (cleanBuild == null)
                throw new ApiException(400, "Missing required parameter 'cleanBuild' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'generateInstallerImage' is set
            if (generateInstallerImage == null)
                throw new ApiException(400, "Missing required parameter 'generateInstallerImage' when calling ProjectApi->ProjectBuild");
            // verify the required parameter 'generateOtaUpdate' is set
            if (generateOtaUpdate == null)
                throw new ApiException(400, "Missing required parameter 'generateOtaUpdate' when calling ProjectApi->ProjectBuild");

            var localVarPath = "/project/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_path", projectPath)); // query parameter
            if (cleanBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clean_build", cleanBuild)); // query parameter
            if (generateInstallerImage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_installer_image", generateInstallerImage)); // query parameter
            if (generateOtaUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_ota_update", generateOtaUpdate)); // query parameter
            if (outputDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_dir", outputDir)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

    }
}
