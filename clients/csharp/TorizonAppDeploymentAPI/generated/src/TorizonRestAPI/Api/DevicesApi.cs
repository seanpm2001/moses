/*
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.1.5
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TorizonRestAPI.Client;
using TorizonRestAPI.Model;

namespace TorizonRestAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return text lines from the container logs
        /// </summary>
        /// <remarks>
        /// Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>string</returns>
        string ContainerGetlogs (string deviceId, string containerId, bool? restart = default(bool?));

        /// <summary>
        /// Return text lines from the container logs
        /// </summary>
        /// <remarks>
        /// Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ContainerGetlogsWithHttpInfo (string deviceId, string containerId, bool? restart = default(bool?));
        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>MemInfo</returns>
        MemInfo ContainerGetmemory (string deviceId, string containerId);

        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of MemInfo</returns>
        ApiResponse<MemInfo> ContainerGetmemoryWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Return information about storage
        /// </summary>
        /// <remarks>
        /// Return a list of mount points available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        List<MountPoint> ContainerGetmountpoints (string deviceId, string containerId);

        /// <summary>
        /// Return information about storage
        /// </summary>
        /// <remarks>
        /// Return a list of mount points available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        ApiResponse<List<MountPoint>> ContainerGetmountpointsWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Get processes running in container
        /// </summary>
        /// <remarks>
        /// Return a list of processes running in the specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;Process&gt;</returns>
        List<Process> ContainerGetprocesses (string deviceId, string containerId);

        /// <summary>
        /// Get processes running in container
        /// </summary>
        /// <remarks>
        /// Return a list of processes running in the specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        ApiResponse<List<Process>> ContainerGetprocessesWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Starts container
        /// </summary>
        /// <remarks>
        /// Start a specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainerStart (string deviceId, string containerId);

        /// <summary>
        /// Starts container
        /// </summary>
        /// <remarks>
        /// Start a specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainerStartWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Stop container
        /// </summary>
        /// <remarks>
        /// Stop a specified container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainerStop (string deviceId, string containerId);

        /// <summary>
        /// Stop container
        /// </summary>
        /// <remarks>
        /// Stop a specified container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainerStopWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Delete a container
        /// </summary>
        /// <remarks>
        /// Stops and removes a container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns></returns>
        void ContainersDeletecontainer (string deviceId, string containerId);

        /// <summary>
        /// Delete a container
        /// </summary>
        /// <remarks>
        /// Stops and removes a container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContainersDeletecontainerWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Get information about a container
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainersGetcontainer (string deviceId, string containerId);

        /// <summary>
        /// Get information about a container
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainersGetcontainerWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Close SSH tunnel for docker API
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceClosedocker (string deviceId);

        /// <summary>
        /// Close SSH tunnel for docker API
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceClosedockerWithHttpInfo (string deviceId);
        /// <summary>
        /// Close SSH tunnel for shell
        /// </summary>
        /// <remarks>
        /// Stop exposing remote shell port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceClosessh (string deviceId);

        /// <summary>
        /// Close SSH tunnel for shell
        /// </summary>
        /// <remarks>
        /// Stop exposing remote shell port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceClosesshWithHttpInfo (string deviceId);
        /// <summary>
        /// Get current ip of the device
        /// </summary>
        /// <remarks>
        /// Return current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        string DeviceCurrentIp (string deviceId);

        /// <summary>
        /// Get current ip of the device
        /// </summary>
        /// <remarks>
        /// Return current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeviceCurrentIpWithHttpInfo (string deviceId);
        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// Permanently remove a device from the list of configured ones
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceDelete (string deviceId);

        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// Permanently remove a device from the list of configured ones
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceDeleteWithHttpInfo (string deviceId);
        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Return a specific configured device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceGet (string deviceId);

        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Return a specific configured device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceGetWithHttpInfo (string deviceId);
        /// <summary>
        /// List containers
        /// </summary>
        /// <remarks>
        /// Get a list of the containers on a specific device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerContainer&gt;</returns>
        List<DockerContainer> DeviceGetcontainers (string deviceId);

        /// <summary>
        /// List containers
        /// </summary>
        /// <remarks>
        /// Get a list of the containers on a specific device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerContainer&gt;</returns>
        ApiResponse<List<DockerContainer>> DeviceGetcontainersWithHttpInfo (string deviceId);
        /// <summary>
        /// Get local port for remote docker tunnel
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        int DeviceGetdockerport (string deviceId);

        /// <summary>
        /// Get local port for remote docker tunnel
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceGetdockerportWithHttpInfo (string deviceId);
        /// <summary>
        /// List container images on the device
        /// </summary>
        /// <remarks>
        /// Get list of all container images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerImage&gt;</returns>
        List<DockerImage> DeviceGetimages (string deviceId);

        /// <summary>
        /// List container images on the device
        /// </summary>
        /// <remarks>
        /// Get list of all container images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerImage&gt;</returns>
        ApiResponse<List<DockerImage>> DeviceGetimagesWithHttpInfo (string deviceId);
        /// <summary>
        /// Get device memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>MemInfo</returns>
        MemInfo DeviceGetmemory (string deviceId);

        /// <summary>
        /// Get device memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of MemInfo</returns>
        ApiResponse<MemInfo> DeviceGetmemoryWithHttpInfo (string deviceId);
        /// <summary>
        /// Get storage information for a device
        /// </summary>
        /// <remarks>
        /// Return a list with information about every mountpoint
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        List<MountPoint> DeviceGetmountpoints (string deviceId);

        /// <summary>
        /// Get storage information for a device
        /// </summary>
        /// <remarks>
        /// Return a list with information about every mountpoint
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        ApiResponse<List<MountPoint>> DeviceGetmountpointsWithHttpInfo (string deviceId);
        /// <summary>
        /// Return the path of the device private key
        /// </summary>
        /// <remarks>
        /// Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        string DeviceGetprivatekey (string deviceId);

        /// <summary>
        /// Return the path of the device private key
        /// </summary>
        /// <remarks>
        /// Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeviceGetprivatekeyWithHttpInfo (string deviceId);
        /// <summary>
        /// Get list of processes
        /// </summary>
        /// <remarks>
        /// Get list of processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;Process&gt;</returns>
        List<Process> DeviceGetprocesses (string deviceId);

        /// <summary>
        /// Get list of processes
        /// </summary>
        /// <remarks>
        /// Get list of processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        ApiResponse<List<Process>> DeviceGetprocessesWithHttpInfo (string deviceId);
        /// <summary>
        /// Get local port for shell
        /// </summary>
        /// <remarks>
        /// Get local port where remote shell is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        int DeviceGetsshport (string deviceId);

        /// <summary>
        /// Get local port for shell
        /// </summary>
        /// <remarks>
        /// Get local port where remote shell is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceGetsshportWithHttpInfo (string deviceId);
        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a configured device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceModify (string deviceId, TargetDevice device = default(TargetDevice));

        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a configured device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceModifyWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice));
        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost via SSH tunnel
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        int DeviceOpendocker (string deviceId, int? port = default(int?));

        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost via SSH tunnel
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceOpendockerWithHttpInfo (string deviceId, int? port = default(int?));
        /// <summary>
        /// Expose shell via SSH
        /// </summary>
        /// <remarks>
        /// Expose remote shell on local port via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        int DeviceOpenssh (string deviceId, int? port = default(int?));

        /// <summary>
        /// Expose shell via SSH
        /// </summary>
        /// <remarks>
        /// Expose remote shell on local port via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceOpensshWithHttpInfo (string deviceId, int? port = default(int?));
        /// <summary>
        /// Reboot the device
        /// </summary>
        /// <remarks>
        /// Perform a reboot on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns></returns>
        void DeviceReboot (string deviceId, string password);

        /// <summary>
        /// Reboot the device
        /// </summary>
        /// <remarks>
        /// Perform a reboot on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceRebootWithHttpInfo (string deviceId, string password);
        /// <summary>
        /// Shutdown the device
        /// </summary>
        /// <remarks>
        /// Perform a shutdown on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns></returns>
        void DeviceShutdown (string deviceId, string password);

        /// <summary>
        /// Shutdown the device
        /// </summary>
        /// <remarks>
        /// Perform a shutdown on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceShutdownWithHttpInfo (string deviceId, string password);
        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronize folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void DeviceSyncfolders (string deviceId, string sourcefolder, string destfolder, string progressId = default(string));

        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronize folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceSyncfoldersWithHttpInfo (string deviceId, string sourcefolder, string destfolder, string progressId = default(string));
        /// <summary>
        /// Update device information
        /// </summary>
        /// <remarks>
        /// Checks for updates on the remote device and return up-to-date information
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceUpdate (string deviceId);

        /// <summary>
        /// Update device information
        /// </summary>
        /// <remarks>
        /// Checks for updates on the remote device and return up-to-date information
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceUpdateWithHttpInfo (string deviceId);
        /// <summary>
        /// Validates a value for a parameter
        /// </summary>
        /// <remarks>
        /// Validates a parameter, allowing UI to report problems before applying it.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <returns>ValidationResult</returns>
        ValidationResult DeviceValidateParameter (string deviceId, string _parameter, string value);

        /// <summary>
        /// Validates a value for a parameter
        /// </summary>
        /// <remarks>
        /// Validates a parameter, allowing UI to report problems before applying it.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ValidationResult</returns>
        ApiResponse<ValidationResult> DeviceValidateParameterWithHttpInfo (string deviceId, string _parameter, string value);
        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TargetDevice&gt;</returns>
        List<TargetDevice> DevicesGet ();

        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TargetDevice&gt;</returns>
        ApiResponse<List<TargetDevice>> DevicesGetWithHttpInfo ();
        /// <summary>
        /// Detect a network device
        /// </summary>
        /// <remarks>
        /// Detect a device using its ip or hostname
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        TargetDevice DevicesNetworkdetect (string hostname, string username, string password);

        /// <summary>
        /// Detect a network device
        /// </summary>
        /// <remarks>
        /// Detect a device using its ip or hostname
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DevicesNetworkdetectWithHttpInfo (string hostname, string username, string password);
        /// <summary>
        /// Detect a serial device
        /// </summary>
        /// <remarks>
        /// Detect a device connected to a local serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        TargetDevice DevicesSerialdetect (string port, string username, string password);

        /// <summary>
        /// Detect a serial device
        /// </summary>
        /// <remarks>
        /// Detect a device connected to a local serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DevicesSerialdetectWithHttpInfo (string port, string username, string password);
        /// <summary>
        /// Delete a container image
        /// </summary>
        /// <remarks>
        /// Delete a specific container image from the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns></returns>
        void ImagesDeleteimage (string deviceId, string imageId);

        /// <summary>
        /// Delete a container image
        /// </summary>
        /// <remarks>
        /// Delete a specific container image from the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImagesDeleteimageWithHttpInfo (string deviceId, string imageId);
        /// <summary>
        /// Get information about an image
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container image stored on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>DockerImage</returns>
        DockerImage ImagesGetimage (string deviceId, string imageId);

        /// <summary>
        /// Get information about an image
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container image stored on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of DockerImage</returns>
        ApiResponse<DockerImage> ImagesGetimageWithHttpInfo (string deviceId, string imageId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return text lines from the container logs
        /// </summary>
        /// <remarks>
        /// Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ContainerGetlogsAsync (string deviceId, string containerId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return text lines from the container logs
        /// </summary>
        /// <remarks>
        /// Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ContainerGetlogsWithHttpInfoAsync (string deviceId, string containerId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MemInfo</returns>
        System.Threading.Tasks.Task<MemInfo> ContainerGetmemoryAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemInfo>> ContainerGetmemoryWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return information about storage
        /// </summary>
        /// <remarks>
        /// Return a list of mount points available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        System.Threading.Tasks.Task<List<MountPoint>> ContainerGetmountpointsAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return information about storage
        /// </summary>
        /// <remarks>
        /// Return a list of mount points available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> ContainerGetmountpointsWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get processes running in container
        /// </summary>
        /// <remarks>
        /// Return a list of processes running in the specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        System.Threading.Tasks.Task<List<Process>> ContainerGetprocessesAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get processes running in container
        /// </summary>
        /// <remarks>
        /// Return a list of processes running in the specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Process>>> ContainerGetprocessesWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Starts container
        /// </summary>
        /// <remarks>
        /// Start a specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainerStartAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts container
        /// </summary>
        /// <remarks>
        /// Start a specified container on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStartWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stop container
        /// </summary>
        /// <remarks>
        /// Stop a specified container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainerStopAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop container
        /// </summary>
        /// <remarks>
        /// Stop a specified container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStopWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a container
        /// </summary>
        /// <remarks>
        /// Stops and removes a container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContainersDeletecontainerAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a container
        /// </summary>
        /// <remarks>
        /// Stops and removes a container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContainersDeletecontainerWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get information about a container
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainersGetcontainerAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get information about a container
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container running on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainersGetcontainerWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Close SSH tunnel for docker API
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceClosedockerAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Close SSH tunnel for docker API
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosedockerWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Close SSH tunnel for shell
        /// </summary>
        /// <remarks>
        /// Stop exposing remote shell port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceClosesshAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Close SSH tunnel for shell
        /// </summary>
        /// <remarks>
        /// Stop exposing remote shell port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosesshWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get current ip of the device
        /// </summary>
        /// <remarks>
        /// Return current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeviceCurrentIpAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get current ip of the device
        /// </summary>
        /// <remarks>
        /// Return current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeviceCurrentIpWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// Permanently remove a device from the list of configured ones
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceDeleteAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// Permanently remove a device from the list of configured ones
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDeleteWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Return a specific configured device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceGetAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Return a specific configured device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceGetWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List containers
        /// </summary>
        /// <remarks>
        /// Get a list of the containers on a specific device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DockerContainer&gt;</returns>
        System.Threading.Tasks.Task<List<DockerContainer>> DeviceGetcontainersAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List containers
        /// </summary>
        /// <remarks>
        /// Get a list of the containers on a specific device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DockerContainer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DockerContainer>>> DeviceGetcontainersWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get local port for remote docker tunnel
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceGetdockerportAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get local port for remote docker tunnel
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetdockerportWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List container images on the device
        /// </summary>
        /// <remarks>
        /// Get list of all container images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DockerImage&gt;</returns>
        System.Threading.Tasks.Task<List<DockerImage>> DeviceGetimagesAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List container images on the device
        /// </summary>
        /// <remarks>
        /// Get list of all container images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DockerImage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DockerImage>>> DeviceGetimagesWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get device memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MemInfo</returns>
        System.Threading.Tasks.Task<MemInfo> DeviceGetmemoryAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get device memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemInfo>> DeviceGetmemoryWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get storage information for a device
        /// </summary>
        /// <remarks>
        /// Return a list with information about every mountpoint
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        System.Threading.Tasks.Task<List<MountPoint>> DeviceGetmountpointsAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get storage information for a device
        /// </summary>
        /// <remarks>
        /// Return a list with information about every mountpoint
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> DeviceGetmountpointsWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return the path of the device private key
        /// </summary>
        /// <remarks>
        /// Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeviceGetprivatekeyAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return the path of the device private key
        /// </summary>
        /// <remarks>
        /// Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeviceGetprivatekeyWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get list of processes
        /// </summary>
        /// <remarks>
        /// Get list of processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        System.Threading.Tasks.Task<List<Process>> DeviceGetprocessesAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of processes
        /// </summary>
        /// <remarks>
        /// Get list of processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Process>>> DeviceGetprocessesWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get local port for shell
        /// </summary>
        /// <remarks>
        /// Get local port where remote shell is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceGetsshportAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get local port for shell
        /// </summary>
        /// <remarks>
        /// Get local port where remote shell is tunneled via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetsshportWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a configured device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceModifyAsync (string deviceId, TargetDevice device = default(TargetDevice), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a configured device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceModifyWithHttpInfoAsync (string deviceId, TargetDevice device = default(TargetDevice), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost via SSH tunnel
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceOpendockerAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost via SSH tunnel
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpendockerWithHttpInfoAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Expose shell via SSH
        /// </summary>
        /// <remarks>
        /// Expose remote shell on local port via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceOpensshAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Expose shell via SSH
        /// </summary>
        /// <remarks>
        /// Expose remote shell on local port via SSH
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpensshWithHttpInfoAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reboot the device
        /// </summary>
        /// <remarks>
        /// Perform a reboot on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceRebootAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reboot the device
        /// </summary>
        /// <remarks>
        /// Perform a reboot on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceRebootWithHttpInfoAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Shutdown the device
        /// </summary>
        /// <remarks>
        /// Perform a shutdown on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceShutdownAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shutdown the device
        /// </summary>
        /// <remarks>
        /// Perform a shutdown on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceShutdownWithHttpInfoAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronize folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceSyncfoldersAsync (string deviceId, string sourcefolder, string destfolder, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronize folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceSyncfoldersWithHttpInfoAsync (string deviceId, string sourcefolder, string destfolder, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update device information
        /// </summary>
        /// <remarks>
        /// Checks for updates on the remote device and return up-to-date information
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceUpdateAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update device information
        /// </summary>
        /// <remarks>
        /// Checks for updates on the remote device and return up-to-date information
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceUpdateWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates a value for a parameter
        /// </summary>
        /// <remarks>
        /// Validates a parameter, allowing UI to report problems before applying it.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidationResult</returns>
        System.Threading.Tasks.Task<ValidationResult> DeviceValidateParameterAsync (string deviceId, string _parameter, string value, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates a value for a parameter
        /// </summary>
        /// <remarks>
        /// Validates a parameter, allowing UI to report problems before applying it.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResult>> DeviceValidateParameterWithHttpInfoAsync (string deviceId, string _parameter, string value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TargetDevice&gt;</returns>
        System.Threading.Tasks.Task<List<TargetDevice>> DevicesGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TargetDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TargetDevice>>> DevicesGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect a network device
        /// </summary>
        /// <remarks>
        /// Detect a device using its ip or hostname
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DevicesNetworkdetectAsync (string hostname, string username, string password, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detect a network device
        /// </summary>
        /// <remarks>
        /// Detect a device using its ip or hostname
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesNetworkdetectWithHttpInfoAsync (string hostname, string username, string password, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Detect a serial device
        /// </summary>
        /// <remarks>
        /// Detect a device connected to a local serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DevicesSerialdetectAsync (string port, string username, string password, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detect a serial device
        /// </summary>
        /// <remarks>
        /// Detect a device connected to a local serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesSerialdetectWithHttpInfoAsync (string port, string username, string password, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a container image
        /// </summary>
        /// <remarks>
        /// Delete a specific container image from the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImagesDeleteimageAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a container image
        /// </summary>
        /// <remarks>
        /// Delete a specific container image from the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImagesDeleteimageWithHttpInfoAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get information about an image
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container image stored on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerImage</returns>
        System.Threading.Tasks.Task<DockerImage> ImagesGetimageAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get information about an image
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container image stored on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerImage>> ImagesGetimageWithHttpInfoAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private TorizonRestAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(String basePath)
        {
            this.Configuration = new TorizonRestAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DevicesApi()
        {
            this.Configuration = TorizonRestAPI.Client.Configuration.Default;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(TorizonRestAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TorizonRestAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TorizonRestAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TorizonRestAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return text lines from the container logs Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>string</returns>
        public string ContainerGetlogs (string deviceId, string containerId, bool? restart = default(bool?))
        {
             ApiResponse<string> localVarResponse = ContainerGetlogsWithHttpInfo(deviceId, containerId, restart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return text lines from the container logs Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ContainerGetlogsWithHttpInfo (string deviceId, string containerId, bool? restart = default(bool?))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetlogs");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetlogs");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (restart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restart", restart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Return text lines from the container logs Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ContainerGetlogsAsync (string deviceId, string containerId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ContainerGetlogsWithHttpInfoAsync(deviceId, containerId, restart, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return text lines from the container logs Return one or more lines from the log, waiting until it&#39;s available, this will allow clients to show logs in almost real time
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ContainerGetlogsWithHttpInfoAsync (string deviceId, string containerId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetlogs");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetlogs");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (restart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restart", restart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetlogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>MemInfo</returns>
        public MemInfo ContainerGetmemory (string deviceId, string containerId)
        {
             ApiResponse<MemInfo> localVarResponse = ContainerGetmemoryWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of MemInfo</returns>
        public ApiResponse<MemInfo> ContainerGetmemoryWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmemory");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmemory");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MemInfo</returns>
        public async System.Threading.Tasks.Task<MemInfo> ContainerGetmemoryAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MemInfo> localVarResponse = await ContainerGetmemoryWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MemInfo>> ContainerGetmemoryWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmemory");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmemory");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Return information about storage Return a list of mount points available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        public List<MountPoint> ContainerGetmountpoints (string deviceId, string containerId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = ContainerGetmountpointsWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return information about storage Return a list of mount points available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        public ApiResponse<List<MountPoint>> ContainerGetmountpointsWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmountpoints");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmountpoints");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// Return information about storage Return a list of mount points available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<MountPoint>> ContainerGetmountpointsAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MountPoint>> localVarResponse = await ContainerGetmountpointsWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return information about storage Return a list of mount points available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> ContainerGetmountpointsWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmountpoints");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmountpoints");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// Get processes running in container Return a list of processes running in the specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;Process&gt;</returns>
        public List<Process> ContainerGetprocesses (string deviceId, string containerId)
        {
             ApiResponse<List<Process>> localVarResponse = ContainerGetprocessesWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get processes running in container Return a list of processes running in the specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        public ApiResponse<List<Process>> ContainerGetprocessesWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetprocesses");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetprocesses");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Get processes running in container Return a list of processes running in the specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        public async System.Threading.Tasks.Task<List<Process>> ContainerGetprocessesAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Process>> localVarResponse = await ContainerGetprocessesWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get processes running in container Return a list of processes running in the specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Process>>> ContainerGetprocessesWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetprocesses");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetprocesses");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Starts container Start a specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainerStart (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainerStartWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts container Start a specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainerStartWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStart");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStart");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Starts container Start a specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainerStartAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainerStartWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts container Start a specified container on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStartWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStart");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStart");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Stop container Stop a specified container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainerStop (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainerStopWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop container Stop a specified container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainerStopWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStop");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStop");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Stop container Stop a specified container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainerStopAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainerStopWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop container Stop a specified container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStopWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStop");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStop");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Delete a container Stops and removes a container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns></returns>
        public void ContainersDeletecontainer (string deviceId, string containerId)
        {
             ContainersDeletecontainerWithHttpInfo(deviceId, containerId);
        }

        /// <summary>
        /// Delete a container Stops and removes a container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContainersDeletecontainerWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersDeletecontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersDeletecontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersDeletecontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a container Stops and removes a container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContainersDeletecontainerAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ContainersDeletecontainerWithHttpInfoAsync(deviceId, containerId, cancellationToken);

        }

        /// <summary>
        /// Delete a container Stops and removes a container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainersDeletecontainerWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersDeletecontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersDeletecontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersDeletecontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get information about a container Get detailed information on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainersGetcontainer (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainersGetcontainerWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a container Get detailed information on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainersGetcontainerWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersGetcontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersGetcontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Get information about a container Get detailed information on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainersGetcontainerAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainersGetcontainerWithHttpInfoAsync(deviceId, containerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about a container Get detailed information on a specific container running on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainersGetcontainerWithHttpInfoAsync (string deviceId, string containerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersGetcontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersGetcontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Close SSH tunnel for docker API Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceClosedocker (string deviceId)
        {
             DeviceClosedockerWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Close SSH tunnel for docker API Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceClosedockerWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosedocker");

            var localVarPath = "/devices/{device_id}/docker/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosedocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Close SSH tunnel for docker API Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceClosedockerAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceClosedockerWithHttpInfoAsync(deviceId, cancellationToken);

        }

        /// <summary>
        /// Close SSH tunnel for docker API Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosedockerWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosedocker");

            var localVarPath = "/devices/{device_id}/docker/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosedocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Close SSH tunnel for shell Stop exposing remote shell port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceClosessh (string deviceId)
        {
             DeviceClosesshWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Close SSH tunnel for shell Stop exposing remote shell port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceClosesshWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosessh");

            var localVarPath = "/devices/{device_id}/ssh/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosessh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Close SSH tunnel for shell Stop exposing remote shell port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceClosesshAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceClosesshWithHttpInfoAsync(deviceId, cancellationToken);

        }

        /// <summary>
        /// Close SSH tunnel for shell Stop exposing remote shell port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosesshWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosessh");

            var localVarPath = "/devices/{device_id}/ssh/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosessh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get current ip of the device Return current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        public string DeviceCurrentIp (string deviceId)
        {
             ApiResponse<string> localVarResponse = DeviceCurrentIpWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current ip of the device Return current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DeviceCurrentIpWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCurrentIp");

            var localVarPath = "/devices/{device_id}/current_ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCurrentIp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get current ip of the device Return current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeviceCurrentIpAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await DeviceCurrentIpWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current ip of the device Return current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeviceCurrentIpWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCurrentIp");

            var localVarPath = "/devices/{device_id}/current_ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCurrentIp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove a device Permanently remove a device from the list of configured ones
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceDelete (string deviceId)
        {
             DeviceDeleteWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Remove a device Permanently remove a device from the list of configured ones
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceDeleteWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceDelete");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a device Permanently remove a device from the list of configured ones
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceDeleteAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceDeleteWithHttpInfoAsync(deviceId, cancellationToken);

        }

        /// <summary>
        /// Remove a device Permanently remove a device from the list of configured ones
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDeleteWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceDelete");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get device Return a specific configured device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceGet (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceGetWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get device Return a specific configured device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceGetWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGet");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Get device Return a specific configured device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceGetAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceGetWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get device Return a specific configured device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceGetWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGet");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// List containers Get a list of the containers on a specific device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerContainer&gt;</returns>
        public List<DockerContainer> DeviceGetcontainers (string deviceId)
        {
             ApiResponse<List<DockerContainer>> localVarResponse = DeviceGetcontainersWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List containers Get a list of the containers on a specific device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerContainer&gt;</returns>
        public ApiResponse<List<DockerContainer>> DeviceGetcontainersWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetcontainers");

            var localVarPath = "/devices/{device_id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetcontainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerContainer>)));
        }

        /// <summary>
        /// List containers Get a list of the containers on a specific device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DockerContainer&gt;</returns>
        public async System.Threading.Tasks.Task<List<DockerContainer>> DeviceGetcontainersAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DockerContainer>> localVarResponse = await DeviceGetcontainersWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List containers Get a list of the containers on a specific device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DockerContainer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DockerContainer>>> DeviceGetcontainersWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetcontainers");

            var localVarPath = "/devices/{device_id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetcontainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerContainer>)));
        }

        /// <summary>
        /// Get local port for remote docker tunnel Get local port where docker is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        public int DeviceGetdockerport (string deviceId)
        {
             ApiResponse<int> localVarResponse = DeviceGetdockerportWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get local port for remote docker tunnel Get local port where docker is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceGetdockerportWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetdockerport");

            var localVarPath = "/devices/{device_id}/docker/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetdockerport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Get local port for remote docker tunnel Get local port where docker is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceGetdockerportAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<int> localVarResponse = await DeviceGetdockerportWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get local port for remote docker tunnel Get local port where docker is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetdockerportWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetdockerport");

            var localVarPath = "/devices/{device_id}/docker/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetdockerport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// List container images on the device Get list of all container images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerImage&gt;</returns>
        public List<DockerImage> DeviceGetimages (string deviceId)
        {
             ApiResponse<List<DockerImage>> localVarResponse = DeviceGetimagesWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List container images on the device Get list of all container images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerImage&gt;</returns>
        public ApiResponse<List<DockerImage>> DeviceGetimagesWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetimages");

            var localVarPath = "/devices/{device_id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetimages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerImage>)));
        }

        /// <summary>
        /// List container images on the device Get list of all container images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DockerImage&gt;</returns>
        public async System.Threading.Tasks.Task<List<DockerImage>> DeviceGetimagesAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DockerImage>> localVarResponse = await DeviceGetimagesWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List container images on the device Get list of all container images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DockerImage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DockerImage>>> DeviceGetimagesWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetimages");

            var localVarPath = "/devices/{device_id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetimages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerImage>)));
        }

        /// <summary>
        /// Get device memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>MemInfo</returns>
        public MemInfo DeviceGetmemory (string deviceId)
        {
             ApiResponse<MemInfo> localVarResponse = DeviceGetmemoryWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get device memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of MemInfo</returns>
        public ApiResponse<MemInfo> DeviceGetmemoryWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmemory");

            var localVarPath = "/devices/{device_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Get device memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MemInfo</returns>
        public async System.Threading.Tasks.Task<MemInfo> DeviceGetmemoryAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MemInfo> localVarResponse = await DeviceGetmemoryWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get device memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MemInfo>> DeviceGetmemoryWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmemory");

            var localVarPath = "/devices/{device_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Get storage information for a device Return a list with information about every mountpoint
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        public List<MountPoint> DeviceGetmountpoints (string deviceId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = DeviceGetmountpointsWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get storage information for a device Return a list with information about every mountpoint
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        public ApiResponse<List<MountPoint>> DeviceGetmountpointsWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmountpoints");

            var localVarPath = "/devices/{device_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// Get storage information for a device Return a list with information about every mountpoint
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<MountPoint>> DeviceGetmountpointsAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MountPoint>> localVarResponse = await DeviceGetmountpointsWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get storage information for a device Return a list with information about every mountpoint
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> DeviceGetmountpointsWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmountpoints");

            var localVarPath = "/devices/{device_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// Return the path of the device private key Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        public string DeviceGetprivatekey (string deviceId)
        {
             ApiResponse<string> localVarResponse = DeviceGetprivatekeyWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the path of the device private key Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DeviceGetprivatekeyWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprivatekey");

            var localVarPath = "/devices/{device_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Return the path of the device private key Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeviceGetprivatekeyAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await DeviceGetprivatekeyWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the path of the device private key Returns the file containing the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeviceGetprivatekeyWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprivatekey");

            var localVarPath = "/devices/{device_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get list of processes Get list of processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;Process&gt;</returns>
        public List<Process> DeviceGetprocesses (string deviceId)
        {
             ApiResponse<List<Process>> localVarResponse = DeviceGetprocessesWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of processes Get list of processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        public ApiResponse<List<Process>> DeviceGetprocessesWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprocesses");

            var localVarPath = "/devices/{device_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Get list of processes Get list of processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        public async System.Threading.Tasks.Task<List<Process>> DeviceGetprocessesAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Process>> localVarResponse = await DeviceGetprocessesWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of processes Get list of processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Process>>> DeviceGetprocessesWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprocesses");

            var localVarPath = "/devices/{device_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Get local port for shell Get local port where remote shell is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        public int DeviceGetsshport (string deviceId)
        {
             ApiResponse<int> localVarResponse = DeviceGetsshportWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get local port for shell Get local port where remote shell is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceGetsshportWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetsshport");

            var localVarPath = "/devices/{device_id}/ssh/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetsshport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Get local port for shell Get local port where remote shell is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceGetsshportAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<int> localVarResponse = await DeviceGetsshportWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get local port for shell Get local port where remote shell is tunneled via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetsshportWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetsshport");

            var localVarPath = "/devices/{device_id}/ssh/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetsshport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Change device properties Changes specified properties on a configured device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceModify (string deviceId, TargetDevice device = default(TargetDevice))
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceModifyWithHttpInfo(deviceId, device);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change device properties Changes specified properties on a configured device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceModifyWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceModify");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Change device properties Changes specified properties on a configured device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceModifyAsync (string deviceId, TargetDevice device = default(TargetDevice), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceModifyWithHttpInfoAsync(deviceId, device, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change device properties Changes specified properties on a configured device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceModifyWithHttpInfoAsync (string deviceId, TargetDevice device = default(TargetDevice), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceModify");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost via SSH tunnel
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        public int DeviceOpendocker (string deviceId, int? port = default(int?))
        {
             ApiResponse<int> localVarResponse = DeviceOpendockerWithHttpInfo(deviceId, port);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost via SSH tunnel
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceOpendockerWithHttpInfo (string deviceId, int? port = default(int?))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpendocker");

            var localVarPath = "/devices/{device_id}/docker/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpendocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost via SSH tunnel
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceOpendockerAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<int> localVarResponse = await DeviceOpendockerWithHttpInfoAsync(deviceId, port, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost via SSH tunnel
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpendockerWithHttpInfoAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpendocker");

            var localVarPath = "/devices/{device_id}/docker/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpendocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose shell via SSH Expose remote shell on local port via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        public int DeviceOpenssh (string deviceId, int? port = default(int?))
        {
             ApiResponse<int> localVarResponse = DeviceOpensshWithHttpInfo(deviceId, port);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expose shell via SSH Expose remote shell on local port via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceOpensshWithHttpInfo (string deviceId, int? port = default(int?))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpenssh");

            var localVarPath = "/devices/{device_id}/ssh/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpenssh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose shell via SSH Expose remote shell on local port via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceOpensshAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<int> localVarResponse = await DeviceOpensshWithHttpInfoAsync(deviceId, port, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expose shell via SSH Expose remote shell on local port via SSH
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpensshWithHttpInfoAsync (string deviceId, int? port = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpenssh");

            var localVarPath = "/devices/{device_id}/ssh/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpenssh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Reboot the device Perform a reboot on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns></returns>
        public void DeviceReboot (string deviceId, string password)
        {
             DeviceRebootWithHttpInfo(deviceId, password);
        }

        /// <summary>
        /// Reboot the device Perform a reboot on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceRebootWithHttpInfo (string deviceId, string password)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceReboot");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DeviceReboot");

            var localVarPath = "/devices/{device_id}/reboot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceReboot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reboot the device Perform a reboot on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceRebootAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceRebootWithHttpInfoAsync(deviceId, password, cancellationToken);

        }

        /// <summary>
        /// Reboot the device Perform a reboot on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceRebootWithHttpInfoAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceReboot");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DeviceReboot");

            var localVarPath = "/devices/{device_id}/reboot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceReboot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shutdown the device Perform a shutdown on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns></returns>
        public void DeviceShutdown (string deviceId, string password)
        {
             DeviceShutdownWithHttpInfo(deviceId, password);
        }

        /// <summary>
        /// Shutdown the device Perform a shutdown on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceShutdownWithHttpInfo (string deviceId, string password)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceShutdown");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DeviceShutdown");

            var localVarPath = "/devices/{device_id}/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceShutdown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Shutdown the device Perform a shutdown on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceShutdownAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceShutdownWithHttpInfoAsync(deviceId, password, cancellationToken);

        }

        /// <summary>
        /// Shutdown the device Perform a shutdown on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceShutdownWithHttpInfoAsync (string deviceId, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceShutdown");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DeviceShutdown");

            var localVarPath = "/devices/{device_id}/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceShutdown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Synchronize folders Synchronize folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void DeviceSyncfolders (string deviceId, string sourcefolder, string destfolder, string progressId = default(string))
        {
             DeviceSyncfoldersWithHttpInfo(deviceId, sourcefolder, destfolder, progressId);
        }

        /// <summary>
        /// Synchronize folders Synchronize folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceSyncfoldersWithHttpInfo (string deviceId, string sourcefolder, string destfolder, string progressId = default(string))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling DevicesApi->DeviceSyncfolders");

            var localVarPath = "/devices/{device_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Synchronize folders Synchronize folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceSyncfoldersAsync (string deviceId, string sourcefolder, string destfolder, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeviceSyncfoldersWithHttpInfoAsync(deviceId, sourcefolder, destfolder, progressId, cancellationToken);

        }

        /// <summary>
        /// Synchronize folders Synchronize folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceSyncfoldersWithHttpInfoAsync (string deviceId, string sourcefolder, string destfolder, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling DevicesApi->DeviceSyncfolders");

            var localVarPath = "/devices/{device_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update device information Checks for updates on the remote device and return up-to-date information
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceUpdate (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceUpdateWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update device information Checks for updates on the remote device and return up-to-date information
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceUpdateWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceUpdate");

            var localVarPath = "/devices/{device_id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Update device information Checks for updates on the remote device and return up-to-date information
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceUpdateAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceUpdateWithHttpInfoAsync(deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update device information Checks for updates on the remote device and return up-to-date information
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceUpdateWithHttpInfoAsync (string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceUpdate");

            var localVarPath = "/devices/{device_id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Validates a value for a parameter Validates a parameter, allowing UI to report problems before applying it.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <returns>ValidationResult</returns>
        public ValidationResult DeviceValidateParameter (string deviceId, string _parameter, string value)
        {
             ApiResponse<ValidationResult> localVarResponse = DeviceValidateParameterWithHttpInfo(deviceId, _parameter, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates a value for a parameter Validates a parameter, allowing UI to report problems before applying it.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ValidationResult</returns>
        public ApiResponse<ValidationResult> DeviceValidateParameterWithHttpInfo (string deviceId, string _parameter, string value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceValidateParameter");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling DevicesApi->DeviceValidateParameter");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DevicesApi->DeviceValidateParameter");

            var localVarPath = "/devices/{device_id}/validate_parameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (_parameter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parameter", _parameter)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceValidateParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResult)));
        }

        /// <summary>
        /// Validates a value for a parameter Validates a parameter, allowing UI to report problems before applying it.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidationResult</returns>
        public async System.Threading.Tasks.Task<ValidationResult> DeviceValidateParameterAsync (string deviceId, string _parameter, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidationResult> localVarResponse = await DeviceValidateParameterWithHttpInfoAsync(deviceId, _parameter, value, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates a value for a parameter Validates a parameter, allowing UI to report problems before applying it.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="_parameter"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResult>> DeviceValidateParameterWithHttpInfoAsync (string deviceId, string _parameter, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceValidateParameter");
            // verify the required parameter '_parameter' is set
            if (_parameter == null)
                throw new ApiException(400, "Missing required parameter '_parameter' when calling DevicesApi->DeviceValidateParameter");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DevicesApi->DeviceValidateParameter");

            var localVarPath = "/devices/{device_id}/validate_parameter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (_parameter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parameter", _parameter)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceValidateParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResult)));
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TargetDevice&gt;</returns>
        public List<TargetDevice> DevicesGet ()
        {
             ApiResponse<List<TargetDevice>> localVarResponse = DevicesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TargetDevice&gt;</returns>
        public ApiResponse<List<TargetDevice>> DevicesGetWithHttpInfo ()
        {

            var localVarPath = "/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TargetDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TargetDevice>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TargetDevice>)));
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TargetDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<TargetDevice>> DevicesGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TargetDevice>> localVarResponse = await DevicesGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TargetDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TargetDevice>>> DevicesGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TargetDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TargetDevice>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TargetDevice>)));
        }

        /// <summary>
        /// Detect a network device Detect a device using its ip or hostname
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DevicesNetworkdetect (string hostname, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = DevicesNetworkdetectWithHttpInfo(hostname, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect a network device Detect a device using its ip or hostname
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DevicesNetworkdetectWithHttpInfo (string hostname, string username, string password)
        {
            // verify the required parameter 'hostname' is set
            if (hostname == null)
                throw new ApiException(400, "Missing required parameter 'hostname' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesNetworkdetect");

            var localVarPath = "/devices/network_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesNetworkdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Detect a network device Detect a device using its ip or hostname
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DevicesNetworkdetectAsync (string hostname, string username, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TargetDevice> localVarResponse = await DevicesNetworkdetectWithHttpInfoAsync(hostname, username, password, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect a network device Detect a device using its ip or hostname
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesNetworkdetectWithHttpInfoAsync (string hostname, string username, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'hostname' is set
            if (hostname == null)
                throw new ApiException(400, "Missing required parameter 'hostname' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesNetworkdetect");

            var localVarPath = "/devices/network_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesNetworkdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Detect a serial device Detect a device connected to a local serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DevicesSerialdetect (string port, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = DevicesSerialdetectWithHttpInfo(port, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect a serial device Detect a device connected to a local serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DevicesSerialdetectWithHttpInfo (string port, string username, string password)
        {
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesSerialdetect");

            var localVarPath = "/devices/serial_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesSerialdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Detect a serial device Detect a device connected to a local serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DevicesSerialdetectAsync (string port, string username, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TargetDevice> localVarResponse = await DevicesSerialdetectWithHttpInfoAsync(port, username, password, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect a serial device Detect a device connected to a local serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesSerialdetectWithHttpInfoAsync (string port, string username, string password, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesSerialdetect");

            var localVarPath = "/devices/serial_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesSerialdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Delete a container image Delete a specific container image from the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns></returns>
        public void ImagesDeleteimage (string deviceId, string imageId)
        {
             ImagesDeleteimageWithHttpInfo(deviceId, imageId);
        }

        /// <summary>
        /// Delete a container image Delete a specific container image from the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImagesDeleteimageWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesDeleteimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesDeleteimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesDeleteimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a container image Delete a specific container image from the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImagesDeleteimageAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ImagesDeleteimageWithHttpInfoAsync(deviceId, imageId, cancellationToken);

        }

        /// <summary>
        /// Delete a container image Delete a specific container image from the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImagesDeleteimageWithHttpInfoAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesDeleteimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesDeleteimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesDeleteimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get information about an image Get detailed information on a specific container image stored on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>DockerImage</returns>
        public DockerImage ImagesGetimage (string deviceId, string imageId)
        {
             ApiResponse<DockerImage> localVarResponse = ImagesGetimageWithHttpInfo(deviceId, imageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about an image Get detailed information on a specific container image stored on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of DockerImage</returns>
        public ApiResponse<DockerImage> ImagesGetimageWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesGetimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesGetimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesGetimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerImage)));
        }

        /// <summary>
        /// Get information about an image Get detailed information on a specific container image stored on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerImage</returns>
        public async System.Threading.Tasks.Task<DockerImage> ImagesGetimageAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerImage> localVarResponse = await ImagesGetimageWithHttpInfoAsync(deviceId, imageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about an image Get detailed information on a specific container image stored on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerImage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerImage>> ImagesGetimageWithHttpInfoAsync (string deviceId, string imageId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesGetimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesGetimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesGetimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerImage)));
        }

    }
}
