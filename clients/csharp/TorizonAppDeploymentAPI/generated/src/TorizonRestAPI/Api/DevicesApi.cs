/* 
 * Torizon Deployment API
 *
 * Toradex Development API to build and deploy application on Torizon
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TorizonRestAPI.Client;
using TorizonRestAPI.Model;

namespace TorizonRestAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>MemInfo</returns>
        MemInfo ContainerGetmemory (string deviceId, string containerId);

        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of MemInfo</returns>
        ApiResponse<MemInfo> ContainerGetmemoryWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// return information about storage
        /// </summary>
        /// <remarks>
        /// returns a list of storages available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        List<MountPoint> ContainerGetmountpoints (string deviceId, string containerId);

        /// <summary>
        /// return information about storage
        /// </summary>
        /// <remarks>
        /// returns a list of storages available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        ApiResponse<List<MountPoint>> ContainerGetmountpointsWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// return processes running in container
        /// </summary>
        /// <remarks>
        /// returns a list of processes running in the specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;Process&gt;</returns>
        List<Process> ContainerGetprocesses (string deviceId, string containerId);

        /// <summary>
        /// return processes running in container
        /// </summary>
        /// <remarks>
        /// returns a list of processes running in the specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        ApiResponse<List<Process>> ContainerGetprocessesWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// starts container
        /// </summary>
        /// <remarks>
        /// Start specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainerStart (string deviceId, string containerId);

        /// <summary>
        /// starts container
        /// </summary>
        /// <remarks>
        /// Start specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainerStartWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// stops container
        /// </summary>
        /// <remarks>
        /// Stops specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainerStop (string deviceId, string containerId);

        /// <summary>
        /// stops container
        /// </summary>
        /// <remarks>
        /// Stops specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainerStopWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// delete a container
        /// </summary>
        /// <remarks>
        /// Executes rm command on container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns></returns>
        void ContainersDeletecontainer (string deviceId, string containerId);

        /// <summary>
        /// delete a container
        /// </summary>
        /// <remarks>
        /// Executes rm command on container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContainersDeletecontainerWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// get container details
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ContainersGetcontainer (string deviceId, string containerId);

        /// <summary>
        /// get container details
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ContainersGetcontainerWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Disables remote docker
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceClosedocker (string deviceId);

        /// <summary>
        /// Disables remote docker
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceClosedockerWithHttpInfo (string deviceId);
        /// <summary>
        /// Disables ssh tunneling
        /// </summary>
        /// <remarks>
        /// Stop exposing remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceClosessh (string deviceId);

        /// <summary>
        /// Disables ssh tunneling
        /// </summary>
        /// <remarks>
        /// Stop exposing remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceClosesshWithHttpInfo (string deviceId);
        /// <summary>
        /// returns current ip of the device
        /// </summary>
        /// <remarks>
        /// Returns current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        string DeviceCurrentIp (string deviceId);

        /// <summary>
        /// returns current ip of the device
        /// </summary>
        /// <remarks>
        /// Returns current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeviceCurrentIpWithHttpInfo (string deviceId);
        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void DeviceDelete (string deviceId);

        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceDeleteWithHttpInfo (string deviceId);
        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceGet (string deviceId);

        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceGetWithHttpInfo (string deviceId);
        /// <summary>
        /// list containers
        /// </summary>
        /// <remarks>
        /// Get containers running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerContainer&gt;</returns>
        List<DockerContainer> DeviceGetcontainers (string deviceId);

        /// <summary>
        /// list containers
        /// </summary>
        /// <remarks>
        /// Get containers running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerContainer&gt;</returns>
        ApiResponse<List<DockerContainer>> DeviceGetcontainersWithHttpInfo (string deviceId);
        /// <summary>
        /// remote docker local port
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        int DeviceGetdockerport (string deviceId);

        /// <summary>
        /// remote docker local port
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceGetdockerportWithHttpInfo (string deviceId);
        /// <summary>
        /// list images
        /// </summary>
        /// <remarks>
        /// Get images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerImage&gt;</returns>
        List<DockerImage> DeviceGetimages (string deviceId);

        /// <summary>
        /// list images
        /// </summary>
        /// <remarks>
        /// Get images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerImage&gt;</returns>
        ApiResponse<List<DockerImage>> DeviceGetimagesWithHttpInfo (string deviceId);
        /// <summary>
        /// Return memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>MemInfo</returns>
        MemInfo DeviceGetmemory (string deviceId);

        /// <summary>
        /// Return memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of MemInfo</returns>
        ApiResponse<MemInfo> DeviceGetmemoryWithHttpInfo (string deviceId);
        /// <summary>
        /// return storage information for a device
        /// </summary>
        /// <remarks>
        /// Get a list of storages for the specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        List<MountPoint> DeviceGetmountpoints (string deviceId);

        /// <summary>
        /// return storage information for a device
        /// </summary>
        /// <remarks>
        /// Get a list of storages for the specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        ApiResponse<List<MountPoint>> DeviceGetmountpointsWithHttpInfo (string deviceId);
        /// <summary>
        /// return the path of the device private key
        /// </summary>
        /// <remarks>
        /// returns the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        string DeviceGetprivatekey (string deviceId);

        /// <summary>
        /// return the path of the device private key
        /// </summary>
        /// <remarks>
        /// returns the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeviceGetprivatekeyWithHttpInfo (string deviceId);
        /// <summary>
        /// list running processes on a device
        /// </summary>
        /// <remarks>
        /// Get processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;Process&gt;</returns>
        List<Process> DeviceGetprocesses (string deviceId);

        /// <summary>
        /// list running processes on a device
        /// </summary>
        /// <remarks>
        /// Get processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        ApiResponse<List<Process>> DeviceGetprocessesWithHttpInfo (string deviceId);
        /// <summary>
        /// remote ssh local port
        /// </summary>
        /// <remarks>
        /// Get local port where ssh is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        int DeviceGetsshport (string deviceId);

        /// <summary>
        /// remote ssh local port
        /// </summary>
        /// <remarks>
        /// Get local port where ssh is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceGetsshportWithHttpInfo (string deviceId);
        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceModify (string deviceId, TargetDevice device = default(TargetDevice));

        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceModifyWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice));
        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        int DeviceOpendocker (string deviceId, int port = default(int));

        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceOpendockerWithHttpInfo (string deviceId, int port = default(int));
        /// <summary>
        /// Expose remote ssh
        /// </summary>
        /// <remarks>
        /// Expose remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        int DeviceOpenssh (string deviceId, int port = default(int));

        /// <summary>
        /// Expose remote ssh
        /// </summary>
        /// <remarks>
        /// Expose remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> DeviceOpensshWithHttpInfo (string deviceId, int port = default(int));
        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns></returns>
        void DeviceSyncfolders (string deviceId, string sourcefolder, string destfolder);

        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceSyncfoldersWithHttpInfo (string deviceId, string sourcefolder, string destfolder);
        /// <summary>
        /// update information for a specific device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, with updated info if available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        TargetDevice DeviceUpdate (string deviceId);

        /// <summary>
        /// update information for a specific device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, with updated info if available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DeviceUpdateWithHttpInfo (string deviceId);
        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TargetDevice&gt;</returns>
        List<TargetDevice> DevicesGet ();

        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TargetDevice&gt;</returns>
        ApiResponse<List<TargetDevice>> DevicesGetWithHttpInfo ();
        /// <summary>
        /// Finds a network device
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from network
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        TargetDevice DevicesNetworkdetect (string hostname, string username, string password);

        /// <summary>
        /// Finds a network device
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from network
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DevicesNetworkdetectWithHttpInfo (string hostname, string username, string password);
        /// <summary>
        /// Finds a device connected to serial port
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        TargetDevice DevicesSerialdetect (string port, string username, string password);

        /// <summary>
        /// Finds a device connected to serial port
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        ApiResponse<TargetDevice> DevicesSerialdetectWithHttpInfo (string port, string username, string password);
        /// <summary>
        /// delete an image
        /// </summary>
        /// <remarks>
        /// Executes rmi command on and image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns></returns>
        void ImagesDeleteimage (string deviceId, string imageId);

        /// <summary>
        /// delete an image
        /// </summary>
        /// <remarks>
        /// Executes rmi command on and image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImagesDeleteimageWithHttpInfo (string deviceId, string imageId);
        /// <summary>
        /// get image details
        /// </summary>
        /// <remarks>
        /// Get detailed information on an image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>DockerImage</returns>
        DockerImage ImagesGetimage (string deviceId, string imageId);

        /// <summary>
        /// get image details
        /// </summary>
        /// <remarks>
        /// Get detailed information on an image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of DockerImage</returns>
        ApiResponse<DockerImage> ImagesGetimageWithHttpInfo (string deviceId, string imageId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of MemInfo</returns>
        System.Threading.Tasks.Task<MemInfo> ContainerGetmemoryAsync (string deviceId, string containerId);

        /// <summary>
        /// Return container memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemInfo>> ContainerGetmemoryAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// return information about storage
        /// </summary>
        /// <remarks>
        /// returns a list of storages available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        System.Threading.Tasks.Task<List<MountPoint>> ContainerGetmountpointsAsync (string deviceId, string containerId);

        /// <summary>
        /// return information about storage
        /// </summary>
        /// <remarks>
        /// returns a list of storages available inside the container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> ContainerGetmountpointsAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// return processes running in container
        /// </summary>
        /// <remarks>
        /// returns a list of processes running in the specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        System.Threading.Tasks.Task<List<Process>> ContainerGetprocessesAsync (string deviceId, string containerId);

        /// <summary>
        /// return processes running in container
        /// </summary>
        /// <remarks>
        /// returns a list of processes running in the specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Process>>> ContainerGetprocessesAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// starts container
        /// </summary>
        /// <remarks>
        /// Start specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainerStartAsync (string deviceId, string containerId);

        /// <summary>
        /// starts container
        /// </summary>
        /// <remarks>
        /// Start specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStartAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// stops container
        /// </summary>
        /// <remarks>
        /// Stops specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainerStopAsync (string deviceId, string containerId);

        /// <summary>
        /// stops container
        /// </summary>
        /// <remarks>
        /// Stops specified container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStopAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// delete a container
        /// </summary>
        /// <remarks>
        /// Executes rm command on container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContainersDeletecontainerAsync (string deviceId, string containerId);

        /// <summary>
        /// delete a container
        /// </summary>
        /// <remarks>
        /// Executes rm command on container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContainersDeletecontainerAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// get container details
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ContainersGetcontainerAsync (string deviceId, string containerId);

        /// <summary>
        /// get container details
        /// </summary>
        /// <remarks>
        /// Get detailed information on a specific container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainersGetcontainerAsyncWithHttpInfo (string deviceId, string containerId);
        /// <summary>
        /// Disables remote docker
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceClosedockerAsync (string deviceId);

        /// <summary>
        /// Disables remote docker
        /// </summary>
        /// <remarks>
        /// Stop exposing remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosedockerAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Disables ssh tunneling
        /// </summary>
        /// <remarks>
        /// Stop exposing remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceClosesshAsync (string deviceId);

        /// <summary>
        /// Disables ssh tunneling
        /// </summary>
        /// <remarks>
        /// Stop exposing remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosesshAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// returns current ip of the device
        /// </summary>
        /// <remarks>
        /// Returns current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeviceCurrentIpAsync (string deviceId);

        /// <summary>
        /// returns current ip of the device
        /// </summary>
        /// <remarks>
        /// Returns current ip of the device using local DNS and mDNS
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeviceCurrentIpAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceDeleteAsync (string deviceId);

        /// <summary>
        /// Remove a device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDeleteAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceGetAsync (string deviceId);

        /// <summary>
        /// Get device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceGetAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// list containers
        /// </summary>
        /// <remarks>
        /// Get containers running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;DockerContainer&gt;</returns>
        System.Threading.Tasks.Task<List<DockerContainer>> DeviceGetcontainersAsync (string deviceId);

        /// <summary>
        /// list containers
        /// </summary>
        /// <remarks>
        /// Get containers running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;DockerContainer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DockerContainer>>> DeviceGetcontainersAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// remote docker local port
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceGetdockerportAsync (string deviceId);

        /// <summary>
        /// remote docker local port
        /// </summary>
        /// <remarks>
        /// Get local port where docker is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetdockerportAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// list images
        /// </summary>
        /// <remarks>
        /// Get images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;DockerImage&gt;</returns>
        System.Threading.Tasks.Task<List<DockerImage>> DeviceGetimagesAsync (string deviceId);

        /// <summary>
        /// list images
        /// </summary>
        /// <remarks>
        /// Get images available on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;DockerImage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DockerImage>>> DeviceGetimagesAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Return memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of MemInfo</returns>
        System.Threading.Tasks.Task<MemInfo> DeviceGetmemoryAsync (string deviceId);

        /// <summary>
        /// Return memory information
        /// </summary>
        /// <remarks>
        /// Return total/free/available memory on the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemInfo>> DeviceGetmemoryAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// return storage information for a device
        /// </summary>
        /// <remarks>
        /// Get a list of storages for the specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        System.Threading.Tasks.Task<List<MountPoint>> DeviceGetmountpointsAsync (string deviceId);

        /// <summary>
        /// return storage information for a device
        /// </summary>
        /// <remarks>
        /// Get a list of storages for the specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> DeviceGetmountpointsAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// return the path of the device private key
        /// </summary>
        /// <remarks>
        /// returns the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeviceGetprivatekeyAsync (string deviceId);

        /// <summary>
        /// return the path of the device private key
        /// </summary>
        /// <remarks>
        /// returns the key that can be used to activate passowordless connections to the device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeviceGetprivatekeyAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// list running processes on a device
        /// </summary>
        /// <remarks>
        /// Get processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        System.Threading.Tasks.Task<List<Process>> DeviceGetprocessesAsync (string deviceId);

        /// <summary>
        /// list running processes on a device
        /// </summary>
        /// <remarks>
        /// Get processes running on a specified device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Process>>> DeviceGetprocessesAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// remote ssh local port
        /// </summary>
        /// <remarks>
        /// Get local port where ssh is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceGetsshportAsync (string deviceId);

        /// <summary>
        /// remote ssh local port
        /// </summary>
        /// <remarks>
        /// Get local port where ssh is tunneled
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetsshportAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceModifyAsync (string deviceId, TargetDevice device = default(TargetDevice));

        /// <summary>
        /// Change device properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on a device
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceModifyAsyncWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice));
        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceOpendockerAsync (string deviceId, int port = default(int));

        /// <summary>
        /// Expose remote docker
        /// </summary>
        /// <remarks>
        /// Expose remote docker port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpendockerAsyncWithHttpInfo (string deviceId, int port = default(int));
        /// <summary>
        /// Expose remote ssh
        /// </summary>
        /// <remarks>
        /// Expose remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> DeviceOpensshAsync (string deviceId, int port = default(int));

        /// <summary>
        /// Expose remote ssh
        /// </summary>
        /// <remarks>
        /// Expose remote ssh port on localhost
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpensshAsyncWithHttpInfo (string deviceId, int port = default(int));
        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceSyncfoldersAsync (string deviceId, string sourcefolder, string destfolder);

        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host and target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceSyncfoldersAsyncWithHttpInfo (string deviceId, string sourcefolder, string destfolder);
        /// <summary>
        /// update information for a specific device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, with updated info if available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DeviceUpdateAsync (string deviceId);

        /// <summary>
        /// update information for a specific device
        /// </summary>
        /// <remarks>
        /// Returns a specified device, with updated info if available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceUpdateAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TargetDevice&gt;</returns>
        System.Threading.Tasks.Task<List<TargetDevice>> DevicesGetAsync ();

        /// <summary>
        /// Get all devices
        /// </summary>
        /// <remarks>
        /// Returns all configured devices
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TargetDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TargetDevice>>> DevicesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Finds a network device
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from network
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DevicesNetworkdetectAsync (string hostname, string username, string password);

        /// <summary>
        /// Finds a network device
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from network
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesNetworkdetectAsyncWithHttpInfo (string hostname, string username, string password);
        /// <summary>
        /// Finds a device connected to serial port
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of TargetDevice</returns>
        System.Threading.Tasks.Task<TargetDevice> DevicesSerialdetectAsync (string port, string username, string password);

        /// <summary>
        /// Finds a device connected to serial port
        /// </summary>
        /// <remarks>
        /// Returns a new device detected from serial port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesSerialdetectAsyncWithHttpInfo (string port, string username, string password);
        /// <summary>
        /// delete an image
        /// </summary>
        /// <remarks>
        /// Executes rmi command on and image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImagesDeleteimageAsync (string deviceId, string imageId);

        /// <summary>
        /// delete an image
        /// </summary>
        /// <remarks>
        /// Executes rmi command on and image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImagesDeleteimageAsyncWithHttpInfo (string deviceId, string imageId);
        /// <summary>
        /// get image details
        /// </summary>
        /// <remarks>
        /// Get detailed information on an image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of DockerImage</returns>
        System.Threading.Tasks.Task<DockerImage> ImagesGetimageAsync (string deviceId, string imageId);

        /// <summary>
        /// get image details
        /// </summary>
        /// <remarks>
        /// Get detailed information on an image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of ApiResponse (DockerImage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerImage>> ImagesGetimageAsyncWithHttpInfo (string deviceId, string imageId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private TorizonRestAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(String basePath)
        {
            this.Configuration = new TorizonRestAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DevicesApi()
        {
            this.Configuration = TorizonRestAPI.Client.Configuration.Default;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(TorizonRestAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TorizonRestAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TorizonRestAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TorizonRestAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>MemInfo</returns>
        public MemInfo ContainerGetmemory (string deviceId, string containerId)
        {
             ApiResponse<MemInfo> localVarResponse = ContainerGetmemoryWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of MemInfo</returns>
        public ApiResponse<MemInfo> ContainerGetmemoryWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmemory");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmemory");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of MemInfo</returns>
        public async System.Threading.Tasks.Task<MemInfo> ContainerGetmemoryAsync (string deviceId, string containerId)
        {
             ApiResponse<MemInfo> localVarResponse = await ContainerGetmemoryAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return container memory information Return total/free/available memory on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MemInfo>> ContainerGetmemoryAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmemory");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmemory");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// return information about storage returns a list of storages available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        public List<MountPoint> ContainerGetmountpoints (string deviceId, string containerId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = ContainerGetmountpointsWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// return information about storage returns a list of storages available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        public ApiResponse<List<MountPoint>> ContainerGetmountpointsWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmountpoints");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmountpoints");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// return information about storage returns a list of storages available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<MountPoint>> ContainerGetmountpointsAsync (string deviceId, string containerId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = await ContainerGetmountpointsAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// return information about storage returns a list of storages available inside the container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> ContainerGetmountpointsAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetmountpoints");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetmountpoints");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// return processes running in container returns a list of processes running in the specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>List&lt;Process&gt;</returns>
        public List<Process> ContainerGetprocesses (string deviceId, string containerId)
        {
             ApiResponse<List<Process>> localVarResponse = ContainerGetprocessesWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// return processes running in container returns a list of processes running in the specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        public ApiResponse<List<Process>> ContainerGetprocessesWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetprocesses");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetprocesses");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// return processes running in container returns a list of processes running in the specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        public async System.Threading.Tasks.Task<List<Process>> ContainerGetprocessesAsync (string deviceId, string containerId)
        {
             ApiResponse<List<Process>> localVarResponse = await ContainerGetprocessesAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// return processes running in container returns a list of processes running in the specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Process>>> ContainerGetprocessesAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerGetprocesses");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerGetprocesses");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// starts container Start specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainerStart (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainerStartWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// starts container Start specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainerStartWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStart");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStart");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// starts container Start specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainerStartAsync (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainerStartAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// starts container Start specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStartAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStart");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStart");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// stops container Stops specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainerStop (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainerStopWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// stops container Stops specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainerStopWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStop");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStop");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// stops container Stops specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainerStopAsync (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainerStopAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// stops container Stops specified container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainerStopAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainerStop");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainerStop");

            var localVarPath = "/devices/{device_id}/containers/{container_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// delete a container Executes rm command on container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns></returns>
        public void ContainersDeletecontainer (string deviceId, string containerId)
        {
             ContainersDeletecontainerWithHttpInfo(deviceId, containerId);
        }

        /// <summary>
        /// delete a container Executes rm command on container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContainersDeletecontainerWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersDeletecontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersDeletecontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersDeletecontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete a container Executes rm command on container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContainersDeletecontainerAsync (string deviceId, string containerId)
        {
             await ContainersDeletecontainerAsyncWithHttpInfo(deviceId, containerId);

        }

        /// <summary>
        /// delete a container Executes rm command on container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainersDeletecontainerAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersDeletecontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersDeletecontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersDeletecontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get container details Get detailed information on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ContainersGetcontainer (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = ContainersGetcontainerWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get container details Get detailed information on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ContainersGetcontainerWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersGetcontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersGetcontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// get container details Get detailed information on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ContainersGetcontainerAsync (string deviceId, string containerId)
        {
             ApiResponse<DockerContainer> localVarResponse = await ContainersGetcontainerAsyncWithHttpInfo(deviceId, containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get container details Get detailed information on a specific container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="containerId">Id of a container</param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ContainersGetcontainerAsyncWithHttpInfo (string deviceId, string containerId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ContainersGetcontainer");
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DevicesApi->ContainersGetcontainer");

            var localVarPath = "/devices/{device_id}/containers/{container_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (containerId != null) localVarPathParams.Add("container_id", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContainersGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Disables remote docker Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceClosedocker (string deviceId)
        {
             DeviceClosedockerWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Disables remote docker Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceClosedockerWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosedocker");

            var localVarPath = "/devices/{device_id}/docker/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosedocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Disables remote docker Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceClosedockerAsync (string deviceId)
        {
             await DeviceClosedockerAsyncWithHttpInfo(deviceId);

        }

        /// <summary>
        /// Disables remote docker Stop exposing remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosedockerAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosedocker");

            var localVarPath = "/devices/{device_id}/docker/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosedocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Disables ssh tunneling Stop exposing remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceClosessh (string deviceId)
        {
             DeviceClosesshWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Disables ssh tunneling Stop exposing remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceClosesshWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosessh");

            var localVarPath = "/devices/{device_id}/ssh/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosessh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Disables ssh tunneling Stop exposing remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceClosesshAsync (string deviceId)
        {
             await DeviceClosesshAsyncWithHttpInfo(deviceId);

        }

        /// <summary>
        /// Disables ssh tunneling Stop exposing remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceClosesshAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceClosessh");

            var localVarPath = "/devices/{device_id}/ssh/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceClosessh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// returns current ip of the device Returns current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        public string DeviceCurrentIp (string deviceId)
        {
             ApiResponse<string> localVarResponse = DeviceCurrentIpWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns current ip of the device Returns current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DeviceCurrentIpWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCurrentIp");

            var localVarPath = "/devices/{device_id}/current_ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCurrentIp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// returns current ip of the device Returns current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeviceCurrentIpAsync (string deviceId)
        {
             ApiResponse<string> localVarResponse = await DeviceCurrentIpAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns current ip of the device Returns current ip of the device using local DNS and mDNS
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeviceCurrentIpAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCurrentIp");

            var localVarPath = "/devices/{device_id}/current_ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCurrentIp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove a device 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void DeviceDelete (string deviceId)
        {
             DeviceDeleteWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Remove a device 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceDeleteWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceDelete");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a device 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceDeleteAsync (string deviceId)
        {
             await DeviceDeleteAsyncWithHttpInfo(deviceId);

        }

        /// <summary>
        /// Remove a device 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDeleteAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceDelete");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get device Returns a specified device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceGet (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceGetWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get device Returns a specified device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceGetWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGet");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Get device Returns a specified device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceGetAsync (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceGetAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get device Returns a specified device, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceGetAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGet");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// list containers Get containers running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerContainer&gt;</returns>
        public List<DockerContainer> DeviceGetcontainers (string deviceId)
        {
             ApiResponse<List<DockerContainer>> localVarResponse = DeviceGetcontainersWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list containers Get containers running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerContainer&gt;</returns>
        public ApiResponse<List<DockerContainer>> DeviceGetcontainersWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetcontainers");

            var localVarPath = "/devices/{device_id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetcontainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerContainer>)));
        }

        /// <summary>
        /// list containers Get containers running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;DockerContainer&gt;</returns>
        public async System.Threading.Tasks.Task<List<DockerContainer>> DeviceGetcontainersAsync (string deviceId)
        {
             ApiResponse<List<DockerContainer>> localVarResponse = await DeviceGetcontainersAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list containers Get containers running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;DockerContainer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DockerContainer>>> DeviceGetcontainersAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetcontainers");

            var localVarPath = "/devices/{device_id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetcontainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerContainer>)));
        }

        /// <summary>
        /// remote docker local port Get local port where docker is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        public int DeviceGetdockerport (string deviceId)
        {
             ApiResponse<int> localVarResponse = DeviceGetdockerportWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// remote docker local port Get local port where docker is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceGetdockerportWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetdockerport");

            var localVarPath = "/devices/{device_id}/docker/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetdockerport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// remote docker local port Get local port where docker is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceGetdockerportAsync (string deviceId)
        {
             ApiResponse<int> localVarResponse = await DeviceGetdockerportAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// remote docker local port Get local port where docker is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetdockerportAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetdockerport");

            var localVarPath = "/devices/{device_id}/docker/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetdockerport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// list images Get images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;DockerImage&gt;</returns>
        public List<DockerImage> DeviceGetimages (string deviceId)
        {
             ApiResponse<List<DockerImage>> localVarResponse = DeviceGetimagesWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list images Get images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;DockerImage&gt;</returns>
        public ApiResponse<List<DockerImage>> DeviceGetimagesWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetimages");

            var localVarPath = "/devices/{device_id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetimages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerImage>)));
        }

        /// <summary>
        /// list images Get images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;DockerImage&gt;</returns>
        public async System.Threading.Tasks.Task<List<DockerImage>> DeviceGetimagesAsync (string deviceId)
        {
             ApiResponse<List<DockerImage>> localVarResponse = await DeviceGetimagesAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list images Get images available on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;DockerImage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DockerImage>>> DeviceGetimagesAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetimages");

            var localVarPath = "/devices/{device_id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetimages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DockerImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DockerImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DockerImage>)));
        }

        /// <summary>
        /// Return memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>MemInfo</returns>
        public MemInfo DeviceGetmemory (string deviceId)
        {
             ApiResponse<MemInfo> localVarResponse = DeviceGetmemoryWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of MemInfo</returns>
        public ApiResponse<MemInfo> DeviceGetmemoryWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmemory");

            var localVarPath = "/devices/{device_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// Return memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of MemInfo</returns>
        public async System.Threading.Tasks.Task<MemInfo> DeviceGetmemoryAsync (string deviceId)
        {
             ApiResponse<MemInfo> localVarResponse = await DeviceGetmemoryAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return memory information Return total/free/available memory on the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (MemInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MemInfo>> DeviceGetmemoryAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmemory");

            var localVarPath = "/devices/{device_id}/memory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmemory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemInfo)));
        }

        /// <summary>
        /// return storage information for a device Get a list of storages for the specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;MountPoint&gt;</returns>
        public List<MountPoint> DeviceGetmountpoints (string deviceId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = DeviceGetmountpointsWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// return storage information for a device Get a list of storages for the specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;MountPoint&gt;</returns>
        public ApiResponse<List<MountPoint>> DeviceGetmountpointsWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmountpoints");

            var localVarPath = "/devices/{device_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// return storage information for a device Get a list of storages for the specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;MountPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<MountPoint>> DeviceGetmountpointsAsync (string deviceId)
        {
             ApiResponse<List<MountPoint>> localVarResponse = await DeviceGetmountpointsAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// return storage information for a device Get a list of storages for the specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;MountPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MountPoint>>> DeviceGetmountpointsAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetmountpoints");

            var localVarPath = "/devices/{device_id}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetmountpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MountPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MountPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MountPoint>)));
        }

        /// <summary>
        /// return the path of the device private key returns the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>string</returns>
        public string DeviceGetprivatekey (string deviceId)
        {
             ApiResponse<string> localVarResponse = DeviceGetprivatekeyWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// return the path of the device private key returns the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DeviceGetprivatekeyWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprivatekey");

            var localVarPath = "/devices/{device_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// return the path of the device private key returns the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeviceGetprivatekeyAsync (string deviceId)
        {
             ApiResponse<string> localVarResponse = await DeviceGetprivatekeyAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// return the path of the device private key returns the key that can be used to activate passowordless connections to the device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeviceGetprivatekeyAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprivatekey");

            var localVarPath = "/devices/{device_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// list running processes on a device Get processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>List&lt;Process&gt;</returns>
        public List<Process> DeviceGetprocesses (string deviceId)
        {
             ApiResponse<List<Process>> localVarResponse = DeviceGetprocessesWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list running processes on a device Get processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        public ApiResponse<List<Process>> DeviceGetprocessesWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprocesses");

            var localVarPath = "/devices/{device_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// list running processes on a device Get processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of List&lt;Process&gt;</returns>
        public async System.Threading.Tasks.Task<List<Process>> DeviceGetprocessesAsync (string deviceId)
        {
             ApiResponse<List<Process>> localVarResponse = await DeviceGetprocessesAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list running processes on a device Get processes running on a specified device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Process>>> DeviceGetprocessesAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetprocesses");

            var localVarPath = "/devices/{device_id}/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetprocesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// remote ssh local port Get local port where ssh is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>int</returns>
        public int DeviceGetsshport (string deviceId)
        {
             ApiResponse<int> localVarResponse = DeviceGetsshportWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// remote ssh local port Get local port where ssh is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceGetsshportWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetsshport");

            var localVarPath = "/devices/{device_id}/ssh/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetsshport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// remote ssh local port Get local port where ssh is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceGetsshportAsync (string deviceId)
        {
             ApiResponse<int> localVarResponse = await DeviceGetsshportAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// remote ssh local port Get local port where ssh is tunneled
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceGetsshportAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceGetsshport");

            var localVarPath = "/devices/{device_id}/ssh/port";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetsshport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Change device properties Changes specified properties on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceModify (string deviceId, TargetDevice device = default(TargetDevice))
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceModifyWithHttpInfo(deviceId, device);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change device properties Changes specified properties on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceModifyWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceModify");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Change device properties Changes specified properties on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceModifyAsync (string deviceId, TargetDevice device = default(TargetDevice))
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceModifyAsyncWithHttpInfo(deviceId, device);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change device properties Changes specified properties on a device
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="device"> (optional)</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceModifyAsyncWithHttpInfo (string deviceId, TargetDevice device = default(TargetDevice))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceModify");

            var localVarPath = "/devices/{device_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        public int DeviceOpendocker (string deviceId, int port = default(int))
        {
             ApiResponse<int> localVarResponse = DeviceOpendockerWithHttpInfo(deviceId, port);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceOpendockerWithHttpInfo (string deviceId, int port = default(int))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpendocker");

            var localVarPath = "/devices/{device_id}/docker/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpendocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceOpendockerAsync (string deviceId, int port = default(int))
        {
             ApiResponse<int> localVarResponse = await DeviceOpendockerAsyncWithHttpInfo(deviceId, port);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expose remote docker Expose remote docker port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpendockerAsyncWithHttpInfo (string deviceId, int port = default(int))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpendocker");

            var localVarPath = "/devices/{device_id}/docker/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpendocker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose remote ssh Expose remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>int</returns>
        public int DeviceOpenssh (string deviceId, int port = default(int))
        {
             ApiResponse<int> localVarResponse = DeviceOpensshWithHttpInfo(deviceId, port);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expose remote ssh Expose remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> DeviceOpensshWithHttpInfo (string deviceId, int port = default(int))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpenssh");

            var localVarPath = "/devices/{device_id}/ssh/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpenssh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Expose remote ssh Expose remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> DeviceOpensshAsync (string deviceId, int port = default(int))
        {
             ApiResponse<int> localVarResponse = await DeviceOpensshAsyncWithHttpInfo(deviceId, port);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expose remote ssh Expose remote ssh port on localhost
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="port"> (optional)</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> DeviceOpensshAsyncWithHttpInfo (string deviceId, int port = default(int))
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceOpenssh");

            var localVarPath = "/devices/{device_id}/ssh/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceOpenssh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns></returns>
        public void DeviceSyncfolders (string deviceId, string sourcefolder, string destfolder)
        {
             DeviceSyncfoldersWithHttpInfo(deviceId, sourcefolder, destfolder);
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceSyncfoldersWithHttpInfo (string deviceId, string sourcefolder, string destfolder)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling DevicesApi->DeviceSyncfolders");

            var localVarPath = "/devices/{device_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceSyncfoldersAsync (string deviceId, string sourcefolder, string destfolder)
        {
             await DeviceSyncfoldersAsyncWithHttpInfo(deviceId, sourcefolder, destfolder);

        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host and target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="sourcefolder"></param>
        /// <param name="destfolder"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceSyncfoldersAsyncWithHttpInfo (string deviceId, string sourcefolder, string destfolder)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling DevicesApi->DeviceSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling DevicesApi->DeviceSyncfolders");

            var localVarPath = "/devices/{device_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update information for a specific device Returns a specified device, with updated info if available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DeviceUpdate (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = DeviceUpdateWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update information for a specific device Returns a specified device, with updated info if available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DeviceUpdateWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceUpdate");

            var localVarPath = "/devices/{device_id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// update information for a specific device Returns a specified device, with updated info if available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DeviceUpdateAsync (string deviceId)
        {
             ApiResponse<TargetDevice> localVarResponse = await DeviceUpdateAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update information for a specific device Returns a specified device, with updated info if available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DeviceUpdateAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceUpdate");

            var localVarPath = "/devices/{device_id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TargetDevice&gt;</returns>
        public List<TargetDevice> DevicesGet ()
        {
             ApiResponse<List<TargetDevice>> localVarResponse = DevicesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TargetDevice&gt;</returns>
        public ApiResponse<List<TargetDevice>> DevicesGetWithHttpInfo ()
        {

            var localVarPath = "/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TargetDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TargetDevice>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TargetDevice>)));
        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TargetDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<TargetDevice>> DevicesGetAsync ()
        {
             ApiResponse<List<TargetDevice>> localVarResponse = await DevicesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all devices Returns all configured devices
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TargetDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TargetDevice>>> DevicesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TargetDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TargetDevice>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TargetDevice>)));
        }

        /// <summary>
        /// Finds a network device Returns a new device detected from network
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DevicesNetworkdetect (string hostname, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = DevicesNetworkdetectWithHttpInfo(hostname, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds a network device Returns a new device detected from network
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DevicesNetworkdetectWithHttpInfo (string hostname, string username, string password)
        {
            // verify the required parameter 'hostname' is set
            if (hostname == null)
                throw new ApiException(400, "Missing required parameter 'hostname' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesNetworkdetect");

            var localVarPath = "/devices/network_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesNetworkdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Finds a network device Returns a new device detected from network
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DevicesNetworkdetectAsync (string hostname, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = await DevicesNetworkdetectAsyncWithHttpInfo(hostname, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds a network device Returns a new device detected from network
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesNetworkdetectAsyncWithHttpInfo (string hostname, string username, string password)
        {
            // verify the required parameter 'hostname' is set
            if (hostname == null)
                throw new ApiException(400, "Missing required parameter 'hostname' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesNetworkdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesNetworkdetect");

            var localVarPath = "/devices/network_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesNetworkdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Finds a device connected to serial port Returns a new device detected from serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>TargetDevice</returns>
        public TargetDevice DevicesSerialdetect (string port, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = DevicesSerialdetectWithHttpInfo(port, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds a device connected to serial port Returns a new device detected from serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of TargetDevice</returns>
        public ApiResponse<TargetDevice> DevicesSerialdetectWithHttpInfo (string port, string username, string password)
        {
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesSerialdetect");

            var localVarPath = "/devices/serial_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesSerialdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// Finds a device connected to serial port Returns a new device detected from serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of TargetDevice</returns>
        public async System.Threading.Tasks.Task<TargetDevice> DevicesSerialdetectAsync (string port, string username, string password)
        {
             ApiResponse<TargetDevice> localVarResponse = await DevicesSerialdetectAsyncWithHttpInfo(port, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds a device connected to serial port Returns a new device detected from serial port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="port"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (TargetDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TargetDevice>> DevicesSerialdetectAsyncWithHttpInfo (string port, string username, string password)
        {
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevicesApi->DevicesSerialdetect");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DevicesApi->DevicesSerialdetect");

            var localVarPath = "/devices/serial_detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicesSerialdetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TargetDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TargetDevice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TargetDevice)));
        }

        /// <summary>
        /// delete an image Executes rmi command on and image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns></returns>
        public void ImagesDeleteimage (string deviceId, string imageId)
        {
             ImagesDeleteimageWithHttpInfo(deviceId, imageId);
        }

        /// <summary>
        /// delete an image Executes rmi command on and image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImagesDeleteimageWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesDeleteimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesDeleteimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesDeleteimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete an image Executes rmi command on and image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImagesDeleteimageAsync (string deviceId, string imageId)
        {
             await ImagesDeleteimageAsyncWithHttpInfo(deviceId, imageId);

        }

        /// <summary>
        /// delete an image Executes rmi command on and image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImagesDeleteimageAsyncWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesDeleteimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesDeleteimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesDeleteimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get image details Get detailed information on an image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>DockerImage</returns>
        public DockerImage ImagesGetimage (string deviceId, string imageId)
        {
             ApiResponse<DockerImage> localVarResponse = ImagesGetimageWithHttpInfo(deviceId, imageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get image details Get detailed information on an image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>ApiResponse of DockerImage</returns>
        public ApiResponse<DockerImage> ImagesGetimageWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesGetimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesGetimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesGetimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerImage)));
        }

        /// <summary>
        /// get image details Get detailed information on an image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of DockerImage</returns>
        public async System.Threading.Tasks.Task<DockerImage> ImagesGetimageAsync (string deviceId, string imageId)
        {
             ApiResponse<DockerImage> localVarResponse = await ImagesGetimageAsyncWithHttpInfo(deviceId, imageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get image details Get detailed information on an image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="imageId">Id of an image</param>
        /// <returns>Task of ApiResponse (DockerImage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerImage>> ImagesGetimageAsyncWithHttpInfo (string deviceId, string imageId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ImagesGetimage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling DevicesApi->ImagesGetimage");

            var localVarPath = "/devices/{device_id}/images/{image_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("device_id", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (imageId != null) localVarPathParams.Add("image_id", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImagesGetimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerImage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerImage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerImage)));
        }

    }
}
