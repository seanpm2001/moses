/* 
 * Torizon Deployment API
 *
 * Toradex Development API to build and deploy application on Torizon
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TorizonRestAPI.Client;
using TorizonRestAPI.Model;

namespace TorizonRestAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns></returns>
        void ApplicationBuild (string applicationId, string configuration);

        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationBuildWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Remove an application and all the associated data and containers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        void ApplicationDelete (string applicationId);

        /// <summary>
        /// Remove an application and all the associated data and containers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDeleteWithHttpInfo (string applicationId);
        /// <summary>
        /// Deploys container image
        /// </summary>
        /// <remarks>
        /// Deploys application release or debug container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns></returns>
        void ApplicationDeploy (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Deploys container image
        /// </summary>
        /// <remarks>
        /// Deploys application release or debug container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDeployWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Application</returns>
        Application ApplicationGet (string applicationId);

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationGetWithHttpInfo (string applicationId);
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>DockerContainer</returns>
        DockerContainer ApplicationGetcontainer (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ApplicationGetcontainerWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Retrieves the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>string</returns>
        string ApplicationGetprivatekey (string applicationId);

        /// <summary>
        /// Retrieves the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationGetprivatekeyWithHttpInfo (string applicationId);
        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an applicaton
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Application</returns>
        Application ApplicationModify (string applicationId, Application application = default(Application));

        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an applicaton
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationModifyWithHttpInfo (string applicationId, Application application = default(Application));
        /// <summary>
        /// Cleans id and keys for git repo uploading
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        void ApplicationReseal (string applicationId);

        /// <summary>
        /// Cleans id and keys for git repo uploading
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationResealWithHttpInfo (string applicationId);
        /// <summary>
        /// Runs container image
        /// </summary>
        /// <remarks>
        /// Runs application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>DockerContainer</returns>
        DockerContainer ApplicationRun (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Runs container image
        /// </summary>
        /// <remarks>
        /// Runs application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ApplicationRunWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Runs SDK containers
        /// </summary>
        /// <remarks>
        /// Runs SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApplicationRunsdk (string applicationId, string configuration);

        /// <summary>
        /// Runs SDK containers
        /// </summary>
        /// <remarks>
        /// Runs SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApplicationRunsdkWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Stops running container image
        /// </summary>
        /// <remarks>
        /// Stops application release or debug container currently running on target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns></returns>
        void ApplicationStop (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Stops running container image
        /// </summary>
        /// <remarks>
        /// Stops application release or debug container currently running on target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationStopWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host/SDK container and application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns></returns>
        void ApplicationSyncfolders (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool));

        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host/SDK container and application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationSyncfoldersWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool));
        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>bool</returns>
        bool ApplicationUpdated (string applicationId, string configuration);

        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApplicationUpdatedWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns></returns>
        void ApplicationUpdatesdk (string applicationId, string configuration);

        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationUpdatesdkWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Application</returns>
        Application ApplicationsCreate (string platformId, string path, string username = default(string));

        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsCreateWithHttpInfo (string platformId, string path, string username = default(string));
        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Application</returns>
        Application ApplicationsLoad (string path);

        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsLoadWithHttpInfo (string path);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationBuildAsync (string applicationId, string configuration);

        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationBuildAsyncWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Remove an application and all the associated data and containers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDeleteAsync (string applicationId);

        /// <summary>
        /// Remove an application and all the associated data and containers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeleteAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Deploys container image
        /// </summary>
        /// <remarks>
        /// Deploys application release or debug container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDeployAsync (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Deploys container image
        /// </summary>
        /// <remarks>
        /// Deploys application release or debug container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeployAsyncWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationGetAsync (string applicationId);

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationGetAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ApplicationGetcontainerAsync (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationGetcontainerAsyncWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Retrieves the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationGetprivatekeyAsync (string applicationId);

        /// <summary>
        /// Retrieves the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetprivatekeyAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an applicaton
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationModifyAsync (string applicationId, Application application = default(Application));

        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an applicaton
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationModifyAsyncWithHttpInfo (string applicationId, Application application = default(Application));
        /// <summary>
        /// Cleans id and keys for git repo uploading
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationResealAsync (string applicationId);

        /// <summary>
        /// Cleans id and keys for git repo uploading
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationResealAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Runs container image
        /// </summary>
        /// <remarks>
        /// Runs application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ApplicationRunAsync (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Runs container image
        /// </summary>
        /// <remarks>
        /// Runs application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationRunAsyncWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// Runs SDK containers
        /// </summary>
        /// <remarks>
        /// Runs SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApplicationRunsdkAsync (string applicationId, string configuration);

        /// <summary>
        /// Runs SDK containers
        /// </summary>
        /// <remarks>
        /// Runs SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApplicationRunsdkAsyncWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Stops running container image
        /// </summary>
        /// <remarks>
        /// Stops application release or debug container currently running on target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationStopAsync (string applicationId, string configuration, string deviceid);

        /// <summary>
        /// Stops running container image
        /// </summary>
        /// <remarks>
        /// Stops application release or debug container currently running on target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationStopAsyncWithHttpInfo (string applicationId, string configuration, string deviceid);
        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host/SDK container and application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationSyncfoldersAsync (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool));

        /// <summary>
        /// synchronizes folders
        /// </summary>
        /// <remarks>
        /// synchronizes folders between host/SDK container and application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationSyncfoldersAsyncWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool));
        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApplicationUpdatedAsync (string applicationId, string configuration);

        /// <summary>
        /// Builds container image
        /// </summary>
        /// <remarks>
        /// Builds application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApplicationUpdatedAsyncWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationUpdatesdkAsync (string applicationId, string configuration);

        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationUpdatesdkAsyncWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsCreateAsync (string platformId, string path, string username = default(string));

        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsCreateAsyncWithHttpInfo (string platformId, string path, string username = default(string));
        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsLoadAsync (string path);

        /// <summary>
        /// Loads an application configuration
        /// </summary>
        /// <remarks>
        /// Returns data about an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsLoadAsyncWithHttpInfo (string path);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private TorizonRestAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(String basePath)
        {
            this.Configuration = new TorizonRestAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi()
        {
            this.Configuration = TorizonRestAPI.Client.Configuration.Default;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(TorizonRestAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TorizonRestAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TorizonRestAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TorizonRestAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns></returns>
        public void ApplicationBuild (string applicationId, string configuration)
        {
             ApplicationBuildWithHttpInfo(applicationId, configuration);
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationBuildWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationBuild");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationBuild");

            var localVarPath = "/applications/{application_id}/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationBuildAsync (string applicationId, string configuration)
        {
             await ApplicationBuildAsyncWithHttpInfo(applicationId, configuration);

        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationBuildAsyncWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationBuild");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationBuild");

            var localVarPath = "/applications/{application_id}/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an application and all the associated data and containers 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        public void ApplicationDelete (string applicationId)
        {
             ApplicationDeleteWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Remove an application and all the associated data and containers 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationDeleteWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDelete");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an application and all the associated data and containers 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDeleteAsync (string applicationId)
        {
             await ApplicationDeleteAsyncWithHttpInfo(applicationId);

        }

        /// <summary>
        /// Remove an application and all the associated data and containers 
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeleteAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDelete");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deploys container image Deploys application release or debug container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns></returns>
        public void ApplicationDeploy (string applicationId, string configuration, string deviceid)
        {
             ApplicationDeployWithHttpInfo(applicationId, configuration, deviceid);
        }

        /// <summary>
        /// Deploys container image Deploys application release or debug container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationDeployWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationDeploy");

            var localVarPath = "/applications/{application_id}/deploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deploys container image Deploys application release or debug container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDeployAsync (string applicationId, string configuration, string deviceid)
        {
             await ApplicationDeployAsyncWithHttpInfo(applicationId, configuration, deviceid);

        }

        /// <summary>
        /// Deploys container image Deploys application release or debug container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeployAsyncWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationDeploy");

            var localVarPath = "/applications/{application_id}/deploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Application</returns>
        public Application ApplicationGet (string applicationId)
        {
             ApiResponse<Application> localVarResponse = ApplicationGetWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationGetWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGet");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationGetAsync (string applicationId)
        {
             ApiResponse<Application> localVarResponse = await ApplicationGetAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationGetAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGet");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get container information Get informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ApplicationGetcontainer (string applicationId, string configuration, string deviceid)
        {
             ApiResponse<DockerContainer> localVarResponse = ApplicationGetcontainerWithHttpInfo(applicationId, configuration, deviceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get container information Get informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ApplicationGetcontainerWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationGetcontainer");

            var localVarPath = "/applications/{application_id}/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Get container information Get informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ApplicationGetcontainerAsync (string applicationId, string configuration, string deviceid)
        {
             ApiResponse<DockerContainer> localVarResponse = await ApplicationGetcontainerAsyncWithHttpInfo(applicationId, configuration, deviceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get container information Get informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationGetcontainerAsyncWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationGetcontainer");

            var localVarPath = "/applications/{application_id}/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Retrieves the path of the RSA private key The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>string</returns>
        public string ApplicationGetprivatekey (string applicationId)
        {
             ApiResponse<string> localVarResponse = ApplicationGetprivatekeyWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the path of the RSA private key The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApplicationGetprivatekeyWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetprivatekey");

            var localVarPath = "/applications/{application_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieves the path of the RSA private key The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationGetprivatekeyAsync (string applicationId)
        {
             ApiResponse<string> localVarResponse = await ApplicationGetprivatekeyAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the path of the RSA private key The application stores the public key inside the container if ssh is enabled, this key will allow passwordless connections to a running instance
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetprivatekeyAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetprivatekey");

            var localVarPath = "/applications/{application_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change application properties Changes specified properties on an applicaton
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Application</returns>
        public Application ApplicationModify (string applicationId, Application application = default(Application))
        {
             ApiResponse<Application> localVarResponse = ApplicationModifyWithHttpInfo(applicationId, application);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change application properties Changes specified properties on an applicaton
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationModifyWithHttpInfo (string applicationId, Application application = default(Application))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationModify");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Change application properties Changes specified properties on an applicaton
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationModifyAsync (string applicationId, Application application = default(Application))
        {
             ApiResponse<Application> localVarResponse = await ApplicationModifyAsyncWithHttpInfo(applicationId, application);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change application properties Changes specified properties on an applicaton
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationModifyAsyncWithHttpInfo (string applicationId, Application application = default(Application))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationModify");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Cleans id and keys for git repo uploading This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        public void ApplicationReseal (string applicationId)
        {
             ApplicationResealWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Cleans id and keys for git repo uploading This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationResealWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationReseal");

            var localVarPath = "/applications/{application_id}/reseal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationReseal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cleans id and keys for git repo uploading This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationResealAsync (string applicationId)
        {
             await ApplicationResealAsyncWithHttpInfo(applicationId);

        }

        /// <summary>
        /// Cleans id and keys for git repo uploading This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked re-generating new ids every time, avoiding that all clones share the same id/keys.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationResealAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationReseal");

            var localVarPath = "/applications/{application_id}/reseal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationReseal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs container image Runs application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ApplicationRun (string applicationId, string configuration, string deviceid)
        {
             ApiResponse<DockerContainer> localVarResponse = ApplicationRunWithHttpInfo(applicationId, configuration, deviceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Runs container image Runs application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ApplicationRunWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationRun");

            var localVarPath = "/applications/{application_id}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Runs container image Runs application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ApplicationRunAsync (string applicationId, string configuration, string deviceid)
        {
             ApiResponse<DockerContainer> localVarResponse = await ApplicationRunAsyncWithHttpInfo(applicationId, configuration, deviceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Runs container image Runs application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationRunAsyncWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationRun");

            var localVarPath = "/applications/{application_id}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Runs SDK containers Runs SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApplicationRunsdk (string applicationId, string configuration)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApplicationRunsdkWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Runs SDK containers Runs SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> ApplicationRunsdkWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRunsdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRunsdk");

            var localVarPath = "/applications/{application_id}/sdk/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRunsdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Runs SDK containers Runs SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApplicationRunsdkAsync (string applicationId, string configuration)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApplicationRunsdkAsyncWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Runs SDK containers Runs SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApplicationRunsdkAsyncWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRunsdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRunsdk");

            var localVarPath = "/applications/{application_id}/sdk/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRunsdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Stops running container image Stops application release or debug container currently running on target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns></returns>
        public void ApplicationStop (string applicationId, string configuration, string deviceid)
        {
             ApplicationStopWithHttpInfo(applicationId, configuration, deviceid);
        }

        /// <summary>
        /// Stops running container image Stops application release or debug container currently running on target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationStopWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationStop");

            var localVarPath = "/applications/{application_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Stops running container image Stops application release or debug container currently running on target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationStopAsync (string applicationId, string configuration, string deviceid)
        {
             await ApplicationStopAsyncWithHttpInfo(applicationId, configuration, deviceid);

        }

        /// <summary>
        /// Stops running container image Stops application release or debug container currently running on target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationStopAsyncWithHttpInfo (string applicationId, string configuration, string deviceid)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationStop");

            var localVarPath = "/applications/{application_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host/SDK container and application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns></returns>
        public void ApplicationSyncfolders (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool))
        {
             ApplicationSyncfoldersWithHttpInfo(applicationId, sourcefolder, configuration, deviceid, destfolder, sourceIsSdk);
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host/SDK container and application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationSyncfoldersWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling ApplicationsApi->ApplicationSyncfolders");

            var localVarPath = "/applications/{application_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (sourceIsSdk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_is_sdk", sourceIsSdk)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host/SDK container and application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationSyncfoldersAsync (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool))
        {
             await ApplicationSyncfoldersAsyncWithHttpInfo(applicationId, sourcefolder, configuration, deviceid, destfolder, sourceIsSdk);

        }

        /// <summary>
        /// synchronizes folders synchronizes folders between host/SDK container and application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceid"></param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationSyncfoldersAsyncWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceid, string destfolder, bool sourceIsSdk = default(bool))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'deviceid' is set
            if (deviceid == null)
                throw new ApiException(400, "Missing required parameter 'deviceid' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling ApplicationsApi->ApplicationSyncfolders");

            var localVarPath = "/applications/{application_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceid", deviceid)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (sourceIsSdk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_is_sdk", sourceIsSdk)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>bool</returns>
        public bool ApplicationUpdated (string applicationId, string configuration)
        {
             ApiResponse<bool> localVarResponse = ApplicationUpdatedWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> ApplicationUpdatedWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdated");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdated");

            var localVarPath = "/applications/{application_id}/updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApplicationUpdatedAsync (string applicationId, string configuration)
        {
             ApiResponse<bool> localVarResponse = await ApplicationUpdatedAsyncWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Builds container image Builds application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> ApplicationUpdatedAsyncWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdated");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdated");

            var localVarPath = "/applications/{application_id}/updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Update SDK container Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns></returns>
        public void ApplicationUpdatesdk (string applicationId, string configuration)
        {
             ApplicationUpdatesdkWithHttpInfo(applicationId, configuration);
        }

        /// <summary>
        /// Update SDK container Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationUpdatesdkWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdatesdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdatesdk");

            var localVarPath = "/applications/{application_id}/sdk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdatesdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update SDK container Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationUpdatesdkAsync (string applicationId, string configuration)
        {
             await ApplicationUpdatesdkAsyncWithHttpInfo(applicationId, configuration);

        }

        /// <summary>
        /// Update SDK container Updates/rebuilds the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationUpdatesdkAsyncWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdatesdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdatesdk");

            var localVarPath = "/applications/{application_id}/sdk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdatesdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Application</returns>
        public Application ApplicationsCreate (string platformId, string path, string username = default(string))
        {
             ApiResponse<Application> localVarResponse = ApplicationsCreateWithHttpInfo(platformId, path, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationsCreateWithHttpInfo (string platformId, string path, string username = default(string))
        {
            // verify the required parameter 'platformId' is set
            if (platformId == null)
                throw new ApiException(400, "Missing required parameter 'platformId' when calling ApplicationsApi->ApplicationsCreate");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsCreate");

            var localVarPath = "/applications/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (platformId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform_id", platformId)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsCreateAsync (string platformId, string path, string username = default(string))
        {
             ApiResponse<Application> localVarResponse = await ApplicationsCreateAsyncWithHttpInfo(platformId, path, username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsCreateAsyncWithHttpInfo (string platformId, string path, string username = default(string))
        {
            // verify the required parameter 'platformId' is set
            if (platformId == null)
                throw new ApiException(400, "Missing required parameter 'platformId' when calling ApplicationsApi->ApplicationsCreate");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsCreate");

            var localVarPath = "/applications/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (platformId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform_id", platformId)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Application</returns>
        public Application ApplicationsLoad (string path)
        {
             ApiResponse<Application> localVarResponse = ApplicationsLoadWithHttpInfo(path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationsLoadWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsLoad");

            var localVarPath = "/applications/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsLoad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsLoadAsync (string path)
        {
             ApiResponse<Application> localVarResponse = await ApplicationsLoadAsyncWithHttpInfo(path);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads an application configuration Returns data about an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsLoadAsyncWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsLoad");

            var localVarPath = "/applications/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsLoad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

    }
}
