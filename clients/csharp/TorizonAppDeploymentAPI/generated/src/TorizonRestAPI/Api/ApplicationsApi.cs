/* 
 * Torizon IDE-backend API
 *
 * Toradex API to build and deploy applications running as containers on Torizon
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TorizonRestAPI.Client;
using TorizonRestAPI.Model;

namespace TorizonRestAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build container image
        /// </summary>
        /// <remarks>
        /// Build application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void ApplicationBuild (string applicationId, string configuration, string progressId = default(string));

        /// <summary>
        /// Build container image
        /// </summary>
        /// <remarks>
        /// Build application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationBuildWithHttpInfo (string applicationId, string configuration, string progressId = default(string));
        /// <summary>
        /// Remove an application
        /// </summary>
        /// <remarks>
        /// Remove an application and all the associated data and containers
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        void ApplicationDelete (string applicationId);

        /// <summary>
        /// Remove an application
        /// </summary>
        /// <remarks>
        /// Remove an application and all the associated data and containers
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDeleteWithHttpInfo (string applicationId);
        /// <summary>
        /// Deploy container image
        /// </summary>
        /// <remarks>
        /// Deploy application container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void ApplicationDeploy (string applicationId, string configuration, string deviceId, string progressId = default(string));

        /// <summary>
        /// Deploy container image
        /// </summary>
        /// <remarks>
        /// Deploy application container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDeployWithHttpInfo (string applicationId, string configuration, string deviceId, string progressId = default(string));
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Application</returns>
        Application ApplicationGet (string applicationId);

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationGetWithHttpInfo (string applicationId);
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get detailed informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ApplicationGetcontainer (string applicationId, string configuration, string deviceId);

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get detailed informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ApplicationGetcontainerWithHttpInfo (string applicationId, string configuration, string deviceId);
        /// <summary>
        /// Get one of more lines from container logs
        /// </summary>
        /// <remarks>
        /// Return one chunk of log (one or more lines), blocking if no data is available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>string</returns>
        string ApplicationGetcontainerLogs (string applicationId, string configuration, string deviceId, bool? restart = default(bool?));

        /// <summary>
        /// Get one of more lines from container logs
        /// </summary>
        /// <remarks>
        /// Return one chunk of log (one or more lines), blocking if no data is available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationGetcontainerLogsWithHttpInfo (string applicationId, string configuration, string deviceId, bool? restart = default(bool?));
        /// <summary>
        /// Get docker command line to run the application/json
        /// </summary>
        /// <remarks>
        /// Return the full docker command line that can be used to run the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>string</returns>
        string ApplicationGetdockerCommandline (string applicationId, string configuration);

        /// <summary>
        /// Get docker command line to run the application/json
        /// </summary>
        /// <remarks>
        /// Return the full docker command line that can be used to run the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationGetdockerCommandlineWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Get docker compose file
        /// </summary>
        /// <remarks>
        /// Return docker-compose file that can be used to run the application container and its dependencies
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>string</returns>
        string ApplicationGetdockerComposefile (string applicationId, string configuration);

        /// <summary>
        /// Get docker compose file
        /// </summary>
        /// <remarks>
        /// Return docker-compose file that can be used to run the application container and its dependencies
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationGetdockerComposefileWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Get the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>string</returns>
        string ApplicationGetprivatekey (string applicationId);

        /// <summary>
        /// Get the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationGetprivatekeyWithHttpInfo (string applicationId);
        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Application</returns>
        Application ApplicationModify (string applicationId, Application application = default(Application));

        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationModifyWithHttpInfo (string applicationId, Application application = default(Application));
        /// <summary>
        /// Push application to docker registry
        /// </summary>
        /// <remarks>
        /// Push application&#39;s container to a docker registry, using authentication
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void ApplicationPushToRegistry (string applicationId, string configuration, string username, string password, string progressId = default(string));

        /// <summary>
        /// Push application to docker registry
        /// </summary>
        /// <remarks>
        /// Push application&#39;s container to a docker registry, using authentication
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationPushToRegistryWithHttpInfo (string applicationId, string configuration, string username, string password, string progressId = default(string));
        /// <summary>
        /// Clean id and keys from application configuration
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        void ApplicationReseal (string applicationId);

        /// <summary>
        /// Clean id and keys from application configuration
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationResealWithHttpInfo (string applicationId);
        /// <summary>
        /// Run container image
        /// </summary>
        /// <remarks>
        /// Run the application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>DockerContainer</returns>
        DockerContainer ApplicationRun (string applicationId, string configuration, string deviceId, string progressId = default(string));

        /// <summary>
        /// Run container image
        /// </summary>
        /// <remarks>
        /// Run the application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ApplicationRunWithHttpInfo (string applicationId, string configuration, string deviceId, string progressId = default(string));
        /// <summary>
        /// Run SDK containers
        /// </summary>
        /// <remarks>
        /// Run SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApplicationRunsdk (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string));

        /// <summary>
        /// Run SDK containers
        /// </summary>
        /// <remarks>
        /// Run SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApplicationRunsdkWithHttpInfo (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string));
        /// <summary>
        /// Get SDK container
        /// </summary>
        /// <remarks>
        /// Get SDK container information (can be used to check if it&#39;s running)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>DockerContainer</returns>
        DockerContainer ApplicationSdkContainer (string applicationId, string configuration);

        /// <summary>
        /// Get SDK container
        /// </summary>
        /// <remarks>
        /// Get SDK container information (can be used to check if it&#39;s running)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        ApiResponse<DockerContainer> ApplicationSdkContainerWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Stop running container image
        /// </summary>
        /// <remarks>
        /// Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        void ApplicationStop (string applicationId, string configuration, string deviceId);

        /// <summary>
        /// Stop running container image
        /// </summary>
        /// <remarks>
        /// Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationStopWithHttpInfo (string applicationId, string configuration, string deviceId);
        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronizes folders between host/SDK container and the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void ApplicationSyncfolders (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string));

        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronizes folders between host/SDK container and the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationSyncfoldersWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string));
        /// <summary>
        /// Check if container image is up to date
        /// </summary>
        /// <remarks>
        /// Check if some properties have been changed after the last build of the configuration-specific container image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>bool</returns>
        bool ApplicationUpdated (string applicationId, string configuration);

        /// <summary>
        /// Check if container image is up to date
        /// </summary>
        /// <remarks>
        /// Check if some properties have been changed after the last build of the configuration-specific container image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApplicationUpdatedWithHttpInfo (string applicationId, string configuration);
        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        void ApplicationUpdatesdk (string applicationId, string configuration, string progressId = default(string));

        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationUpdatesdkWithHttpInfo (string applicationId, string configuration, string progressId = default(string));
        /// <summary>
        /// Create an application configuration
        /// </summary>
        /// <remarks>
        /// Create a new application configuration
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Application</returns>
        Application ApplicationsCreate (string platformId, string path, string username = default(string));

        /// <summary>
        /// Create an application configuration
        /// </summary>
        /// <remarks>
        /// Create a new application configuration
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsCreateWithHttpInfo (string platformId, string path, string username = default(string));
        /// <summary>
        /// Load an application configuration
        /// </summary>
        /// <remarks>
        /// Load an application configuration from the local filesystem
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Application</returns>
        Application ApplicationsLoad (string path);

        /// <summary>
        /// Load an application configuration
        /// </summary>
        /// <remarks>
        /// Load an application configuration from the local filesystem
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsLoadWithHttpInfo (string path);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Build container image
        /// </summary>
        /// <remarks>
        /// Build application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationBuildAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Build container image
        /// </summary>
        /// <remarks>
        /// Build application release or debug container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationBuildWithHttpInfoAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove an application
        /// </summary>
        /// <remarks>
        /// Remove an application and all the associated data and containers
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDeleteAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove an application
        /// </summary>
        /// <remarks>
        /// Remove an application and all the associated data and containers
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeleteWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deploy container image
        /// </summary>
        /// <remarks>
        /// Deploy application container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDeployAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deploy container image
        /// </summary>
        /// <remarks>
        /// Deploy application container to target
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeployWithHttpInfoAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationGetAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get application
        /// </summary>
        /// <remarks>
        /// Returns a specified application, knowing its id
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationGetWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get detailed informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ApplicationGetcontainerAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get detailed informations about container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationGetcontainerWithHttpInfoAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get one of more lines from container logs
        /// </summary>
        /// <remarks>
        /// Return one chunk of log (one or more lines), blocking if no data is available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationGetcontainerLogsAsync (string applicationId, string configuration, string deviceId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get one of more lines from container logs
        /// </summary>
        /// <remarks>
        /// Return one chunk of log (one or more lines), blocking if no data is available
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetcontainerLogsWithHttpInfoAsync (string applicationId, string configuration, string deviceId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get docker command line to run the application/json
        /// </summary>
        /// <remarks>
        /// Return the full docker command line that can be used to run the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationGetdockerCommandlineAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get docker command line to run the application/json
        /// </summary>
        /// <remarks>
        /// Return the full docker command line that can be used to run the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetdockerCommandlineWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get docker compose file
        /// </summary>
        /// <remarks>
        /// Return docker-compose file that can be used to run the application container and its dependencies
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationGetdockerComposefileAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get docker compose file
        /// </summary>
        /// <remarks>
        /// Return docker-compose file that can be used to run the application container and its dependencies
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetdockerComposefileWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationGetprivatekeyAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the path of the RSA private key
        /// </summary>
        /// <remarks>
        /// Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetprivatekeyWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationModifyAsync (string applicationId, Application application = default(Application), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Change application properties
        /// </summary>
        /// <remarks>
        /// Changes specified properties on an application
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationModifyWithHttpInfoAsync (string applicationId, Application application = default(Application), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Push application to docker registry
        /// </summary>
        /// <remarks>
        /// Push application&#39;s container to a docker registry, using authentication
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationPushToRegistryAsync (string applicationId, string configuration, string username, string password, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Push application to docker registry
        /// </summary>
        /// <remarks>
        /// Push application&#39;s container to a docker registry, using authentication
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationPushToRegistryWithHttpInfoAsync (string applicationId, string configuration, string username, string password, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clean id and keys from application configuration
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationResealAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clean id and keys from application configuration
        /// </summary>
        /// <remarks>
        /// This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationResealWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run container image
        /// </summary>
        /// <remarks>
        /// Run the application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ApplicationRunAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Run container image
        /// </summary>
        /// <remarks>
        /// Run the application release or debug container on target, if the application is already running, restarts it
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationRunWithHttpInfoAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Run SDK containers
        /// </summary>
        /// <remarks>
        /// Run SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApplicationRunsdkAsync (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Run SDK containers
        /// </summary>
        /// <remarks>
        /// Run SDK container and return its IP and SSH port
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApplicationRunsdkWithHttpInfoAsync (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get SDK container
        /// </summary>
        /// <remarks>
        /// Get SDK container information (can be used to check if it&#39;s running)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        System.Threading.Tasks.Task<DockerContainer> ApplicationSdkContainerAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get SDK container
        /// </summary>
        /// <remarks>
        /// Get SDK container information (can be used to check if it&#39;s running)
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationSdkContainerWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stop running container image
        /// </summary>
        /// <remarks>
        /// Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationStopAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop running container image
        /// </summary>
        /// <remarks>
        /// Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationStopWithHttpInfoAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronizes folders between host/SDK container and the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationSyncfoldersAsync (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Synchronize folders
        /// </summary>
        /// <remarks>
        /// Synchronizes folders between host/SDK container and the application container
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationSyncfoldersWithHttpInfoAsync (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if container image is up to date
        /// </summary>
        /// <remarks>
        /// Check if some properties have been changed after the last build of the configuration-specific container image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApplicationUpdatedAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if container image is up to date
        /// </summary>
        /// <remarks>
        /// Check if some properties have been changed after the last build of the configuration-specific container image
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApplicationUpdatedWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationUpdatesdkAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update SDK container
        /// </summary>
        /// <remarks>
        /// Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationUpdatesdkWithHttpInfoAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an application configuration
        /// </summary>
        /// <remarks>
        /// Create a new application configuration
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsCreateAsync (string platformId, string path, string username = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an application configuration
        /// </summary>
        /// <remarks>
        /// Create a new application configuration
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsCreateWithHttpInfoAsync (string platformId, string path, string username = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Load an application configuration
        /// </summary>
        /// <remarks>
        /// Load an application configuration from the local filesystem
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsLoadAsync (string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Load an application configuration
        /// </summary>
        /// <remarks>
        /// Load an application configuration from the local filesystem
        /// </remarks>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsLoadWithHttpInfoAsync (string path, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private TorizonRestAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(String basePath)
        {
            this.Configuration = new TorizonRestAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi()
        {
            this.Configuration = TorizonRestAPI.Client.Configuration.Default;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(TorizonRestAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TorizonRestAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TorizonRestAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TorizonRestAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TorizonRestAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Build container image Build application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void ApplicationBuild (string applicationId, string configuration, string progressId = default(string))
        {
             ApplicationBuildWithHttpInfo(applicationId, configuration, progressId);
        }

        /// <summary>
        /// Build container image Build application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationBuildWithHttpInfo (string applicationId, string configuration, string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationBuild");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationBuild");

            var localVarPath = "/applications/{application_id}/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Build container image Build application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationBuildAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationBuildWithHttpInfoAsync(applicationId, configuration, progressId, cancellationToken);

        }

        /// <summary>
        /// Build container image Build application release or debug container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationBuildWithHttpInfoAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationBuild");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationBuild");

            var localVarPath = "/applications/{application_id}/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an application Remove an application and all the associated data and containers
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        public void ApplicationDelete (string applicationId)
        {
             ApplicationDeleteWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Remove an application Remove an application and all the associated data and containers
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationDeleteWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDelete");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an application Remove an application and all the associated data and containers
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDeleteAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationDeleteWithHttpInfoAsync(applicationId, cancellationToken);

        }

        /// <summary>
        /// Remove an application Remove an application and all the associated data and containers
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeleteWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDelete");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deploy container image Deploy application container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void ApplicationDeploy (string applicationId, string configuration, string deviceId, string progressId = default(string))
        {
             ApplicationDeployWithHttpInfo(applicationId, configuration, deviceId, progressId);
        }

        /// <summary>
        /// Deploy container image Deploy application container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationDeployWithHttpInfo (string applicationId, string configuration, string deviceId, string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationDeploy");

            var localVarPath = "/applications/{application_id}/deploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deploy container image Deploy application container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDeployAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationDeployWithHttpInfoAsync(applicationId, configuration, deviceId, progressId, cancellationToken);

        }

        /// <summary>
        /// Deploy container image Deploy application container to target
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDeployWithHttpInfoAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationDeploy");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationDeploy");

            var localVarPath = "/applications/{application_id}/deploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationDeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>Application</returns>
        public Application ApplicationGet (string applicationId)
        {
             ApiResponse<Application> localVarResponse = ApplicationGetWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationGetWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGet");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationGetAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await ApplicationGetWithHttpInfoAsync(applicationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application Returns a specified application, knowing its id
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationGetWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGet");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get container information Get detailed informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ApplicationGetcontainer (string applicationId, string configuration, string deviceId)
        {
             ApiResponse<DockerContainer> localVarResponse = ApplicationGetcontainerWithHttpInfo(applicationId, configuration, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get container information Get detailed informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ApplicationGetcontainerWithHttpInfo (string applicationId, string configuration, string deviceId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationGetcontainer");

            var localVarPath = "/applications/{application_id}/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Get container information Get detailed informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ApplicationGetcontainerAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ApplicationGetcontainerWithHttpInfoAsync(applicationId, configuration, deviceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get container information Get detailed informations about container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationGetcontainerWithHttpInfoAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainer");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationGetcontainer");

            var localVarPath = "/applications/{application_id}/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Get one of more lines from container logs Return one chunk of log (one or more lines), blocking if no data is available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>string</returns>
        public string ApplicationGetcontainerLogs (string applicationId, string configuration, string deviceId, bool? restart = default(bool?))
        {
             ApiResponse<string> localVarResponse = ApplicationGetcontainerLogsWithHttpInfo(applicationId, configuration, deviceId, restart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get one of more lines from container logs Return one chunk of log (one or more lines), blocking if no data is available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApplicationGetcontainerLogsWithHttpInfo (string applicationId, string configuration, string deviceId, bool? restart = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainerLogs");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainerLogs");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationGetcontainerLogs");

            var localVarPath = "/applications/{application_id}/container_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (restart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restart", restart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainerLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get one of more lines from container logs Return one chunk of log (one or more lines), blocking if no data is available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationGetcontainerLogsAsync (string applicationId, string configuration, string deviceId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ApplicationGetcontainerLogsWithHttpInfoAsync(applicationId, configuration, deviceId, restart, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get one of more lines from container logs Return one chunk of log (one or more lines), blocking if no data is available
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="restart">when true reads the lock back from beginning (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetcontainerLogsWithHttpInfoAsync (string applicationId, string configuration, string deviceId, bool? restart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetcontainerLogs");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetcontainerLogs");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationGetcontainerLogs");

            var localVarPath = "/applications/{application_id}/container_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (restart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restart", restart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetcontainerLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get docker command line to run the application/json Return the full docker command line that can be used to run the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>string</returns>
        public string ApplicationGetdockerCommandline (string applicationId, string configuration)
        {
             ApiResponse<string> localVarResponse = ApplicationGetdockerCommandlineWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get docker command line to run the application/json Return the full docker command line that can be used to run the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApplicationGetdockerCommandlineWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetdockerCommandline");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetdockerCommandline");

            var localVarPath = "/applications/{application_id}/docker_commandline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetdockerCommandline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get docker command line to run the application/json Return the full docker command line that can be used to run the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationGetdockerCommandlineAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ApplicationGetdockerCommandlineWithHttpInfoAsync(applicationId, configuration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get docker command line to run the application/json Return the full docker command line that can be used to run the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetdockerCommandlineWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetdockerCommandline");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetdockerCommandline");

            var localVarPath = "/applications/{application_id}/docker_commandline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetdockerCommandline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get docker compose file Return docker-compose file that can be used to run the application container and its dependencies
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>string</returns>
        public string ApplicationGetdockerComposefile (string applicationId, string configuration)
        {
             ApiResponse<string> localVarResponse = ApplicationGetdockerComposefileWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get docker compose file Return docker-compose file that can be used to run the application container and its dependencies
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApplicationGetdockerComposefileWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetdockerComposefile");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetdockerComposefile");

            var localVarPath = "/applications/{application_id}/docker_composefile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetdockerComposefile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get docker compose file Return docker-compose file that can be used to run the application container and its dependencies
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationGetdockerComposefileAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ApplicationGetdockerComposefileWithHttpInfoAsync(applicationId, configuration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get docker compose file Return docker-compose file that can be used to run the application container and its dependencies
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetdockerComposefileWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetdockerComposefile");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationGetdockerComposefile");

            var localVarPath = "/applications/{application_id}/docker_composefile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetdockerComposefile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the path of the RSA private key Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>string</returns>
        public string ApplicationGetprivatekey (string applicationId)
        {
             ApiResponse<string> localVarResponse = ApplicationGetprivatekeyWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the path of the RSA private key Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApplicationGetprivatekeyWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetprivatekey");

            var localVarPath = "/applications/{application_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the path of the RSA private key Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationGetprivatekeyAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ApplicationGetprivatekeyWithHttpInfoAsync(applicationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the path of the RSA private key Retrieve the path of the private key that allows passwordless connection to the container. The application stores the public key inside the container if ssh is enabled (usually for debug builds only)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApplicationGetprivatekeyWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationGetprivatekey");

            var localVarPath = "/applications/{application_id}/privatekey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationGetprivatekey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change application properties Changes specified properties on an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>Application</returns>
        public Application ApplicationModify (string applicationId, Application application = default(Application))
        {
             ApiResponse<Application> localVarResponse = ApplicationModifyWithHttpInfo(applicationId, application);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change application properties Changes specified properties on an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationModifyWithHttpInfo (string applicationId, Application application = default(Application))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationModify");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Change application properties Changes specified properties on an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationModifyAsync (string applicationId, Application application = default(Application), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await ApplicationModifyWithHttpInfoAsync(applicationId, application, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change application properties Changes specified properties on an application
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="application"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationModifyWithHttpInfoAsync (string applicationId, Application application = default(Application), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationModify");

            var localVarPath = "/applications/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationModify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Push application to docker registry Push application&#39;s container to a docker registry, using authentication
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void ApplicationPushToRegistry (string applicationId, string configuration, string username, string password, string progressId = default(string))
        {
             ApplicationPushToRegistryWithHttpInfo(applicationId, configuration, username, password, progressId);
        }

        /// <summary>
        /// Push application to docker registry Push application&#39;s container to a docker registry, using authentication
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationPushToRegistryWithHttpInfo (string applicationId, string configuration, string username, string password, string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling ApplicationsApi->ApplicationPushToRegistry");

            var localVarPath = "/applications/{application_id}/push_to_registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationPushToRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Push application to docker registry Push application&#39;s container to a docker registry, using authentication
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationPushToRegistryAsync (string applicationId, string configuration, string username, string password, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationPushToRegistryWithHttpInfoAsync(applicationId, configuration, username, password, progressId, cancellationToken);

        }

        /// <summary>
        /// Push application to docker registry Push application&#39;s container to a docker registry, using authentication
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationPushToRegistryWithHttpInfoAsync (string applicationId, string configuration, string username, string password, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ApplicationsApi->ApplicationPushToRegistry");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling ApplicationsApi->ApplicationPushToRegistry");

            var localVarPath = "/applications/{application_id}/push_to_registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationPushToRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clean id and keys from application configuration This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns></returns>
        public void ApplicationReseal (string applicationId)
        {
             ApplicationResealWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Clean id and keys from application configuration This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationResealWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationReseal");

            var localVarPath = "/applications/{application_id}/reseal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationReseal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clean id and keys from application configuration This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationResealAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationResealWithHttpInfoAsync(applicationId, cancellationToken);

        }

        /// <summary>
        /// Clean id and keys from application configuration This operation make the application no longer valid, but allow you to upload it to a git repo from where it can be cloned/forked. Id and keys will be re-generated on next re-opening of the application, leading to different names for the images etc.
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationResealWithHttpInfoAsync (string applicationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationReseal");

            var localVarPath = "/applications/{application_id}/reseal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationReseal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Run container image Run the application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ApplicationRun (string applicationId, string configuration, string deviceId, string progressId = default(string))
        {
             ApiResponse<DockerContainer> localVarResponse = ApplicationRunWithHttpInfo(applicationId, configuration, deviceId, progressId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run container image Run the application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ApplicationRunWithHttpInfo (string applicationId, string configuration, string deviceId, string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationRun");

            var localVarPath = "/applications/{application_id}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Run container image Run the application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ApplicationRunAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ApplicationRunWithHttpInfoAsync(applicationId, configuration, deviceId, progressId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run container image Run the application release or debug container on target, if the application is already running, restarts it
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationRunWithHttpInfoAsync (string applicationId, string configuration, string deviceId, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRun");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationRun");

            var localVarPath = "/applications/{application_id}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Run SDK containers Run SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApplicationRunsdk (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string))
        {
             ApiResponse<InlineResponse200> localVarResponse = ApplicationRunsdkWithHttpInfo(applicationId, configuration, build, progressId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run SDK containers Run SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> ApplicationRunsdkWithHttpInfo (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRunsdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRunsdk");

            var localVarPath = "/applications/{application_id}/sdk/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (build != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build", build)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRunsdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Run SDK containers Run SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApplicationRunsdkAsync (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApplicationRunsdkWithHttpInfoAsync(applicationId, configuration, build, progressId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run SDK containers Run SDK container and return its IP and SSH port
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="build"> (optional, default to true)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApplicationRunsdkWithHttpInfoAsync (string applicationId, string configuration, bool? build = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationRunsdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationRunsdk");

            var localVarPath = "/applications/{application_id}/sdk/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (build != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build", build)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationRunsdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get SDK container Get SDK container information (can be used to check if it&#39;s running)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>DockerContainer</returns>
        public DockerContainer ApplicationSdkContainer (string applicationId, string configuration)
        {
             ApiResponse<DockerContainer> localVarResponse = ApplicationSdkContainerWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SDK container Get SDK container information (can be used to check if it&#39;s running)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of DockerContainer</returns>
        public ApiResponse<DockerContainer> ApplicationSdkContainerWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSdkContainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSdkContainer");

            var localVarPath = "/applications/{application_id}/sdk/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSdkContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Get SDK container Get SDK container information (can be used to check if it&#39;s running)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DockerContainer</returns>
        public async System.Threading.Tasks.Task<DockerContainer> ApplicationSdkContainerAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DockerContainer> localVarResponse = await ApplicationSdkContainerWithHttpInfoAsync(applicationId, configuration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SDK container Get SDK container information (can be used to check if it&#39;s running)
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DockerContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockerContainer>> ApplicationSdkContainerWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSdkContainer");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSdkContainer");

            var localVarPath = "/applications/{application_id}/sdk/container";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSdkContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockerContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockerContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockerContainer)));
        }

        /// <summary>
        /// Stop running container image Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns></returns>
        public void ApplicationStop (string applicationId, string configuration, string deviceId)
        {
             ApplicationStopWithHttpInfo(applicationId, configuration, deviceId);
        }

        /// <summary>
        /// Stop running container image Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationStopWithHttpInfo (string applicationId, string configuration, string deviceId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationStop");

            var localVarPath = "/applications/{application_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Stop running container image Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationStopAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationStopWithHttpInfoAsync(applicationId, configuration, deviceId, cancellationToken);

        }

        /// <summary>
        /// Stop running container image Stop application release or debug container currently running on target, operation succeeds even if the container is not running
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationStopWithHttpInfoAsync (string applicationId, string configuration, string deviceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationStop");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationStop");

            var localVarPath = "/applications/{application_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Synchronize folders Synchronizes folders between host/SDK container and the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void ApplicationSyncfolders (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string))
        {
             ApplicationSyncfoldersWithHttpInfo(applicationId, sourcefolder, configuration, deviceId, destfolder, sourceIsSdk, progressId);
        }

        /// <summary>
        /// Synchronize folders Synchronizes folders between host/SDK container and the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationSyncfoldersWithHttpInfo (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling ApplicationsApi->ApplicationSyncfolders");

            var localVarPath = "/applications/{application_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (sourceIsSdk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_is_sdk", sourceIsSdk)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Synchronize folders Synchronizes folders between host/SDK container and the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationSyncfoldersAsync (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationSyncfoldersWithHttpInfoAsync(applicationId, sourcefolder, configuration, deviceId, destfolder, sourceIsSdk, progressId, cancellationToken);

        }

        /// <summary>
        /// Synchronize folders Synchronizes folders between host/SDK container and the application container
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="sourcefolder"></param>
        /// <param name="configuration"></param>
        /// <param name="deviceId">Target device serial number</param>
        /// <param name="destfolder"></param>
        /// <param name="sourceIsSdk"> (optional)</param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationSyncfoldersWithHttpInfoAsync (string applicationId, string sourcefolder, string configuration, string deviceId, string destfolder, bool? sourceIsSdk = default(bool?), string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'sourcefolder' is set
            if (sourcefolder == null)
                throw new ApiException(400, "Missing required parameter 'sourcefolder' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ApplicationsApi->ApplicationSyncfolders");
            // verify the required parameter 'destfolder' is set
            if (destfolder == null)
                throw new ApiException(400, "Missing required parameter 'destfolder' when calling ApplicationsApi->ApplicationSyncfolders");

            var localVarPath = "/applications/{application_id}/syncfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sourcefolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourcefolder", sourcefolder)); // query parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_id", deviceId)); // query parameter
            if (destfolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destfolder", destfolder)); // query parameter
            if (sourceIsSdk != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_is_sdk", sourceIsSdk)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationSyncfolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if container image is up to date Check if some properties have been changed after the last build of the configuration-specific container image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>bool</returns>
        public bool ApplicationUpdated (string applicationId, string configuration)
        {
             ApiResponse<bool> localVarResponse = ApplicationUpdatedWithHttpInfo(applicationId, configuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if container image is up to date Check if some properties have been changed after the last build of the configuration-specific container image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> ApplicationUpdatedWithHttpInfo (string applicationId, string configuration)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdated");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdated");

            var localVarPath = "/applications/{application_id}/updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Check if container image is up to date Check if some properties have been changed after the last build of the configuration-specific container image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApplicationUpdatedAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<bool> localVarResponse = await ApplicationUpdatedWithHttpInfoAsync(applicationId, configuration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if container image is up to date Check if some properties have been changed after the last build of the configuration-specific container image
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> ApplicationUpdatedWithHttpInfoAsync (string applicationId, string configuration, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdated");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdated");

            var localVarPath = "/applications/{application_id}/updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Update SDK container Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns></returns>
        public void ApplicationUpdatesdk (string applicationId, string configuration, string progressId = default(string))
        {
             ApplicationUpdatesdkWithHttpInfo(applicationId, configuration, progressId);
        }

        /// <summary>
        /// Update SDK container Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationUpdatesdkWithHttpInfo (string applicationId, string configuration, string progressId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdatesdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdatesdk");

            var localVarPath = "/applications/{application_id}/sdk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdatesdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update SDK container Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationUpdatesdkAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApplicationUpdatesdkWithHttpInfoAsync(applicationId, configuration, progressId, cancellationToken);

        }

        /// <summary>
        /// Update SDK container Update the SDK container by adding new dev libraries or synchronizing sysroots
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Id of an application (uuid)</param>
        /// <param name="configuration"></param>
        /// <param name="progressId">Id of a progress cookie (uuid) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationUpdatesdkWithHttpInfoAsync (string applicationId, string configuration, string progressId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationUpdatesdk");
            // verify the required parameter 'configuration' is set
            if (configuration == null)
                throw new ApiException(400, "Missing required parameter 'configuration' when calling ApplicationsApi->ApplicationUpdatesdk");

            var localVarPath = "/applications/{application_id}/sdk/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (configuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "configuration", configuration)); // query parameter
            if (progressId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "progress_id", progressId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationUpdatesdk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create an application configuration Create a new application configuration
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>Application</returns>
        public Application ApplicationsCreate (string platformId, string path, string username = default(string))
        {
             ApiResponse<Application> localVarResponse = ApplicationsCreateWithHttpInfo(platformId, path, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an application configuration Create a new application configuration
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationsCreateWithHttpInfo (string platformId, string path, string username = default(string))
        {
            // verify the required parameter 'platformId' is set
            if (platformId == null)
                throw new ApiException(400, "Missing required parameter 'platformId' when calling ApplicationsApi->ApplicationsCreate");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsCreate");

            var localVarPath = "/applications/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (platformId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform_id", platformId)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Create an application configuration Create a new application configuration
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsCreateAsync (string platformId, string path, string username = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await ApplicationsCreateWithHttpInfoAsync(platformId, path, username, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an application configuration Create a new application configuration
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="platformId"></param>
        /// <param name="path"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsCreateWithHttpInfoAsync (string platformId, string path, string username = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'platformId' is set
            if (platformId == null)
                throw new ApiException(400, "Missing required parameter 'platformId' when calling ApplicationsApi->ApplicationsCreate");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsCreate");

            var localVarPath = "/applications/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (platformId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform_id", platformId)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Load an application configuration Load an application configuration from the local filesystem
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>Application</returns>
        public Application ApplicationsLoad (string path)
        {
             ApiResponse<Application> localVarResponse = ApplicationsLoadWithHttpInfo(path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load an application configuration Load an application configuration from the local filesystem
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> ApplicationsLoadWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsLoad");

            var localVarPath = "/applications/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsLoad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Load an application configuration Load an application configuration from the local filesystem
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsLoadAsync (string path, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await ApplicationsLoadWithHttpInfoAsync(path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load an application configuration Load an application configuration from the local filesystem
        /// </summary>
        /// <exception cref="TorizonRestAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsLoadWithHttpInfoAsync (string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ApplicationsApi->ApplicationsLoad");

            var localVarPath = "/applications/load";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsLoad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

    }
}
